/**
 * Lavendeux Standard Library
 * Copyright Richard Carson, 2024
 * Licensed under the MIT License
 */

//# category: System
//# Get the type of a value
//# This will return the type of the value as a string
//# ```lav
//# type(1) == "int"
type_of(value): string = __syscalld(TYPE, value)

//# category: System
//# Exit the program with a message
//# This will print the message to the console and then exit the program
//# ```lav
//# throw("Goodbye, World!")
throw(msg: string) = __syscalld(THRW, msg)

//# category: System
//# Print a string to the console.
//# This will also return the string
//# ```lav
//# echo("Hello, World!")
//# 'test'.echo()
echo(s: any): string = __syscalld(PRNT, s as string)

// Function stub for the builtin disassemble function
//# category: System
//# Disassemble an expression
//# This will return the disassembled code as a string
//# ```lav
//# disassemble("echo('Hello, World!')")
dissasemble(s): string = nil

// Function stub for the builtin include function
//# category: System
//# Include a file
//# This will include the contents of a file into the current script
//# All functions and global variables will be available after the include
//# ```lav
//# include("file.lav")

//# category: System
//# Draw a cool box around some text
//# This will return a string with the text surrounded by a cool box
//# ```lav
//# draw_cool_box("Title", ["Line 1", "Line 2", "Line 3"])
__draw_cool_box(title, lines) = {
    // Grab the length of the longest line/title
    max_len = max(
        (for l in lines do len(l)) + len(title)
    )

    out = []

    // Header portion
    out += format("╔{}╗", ['═'.repeat(max_len+2)])
    out += format("║ {} ║", [title.pad_right(max_len)])
    out += format("╠{}╣", ['═'.repeat(max_len+2)])

    // Body portion
    for line in lines {
        out += format("║ {} ║", [line.pad_right(max_len)])
    }

    // Footer portion
    out += format("╚{}╝", ['═'.repeat(max_len+2)])

    out.join('\n')
}

//# category: System
//# Show help for available functions
//# With no arguments, this will list all available functions
//# If filtering, more detailed information will be shown for matching functions
//# ```lav
//# help()
//# help("echo")
//# help("system")
help(filter: string = ""): string = {
    functions = for f in __syscalld(LSTFN) do (f as object)

    // Now we reorganize the functions into a dictionary by category
    // We also filter out any functions that start with '__'
    categories = {}
    for f in functions {
        if !(categories contains f['category']) {
            categories[f['category']] = []
        } else nil

        categories[f['category']] += f
    } where !(f['name'] starts_with '__')

    // If we're not filtering, we just list all the functions
    if filter == "" {
        out = ""
        for category in categories {
            lines = []
            for function in categories[category] {
                line = f['signature']
                if f contains 'short' then line += ' ' + f['short'] else nil
                lines += line
            }

            out += __draw_cool_box(category, lines) + '\n'
            return out
        }
    } else {
        // If we are filtering, we only show the functions that match
        out = ""
        for category in categories {
            functions = for f in categories[category] {
                title = f['signature']
                lines = []
                if f contains 'short' then lines += f['short'] else nil
                if f contains 'desc' {
                    for l in __syscalld(SSPLT, f['desc'], '\n') {
                        lines += l
                    }
                } else nil

                if f contains 'example' {
                    for l in __syscalld(SSPLT, f['example'], '\n') {
                        lines += l
                    }
                } else nil

                out += __draw_cool_box(title, lines) + '\n'
            } where {
                f['name'] contains filter || f['category'] contains filter
            }
        }
        
        return out
    }
}

//# category: System
//# Dump the current memory state
//# This will return a string with the current memory state
//# ```lav
//# dump_memory()
__dump_memory():string = __syscalld(PRNTM)