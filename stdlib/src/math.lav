/**
 * Lavendeux Standard Library
 * Copyright Richard Carson, 2024
 * Licensed under the MIT License
 */

//
// Trigonometric functions
//

//# category: Trigonometry
//# Calculate the tangent of a number, in radians.
//# use `to_radians` to convert degrees to radians.
//# ```lav
//# tan(to_radians(45)) == 1
//# tan(PI) == 0
tan(n: numeric): float = __syscalld(TAN, n)

//# category: Trigonometry
//# Calculate the sine of a number, in radians.
//# use `to_radians` to convert degrees to radians.
//# ```lav
//# sin(to_radians(90)) == 1
//# sin(PI) == 0
sin(n: numeric): float = __syscalld(SIN, n)

//# category: Trigonometry
//# Calculate the cosine of a number, in radians.
//# use `to_radians` to convert degrees to radians.
//# ```lav
//# cos(to_radians(0)) == 1
//# cos(PI) == -1
cos(n: numeric): float = __syscalld(COS, n)

//# category: Trigonometry
//# Calculate the arctangent2 of a number pair, in radians.
//# use `to_radians` to convert degrees to radians.
//# ```lav
//# atan2(1, 1) == PI / 4
atan2(y: numeric, x: numeric): float = __syscalld(ATAN2, y, x)

//# category: Trigonometry
//# Calculate the arctangent of a number, in radians.
//# use `to_radians` to convert degrees to radians.
//# ```lav
//# atan(to_radians(1)) == PI / 4
//# atan(0) == 0
atan(n: numeric): float = __syscalld(ATAN, n)

//# category: Trigonometry
//# Calculate the arcsine of a number, in radians.
//# use `to_radians` to convert degrees to radians.
//# ```lav
//# asin(to_radians(1)) == PI / 2
//# asin(0) == 0
asin(n: numeric): float = __syscalld(ASIN, n)

//# category: Trigonometry
//# Calculate the arccosine of a number, in radians.
//# use `to_radians` to convert degrees to radians.
//# ```lav
//# acos(to_radians(1)) == 0
//# acos(0) == PI / 2
acos(n: numeric): float = __syscalld(ACOS, n)

//# category: Trigonometry
//# Calculate the hyperbolic tangent of a number.
//# ```lav
//# tanh(0) == 0
tanh(n: numeric): float = __syscalld(TANH, n)

//# category: Trigonometry
//# Calculate the hyperbolic sine of a number.
//# ```lav
//# sinh(0) == 0
sinh(n: numeric): float = __syscalld(SINH, n)

//# category: Trigonometry
//# Calculate the hyperbolic cosine of a number.
//# ```lav
//# cosh(0) == 1
cosh(n: numeric): float = __syscalld(COSH, n)

//# category: Trigonometry
//# Convert degrees to radians.
//# Used to call trigonometric functions with degrees.
//# ```lav
//# to_radians(180) == PI
to_radians(n: numeric): float = n * PI / 180

//
// Rounding functions
//

//# category: Math
//# Truncate a number to the nearest integer less than or equal to the number.
//# ```lav
//# floor(1.5) == 1
//# floor(-1.5) == -2
floor(n: numeric): float = n as int as float

//# category: Math
//# Truncate a number to the nearest integer greater than or equal to the number.
//# ```lav
//# ceil(1.5) == 2
//# ceil(-1.5) == -1
ceil(n: numeric): float = (n as int as float) + 1

//# category: Math
//# Returns the absolute value of a number.
//# ```lav
//# abs(1) == abs(-1)
abs(n: numeric): float = if n < 0 then -n else n

//# category: Math
//# Round a number to a given precision.
//# ```lav
//# round(1.51) == 2
//# round(-1.51, 1) == -1.5
round(n: numeric, precision: int): float = __syscalld(ROUND, n, precision)

//
// Logarithmic functions
//

//# category: Math
//# Calculate the logarithm of a number with a given base.
//# ```lav
//# log(100, 10) == 2
log(n: numeric, base: numeric): float = __syscalld(LOG, n, base)

//# category: Math
//# Calculate the natural logarithm of a number.
//# ```lav
//# ln(E) == 1
log2(n: numeric): float = __syscalld(LOG, n, 2)

//# category: Math
//# Calculate the base 10 logarithm of a number.
//# ```lav
//# log10(100) == 2
log10(n: numeric): float = __syscalld(LOG, n, 10)

//# category: Math
//# Calculate the natural logarithm of a number.
//# ```lav
//# ln(E) == 1
ln(n: numeric): float = __syscalld(LOG, n, E)

//# category: Math
//# Calculate the logarithm of a number with a given base.
//# ```lav
//# log(100, 10) == 2
ilog2(n: numeric): float = __syscalld(ILOG, n, 2)

//# category: Math
//# Calculate the base 10 logarithm of a number.
//# ```lav
//# log10(100) == 2
ilog(n: numeric, base: numeric): float = __syscalld(ILOG, n, base)

//
// Misc functions
//

//# category: Math
//# Calculate the root of a number with a given base.
//# ```lav
//# root(4, 2) == 2
root(n: numeric, base: numeric): float = __syscalld(ROOT, n, base)

//# category: Math
//# Calculate the square root of a number.
//# ```lav
//# sqrt(4) == 2
sqrt(n: numeric): float = __syscalld(ROOT, n, 2)

//# category: Math
//# Calculate the cube root of a number.
//# ```lav
//# cbrt(8) == 2
cbrt(n: numeric): float = __syscalld(ROOT, n, 3)

//# category: Math
//# Returns the maximum value in an array.
//# See 'sort' for information on how types are compared.
//# ```lav
//# max([1, 2]) == 2
max(input: array) = if input.len() {
    max = input[0]
    for i in 1..input.len() {
        if input[i] > max {
            max = input[i]
        } else nil
    }
    max
} else throw("max: Array is empty.")

//# category: Math
//# Returns the minimum value in an array.
//# See 'sort' for information on how types are compared.
//# ```lav
//# min([1, 2]) == 1
min(input: array) = if input.len() {
    min = input[0]
    for i in 1..input.len() {
        if input[i] < min {
            min = input[i]
        } else nil
    }
    min
} else throw("min: Array is empty.")

