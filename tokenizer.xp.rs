pub mod tokenizer {
    use crate::IntoOwned;
    use logos::{Logos, Skip};
    use std::borrow::Cow;
    pub type TokenSpan = std::ops::Range<usize>;
    pub struct Token<'source> {
        line: usize,
        span: TokenSpan,
        rule: Rule,
        input: Cow<'source, str>,
    }
    #[automatically_derived]
    impl<'source> ::core::clone::Clone for Token<'source> {
        #[inline]
        fn clone(&self) -> Token<'source> {
            Token {
                line: ::core::clone::Clone::clone(&self.line),
                span: ::core::clone::Clone::clone(&self.span),
                rule: ::core::clone::Clone::clone(&self.rule),
                input: ::core::clone::Clone::clone(&self.input),
            }
        }
    }
    #[automatically_derived]
    impl<'source> ::core::marker::StructuralPartialEq for Token<'source> {}
    #[automatically_derived]
    impl<'source> ::core::cmp::PartialEq for Token<'source> {
        #[inline]
        fn eq(&self, other: &Token<'source>) -> bool {
            self.line == other.line && self.span == other.span && self.rule == other.rule
                && self.input == other.input
        }
    }
    #[automatically_derived]
    impl<'source> ::core::marker::StructuralEq for Token<'source> {}
    #[automatically_derived]
    impl<'source> ::core::cmp::Eq for Token<'source> {
        #[inline]
        #[doc(hidden)]
        #[coverage(off)]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<usize>;
            let _: ::core::cmp::AssertParamIsEq<TokenSpan>;
            let _: ::core::cmp::AssertParamIsEq<Rule>;
            let _: ::core::cmp::AssertParamIsEq<Cow<'source, str>>;
        }
    }
    #[automatically_derived]
    impl<'source> ::core::hash::Hash for Token<'source> {
        #[inline]
        fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
            ::core::hash::Hash::hash(&self.line, state);
            ::core::hash::Hash::hash(&self.span, state);
            ::core::hash::Hash::hash(&self.rule, state);
            ::core::hash::Hash::hash(&self.input, state)
        }
    }
    impl<'source> IntoOwned for Token<'source> {
        type Owned = Token<'static>;
        fn into_owned(self) -> Self::Owned {
            Self::Owned {
                line: self.line,
                span: self.span,
                rule: self.rule,
                input: Cow::Owned(self.input.into_owned()),
            }
        }
    }
    impl<'source> Token<'source> {
        pub fn child(&self, rule: Rule, span: TokenSpan) -> Self {
            Token {
                line: self.line,
                span: span.start..span.end,
                rule,
                input: self.input.clone(),
            }
        }
        pub fn set_rule(&mut self, rule: Rule) {
            self.rule = rule;
        }
        /// Expand self to include the span of another token
        pub fn include_span(&mut self, span: TokenSpan) {
            self.span.start = self.span.start.min(span.start);
            self.span.end = self.span.end.max(span.end);
        }
        pub fn line(&self) -> usize {
            self.line
        }
        fn line_slice(&self) -> (&str, usize) {
            let start = self
                .input[..self.span.start]
                .rfind('\n')
                .map_or(0, |pos| pos + 1);
            let mut end = self
                .input[self.span.end..]
                .find('\n')
                .map_or(self.input.len(), |pos| pos + self.span.end);
            if end > self.span.end {
                end = self.span.end;
            }
            (&self.input[start..end], self.span.start - start)
        }
        /// Returns a slice of the input surrounding and ending after the token, with a maximum of 50 characters
        /// Will include a line beneath highlighting the token
        pub fn context_slice(&self) -> String {
            const CONTEXT_LEN: usize = 50;
            let (mut line, mut highlight_start) = self.line_slice();
            let mut highlight_len = line.len() - highlight_start;
            if highlight_len > CONTEXT_LEN {
                line = &line[highlight_start..highlight_start + CONTEXT_LEN];
                highlight_len = CONTEXT_LEN;
                highlight_start = 0;
            } else if line.len() > CONTEXT_LEN {
                line = &line[line.len() - CONTEXT_LEN..];
                highlight_start = CONTEXT_LEN - highlight_len;
            }
            {
                let res = ::alloc::fmt::format(
                    format_args!(
                        "| {0}\n| {1}{2}",
                        line,
                        " ".repeat(highlight_start),
                        "^".repeat(highlight_len),
                    ),
                );
                res
            }
        }
        pub fn span(&self) -> TokenSpan {
            self.span.clone()
        }
        pub fn rule(&self) -> Rule {
            self.rule.clone()
        }
        pub fn input(&self) -> &str {
            &self.input
        }
        pub fn slice(&self) -> &str {
            &self.input[self.span.clone()]
        }
        pub fn is_a(&self, v: &[Rule]) -> bool {
            v.iter().any(|r| self.rule == *r)
        }
    }
    impl std::fmt::Debug for Token<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            f.write_fmt(
                format_args!(
                    "{0:?}({1}:{2:?} `{3}`)",
                    self.rule,
                    self.line(),
                    self.span(),
                    self.slice().replace("\n", "\\n"),
                ),
            )
        }
    }
    impl std::fmt::Display for Token<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            f.write_fmt(format_args!("Line {0}\n{1}", self.line(), self.context_slice()))
        }
    }
    #[logos(skip r"[ \t\r\f]+|(\\\n)+")]
    #[logos(
        subpattern
        currency_symbol = r"[$¢£¤¥֏؋߾߿৲৳৻૱௹฿៛₠₡₢₣₤₥₦₧₨₩₪₫€₭₮₯₰₱₲₳₴₵₶₷₸₹₺₻₼₽₾₿꠸﷼﹩＄￠￡￥￦]"
    )]
    #[logos(
        subpattern
        integer_literal = r"(?:([0-9](\d|_)*)|(?:0[a-zA-Z][a-fA-F0-9]+))"
    )]
    #[logos(extras = usize)]
    #[repr(u16)]
    pub enum Rule {
        #[strum(to_string = "end of input")]
        EOI,
        Script,
        Block,
        #[strum(to_string = "[expression] as [type]")]
        CastExpr,
        #[strum(to_string = "[expression] @[decorator]")]
        DecoratorExpr,
        RangeExpr,
        IndexingExpr,
        DeleteExpr,
        AssignExpr,
        AssignArithmeticExpr,
        AssignBitwiseExpr,
        PrefixNeg,
        PrefixInc,
        PostfixInc,
        PrefixDec,
        PostfixDec,
        IndexingOperator,
        DecoratorOperator,
        FnCallOperator,
        TernaryOperator,
        ArithmethicInfixExpr,
        ArithmeticPrefixExpr,
        ArithmeticPostfixExpr,
        LogicalExpr,
        ComparisonExpr,
        MatchExpr,
        BitwiseInfixExpr,
        Array,
        Object,
        IfExpr,
        TernaryExpr,
        SwitchExpr,
        ForExpr,
        ReturnExpr,
        BreakExpr,
        ContinueExpr,
        FnCallExpr,
        FnAssignExpr,
        #[strum(to_string = "end of line")]
        #[regex("\n|;", |l|{l.extras+= 1})]
        EOL,
        #[strum(to_string = "(")]
        #[token("(")]
        LParen,
        #[strum(to_string = ")")]
        #[token(")")]
        RParen,
        #[strum(to_string = "{")]
        #[token("{")]
        LBrace,
        #[strum(to_string = "}")]
        #[token("}")]
        RBrace,
        #[strum(to_string = "[")]
        #[token("[")]
        LBrack,
        #[strum(to_string = "]")]
        #[token("]")]
        RBrack,
        #[strum(to_string = ",")]
        #[token(",")]
        Comma,
        #[strum(to_string = ".")]
        #[token(".")]
        Dot,
        #[strum(to_string = ":")]
        #[token(":")]
        Colon,
        #[strum(to_string = "?")]
        #[token("?")]
        Question,
        #[strum(to_string = "=>")]
        #[token("=>")]
        FatArrow,
        #[strum(to_string = "..")]
        #[token("..")]
        Range,
        #[strum(to_string = "@")]
        #[token("@")]
        Decorator,
        #[strum(to_string = "=")]
        #[token("=")]
        Assign,
        #[strum(to_string = "+=")]
        #[token("+=")]
        AssignAdd,
        #[strum(to_string = "-=")]
        #[token("-=")]
        AssignSub,
        #[strum(to_string = "**=")]
        #[token("**=")]
        AssignPow,
        #[strum(to_string = "*=")]
        #[token("*=")]
        AssignMul,
        #[strum(to_string = "/=")]
        #[token("/=")]
        AssignDiv,
        #[strum(to_string = "%=")]
        #[token("%=")]
        AssignMod,
        #[strum(to_string = "|=")]
        #[token("|=")]
        AssignOr,
        #[strum(to_string = "&=")]
        #[token("&=")]
        AssignAnd,
        #[strum(to_string = "^=")]
        #[token("^=")]
        AssignXor,
        #[strum(to_string = "<<=")]
        #[token("<<=")]
        AssignSL,
        #[strum(to_string = ">>=")]
        #[token(">>=")]
        AssignSR,
        #[regex(r"//[^\n]*", |_|Skip)]
        LineComment,
        #[regex(
            r"/\*([^*]|\*[^/])*\*/",
            |lex|{let
            mut
            count = 0;for
            c
            in
            lex.slice().chars(){if
            c = = '\n'{count+= 1;}}lex.extras+= count;Skip}
        )]
        BlockComment,
        #[strum(to_string = "++")]
        #[token("++")]
        Inc,
        #[strum(to_string = "--")]
        #[token("--")]
        Dec,
        #[strum(to_string = "+")]
        #[token("+")]
        Add,
        #[strum(to_string = "-")]
        #[token("-")]
        Sub,
        #[strum(to_string = "**")]
        #[token("**")]
        Pow,
        #[strum(to_string = "*")]
        #[token("*")]
        Mul,
        #[strum(to_string = "/")]
        #[token("/")]
        Div,
        #[strum(to_string = "%")]
        #[token("%")]
        Mod,
        #[strum(to_string = "~")]
        #[token("~")]
        BitwiseNot,
        #[strum(to_string = "|")]
        #[token("|")]
        BitwiseOr,
        #[strum(to_string = "&")]
        #[token("&")]
        BitwiseAnd,
        #[strum(to_string = "^")]
        #[token("^")]
        Xor,
        #[strum(to_string = "<<")]
        #[token("<<")]
        SL,
        #[strum(to_string = ">>")]
        #[token(">>")]
        SR,
        #[strum(to_string = "||")]
        #[token("||")]
        LogicalOr,
        #[strum(to_string = "&&")]
        #[token("&&")]
        LogicalAnd,
        #[strum(to_string = "!")]
        #[token("!")]
        LogicalNot,
        #[strum(to_string = "===")]
        #[token("===")]
        SEq,
        #[strum(to_string = "!==")]
        #[token("!==")]
        SNe,
        #[strum(to_string = "==")]
        #[token("==")]
        Eq,
        #[strum(to_string = "!=")]
        #[token("!=")]
        Ne,
        #[strum(to_string = "<=")]
        #[token("<=")]
        Le,
        #[strum(to_string = ">=")]
        #[token(">=")]
        Ge,
        #[strum(to_string = "<")]
        #[token("<")]
        Lt,
        #[strum(to_string = ">")]
        #[token(">")]
        Gt,
        #[strum(to_string = "if")]
        #[token("if")]
        If,
        #[strum(to_string = "then")]
        #[token("then")]
        Then,
        #[strum(to_string = "else")]
        #[token("else")]
        Else,
        #[strum(to_string = "for")]
        #[token("for")]
        For,
        #[strum(to_string = "in")]
        #[token("in")]
        In,
        #[strum(to_string = "do")]
        #[token("do")]
        Do,
        #[strum(to_string = "where")]
        #[token("where")]
        Where,
        #[strum(to_string = "switch")]
        #[token("switch")]
        Switch,
        #[strum(to_string = "return")]
        #[token("return")]
        Return,
        #[strum(to_string = "continue")]
        #[token("continue")]
        Continue,
        #[strum(to_string = "break")]
        #[token("break")]
        Break,
        #[strum(to_string = "del")]
        #[regex("delete|del|unset")]
        Delete,
        #[strum(to_string = "as")]
        #[token("as")]
        As,
        #[strum(to_string = "contains")]
        #[token("contains")]
        Contains,
        #[strum(to_string = "matches")]
        #[token("matches")]
        Matches,
        #[strum(to_string = "is")]
        #[token("is")]
        Is,
        #[strum(to_string = "starts_with")]
        #[regex("starts_with|startswith")]
        StartsWith,
        #[strum(to_string = "ends_with")]
        #[regex("ends_with|endswith")]
        EndsWith,
        #[token("pi", priority = 2)]
        LiteralConstPi,
        #[token("e", priority = 2)]
        LiteralConstE,
        #[token("tau", priority = 2)]
        LiteralConstTau,
        #[token("nil", priority = 2)]
        LiteralConstNil,
        #[token("true", priority = 2)]
        LiteralConstTrue,
        #[token("false", priority = 2)]
        LiteralConstFalse,
        #[regex(r"[a-zA-Z_][0-9A-Za-z_]*", priority = 1)]
        LiteralIdent,
        #[regex(r"(?&integer_literal)u8")]
        LiteralU8,
        #[regex(r"(?&integer_literal)u16")]
        LiteralU16,
        #[regex(r"(?&integer_literal)u32")]
        LiteralU32,
        #[regex(r"(?&integer_literal)u64")]
        LiteralU64,
        #[regex(r"(?&integer_literal)i8")]
        LiteralI8,
        #[regex(r"(?&integer_literal)i16")]
        LiteralI16,
        #[regex(r"(?&integer_literal)i32")]
        LiteralI32,
        #[regex(r"(?&integer_literal)(i64)?")]
        LiteralI64,
        #[regex(r"(?:(?:[1-9](?:\d|_)*\.(?:\d|_)+)|(?:\.(?:\d|_)+))[dDfF]")]
        LiteralDecimal,
        #[regex(
            r"(?:(?:(?:[1-9](?:\d|_)*\.(?:\d|_)+)|(?:\.(?:\d|_)+))(?&currency_symbol))"
        )]
        #[regex(
            r"(?:(?&currency_symbol)(?:(?:[1-9](?:\d|_)*\.(?:\d|_)+)|(?:\.(?:\d|_)+)))"
        )]
        LiteralCurrency,
        #[regex(r"(?:(?:[1-9](?:\d|_)*\.(?:\d|_)+)|(?:\.(?:\d|_)+))(?:[eE][+-]?\d+)?")]
        LiteralFloat,
        #[regex(r#"(?:/(?:\\.|[^\\/])+/[a-zA-Z]*)"#)]
        #[regex(r#"(?:"(?:(?:[^"\\])|(?:\\.))*")"#)]
        #[regex(r#"(?:'(?:(?:[^'\\])|(?:\\.))*')"#)]
        LiteralString,
        Error,
    }
    impl ::core::fmt::Display for Rule {
        fn fmt(
            &self,
            f: &mut ::core::fmt::Formatter,
        ) -> ::core::result::Result<(), ::core::fmt::Error> {
            match *self {
                Rule::EOI => ::core::fmt::Display::fmt("end of input", f),
                Rule::Script => ::core::fmt::Display::fmt("Script", f),
                Rule::Block => ::core::fmt::Display::fmt("Block", f),
                Rule::CastExpr => ::core::fmt::Display::fmt("[expression] as [type]", f),
                Rule::DecoratorExpr => {
                    ::core::fmt::Display::fmt("[expression] @[decorator]", f)
                }
                Rule::RangeExpr => ::core::fmt::Display::fmt("RangeExpr", f),
                Rule::IndexingExpr => ::core::fmt::Display::fmt("IndexingExpr", f),
                Rule::DeleteExpr => ::core::fmt::Display::fmt("DeleteExpr", f),
                Rule::AssignExpr => ::core::fmt::Display::fmt("AssignExpr", f),
                Rule::AssignArithmeticExpr => {
                    ::core::fmt::Display::fmt("AssignArithmeticExpr", f)
                }
                Rule::AssignBitwiseExpr => {
                    ::core::fmt::Display::fmt("AssignBitwiseExpr", f)
                }
                Rule::PrefixNeg => ::core::fmt::Display::fmt("PrefixNeg", f),
                Rule::PrefixInc => ::core::fmt::Display::fmt("PrefixInc", f),
                Rule::PostfixInc => ::core::fmt::Display::fmt("PostfixInc", f),
                Rule::PrefixDec => ::core::fmt::Display::fmt("PrefixDec", f),
                Rule::PostfixDec => ::core::fmt::Display::fmt("PostfixDec", f),
                Rule::IndexingOperator => {
                    ::core::fmt::Display::fmt("IndexingOperator", f)
                }
                Rule::DecoratorOperator => {
                    ::core::fmt::Display::fmt("DecoratorOperator", f)
                }
                Rule::FnCallOperator => ::core::fmt::Display::fmt("FnCallOperator", f),
                Rule::TernaryOperator => ::core::fmt::Display::fmt("TernaryOperator", f),
                Rule::ArithmethicInfixExpr => {
                    ::core::fmt::Display::fmt("ArithmethicInfixExpr", f)
                }
                Rule::ArithmeticPrefixExpr => {
                    ::core::fmt::Display::fmt("ArithmeticPrefixExpr", f)
                }
                Rule::ArithmeticPostfixExpr => {
                    ::core::fmt::Display::fmt("ArithmeticPostfixExpr", f)
                }
                Rule::LogicalExpr => ::core::fmt::Display::fmt("LogicalExpr", f),
                Rule::ComparisonExpr => ::core::fmt::Display::fmt("ComparisonExpr", f),
                Rule::MatchExpr => ::core::fmt::Display::fmt("MatchExpr", f),
                Rule::BitwiseInfixExpr => {
                    ::core::fmt::Display::fmt("BitwiseInfixExpr", f)
                }
                Rule::Array => ::core::fmt::Display::fmt("Array", f),
                Rule::Object => ::core::fmt::Display::fmt("Object", f),
                Rule::IfExpr => ::core::fmt::Display::fmt("IfExpr", f),
                Rule::TernaryExpr => ::core::fmt::Display::fmt("TernaryExpr", f),
                Rule::SwitchExpr => ::core::fmt::Display::fmt("SwitchExpr", f),
                Rule::ForExpr => ::core::fmt::Display::fmt("ForExpr", f),
                Rule::ReturnExpr => ::core::fmt::Display::fmt("ReturnExpr", f),
                Rule::BreakExpr => ::core::fmt::Display::fmt("BreakExpr", f),
                Rule::ContinueExpr => ::core::fmt::Display::fmt("ContinueExpr", f),
                Rule::FnCallExpr => ::core::fmt::Display::fmt("FnCallExpr", f),
                Rule::FnAssignExpr => ::core::fmt::Display::fmt("FnAssignExpr", f),
                Rule::EOL => ::core::fmt::Display::fmt("end of line", f),
                Rule::LParen => ::core::fmt::Display::fmt("(", f),
                Rule::RParen => ::core::fmt::Display::fmt(")", f),
                Rule::LBrace => ::core::fmt::Display::fmt("{", f),
                Rule::RBrace => ::core::fmt::Display::fmt("}", f),
                Rule::LBrack => ::core::fmt::Display::fmt("[", f),
                Rule::RBrack => ::core::fmt::Display::fmt("]", f),
                Rule::Comma => ::core::fmt::Display::fmt(",", f),
                Rule::Dot => ::core::fmt::Display::fmt(".", f),
                Rule::Colon => ::core::fmt::Display::fmt(":", f),
                Rule::Question => ::core::fmt::Display::fmt("?", f),
                Rule::FatArrow => ::core::fmt::Display::fmt("=>", f),
                Rule::Range => ::core::fmt::Display::fmt("..", f),
                Rule::Decorator => ::core::fmt::Display::fmt("@", f),
                Rule::Assign => ::core::fmt::Display::fmt("=", f),
                Rule::AssignAdd => ::core::fmt::Display::fmt("+=", f),
                Rule::AssignSub => ::core::fmt::Display::fmt("-=", f),
                Rule::AssignPow => ::core::fmt::Display::fmt("**=", f),
                Rule::AssignMul => ::core::fmt::Display::fmt("*=", f),
                Rule::AssignDiv => ::core::fmt::Display::fmt("/=", f),
                Rule::AssignMod => ::core::fmt::Display::fmt("%=", f),
                Rule::AssignOr => ::core::fmt::Display::fmt("|=", f),
                Rule::AssignAnd => ::core::fmt::Display::fmt("&=", f),
                Rule::AssignXor => ::core::fmt::Display::fmt("^=", f),
                Rule::AssignSL => ::core::fmt::Display::fmt("<<=", f),
                Rule::AssignSR => ::core::fmt::Display::fmt(">>=", f),
                Rule::LineComment => ::core::fmt::Display::fmt("LineComment", f),
                Rule::BlockComment => ::core::fmt::Display::fmt("BlockComment", f),
                Rule::Inc => ::core::fmt::Display::fmt("++", f),
                Rule::Dec => ::core::fmt::Display::fmt("--", f),
                Rule::Add => ::core::fmt::Display::fmt("+", f),
                Rule::Sub => ::core::fmt::Display::fmt("-", f),
                Rule::Pow => ::core::fmt::Display::fmt("**", f),
                Rule::Mul => ::core::fmt::Display::fmt("*", f),
                Rule::Div => ::core::fmt::Display::fmt("/", f),
                Rule::Mod => ::core::fmt::Display::fmt("%", f),
                Rule::BitwiseNot => ::core::fmt::Display::fmt("~", f),
                Rule::BitwiseOr => ::core::fmt::Display::fmt("|", f),
                Rule::BitwiseAnd => ::core::fmt::Display::fmt("&", f),
                Rule::Xor => ::core::fmt::Display::fmt("^", f),
                Rule::SL => ::core::fmt::Display::fmt("<<", f),
                Rule::SR => ::core::fmt::Display::fmt(">>", f),
                Rule::LogicalOr => ::core::fmt::Display::fmt("||", f),
                Rule::LogicalAnd => ::core::fmt::Display::fmt("&&", f),
                Rule::LogicalNot => ::core::fmt::Display::fmt("!", f),
                Rule::SEq => ::core::fmt::Display::fmt("===", f),
                Rule::SNe => ::core::fmt::Display::fmt("!==", f),
                Rule::Eq => ::core::fmt::Display::fmt("==", f),
                Rule::Ne => ::core::fmt::Display::fmt("!=", f),
                Rule::Le => ::core::fmt::Display::fmt("<=", f),
                Rule::Ge => ::core::fmt::Display::fmt(">=", f),
                Rule::Lt => ::core::fmt::Display::fmt("<", f),
                Rule::Gt => ::core::fmt::Display::fmt(">", f),
                Rule::If => ::core::fmt::Display::fmt("if", f),
                Rule::Then => ::core::fmt::Display::fmt("then", f),
                Rule::Else => ::core::fmt::Display::fmt("else", f),
                Rule::For => ::core::fmt::Display::fmt("for", f),
                Rule::In => ::core::fmt::Display::fmt("in", f),
                Rule::Do => ::core::fmt::Display::fmt("do", f),
                Rule::Where => ::core::fmt::Display::fmt("where", f),
                Rule::Switch => ::core::fmt::Display::fmt("switch", f),
                Rule::Return => ::core::fmt::Display::fmt("return", f),
                Rule::Continue => ::core::fmt::Display::fmt("continue", f),
                Rule::Break => ::core::fmt::Display::fmt("break", f),
                Rule::Delete => ::core::fmt::Display::fmt("del", f),
                Rule::As => ::core::fmt::Display::fmt("as", f),
                Rule::Contains => ::core::fmt::Display::fmt("contains", f),
                Rule::Matches => ::core::fmt::Display::fmt("matches", f),
                Rule::Is => ::core::fmt::Display::fmt("is", f),
                Rule::StartsWith => ::core::fmt::Display::fmt("starts_with", f),
                Rule::EndsWith => ::core::fmt::Display::fmt("ends_with", f),
                Rule::LiteralConstPi => ::core::fmt::Display::fmt("LiteralConstPi", f),
                Rule::LiteralConstE => ::core::fmt::Display::fmt("LiteralConstE", f),
                Rule::LiteralConstTau => ::core::fmt::Display::fmt("LiteralConstTau", f),
                Rule::LiteralConstNil => ::core::fmt::Display::fmt("LiteralConstNil", f),
                Rule::LiteralConstTrue => {
                    ::core::fmt::Display::fmt("LiteralConstTrue", f)
                }
                Rule::LiteralConstFalse => {
                    ::core::fmt::Display::fmt("LiteralConstFalse", f)
                }
                Rule::LiteralIdent => ::core::fmt::Display::fmt("LiteralIdent", f),
                Rule::LiteralU8 => ::core::fmt::Display::fmt("LiteralU8", f),
                Rule::LiteralU16 => ::core::fmt::Display::fmt("LiteralU16", f),
                Rule::LiteralU32 => ::core::fmt::Display::fmt("LiteralU32", f),
                Rule::LiteralU64 => ::core::fmt::Display::fmt("LiteralU64", f),
                Rule::LiteralI8 => ::core::fmt::Display::fmt("LiteralI8", f),
                Rule::LiteralI16 => ::core::fmt::Display::fmt("LiteralI16", f),
                Rule::LiteralI32 => ::core::fmt::Display::fmt("LiteralI32", f),
                Rule::LiteralI64 => ::core::fmt::Display::fmt("LiteralI64", f),
                Rule::LiteralDecimal => ::core::fmt::Display::fmt("LiteralDecimal", f),
                Rule::LiteralCurrency => ::core::fmt::Display::fmt("LiteralCurrency", f),
                Rule::LiteralFloat => ::core::fmt::Display::fmt("LiteralFloat", f),
                Rule::LiteralString => ::core::fmt::Display::fmt("LiteralString", f),
                Rule::Error => ::core::fmt::Display::fmt("Error", f),
            }
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for Rule {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::write_str(
                f,
                match self {
                    Rule::EOI => "EOI",
                    Rule::Script => "Script",
                    Rule::Block => "Block",
                    Rule::CastExpr => "CastExpr",
                    Rule::DecoratorExpr => "DecoratorExpr",
                    Rule::RangeExpr => "RangeExpr",
                    Rule::IndexingExpr => "IndexingExpr",
                    Rule::DeleteExpr => "DeleteExpr",
                    Rule::AssignExpr => "AssignExpr",
                    Rule::AssignArithmeticExpr => "AssignArithmeticExpr",
                    Rule::AssignBitwiseExpr => "AssignBitwiseExpr",
                    Rule::PrefixNeg => "PrefixNeg",
                    Rule::PrefixInc => "PrefixInc",
                    Rule::PostfixInc => "PostfixInc",
                    Rule::PrefixDec => "PrefixDec",
                    Rule::PostfixDec => "PostfixDec",
                    Rule::IndexingOperator => "IndexingOperator",
                    Rule::DecoratorOperator => "DecoratorOperator",
                    Rule::FnCallOperator => "FnCallOperator",
                    Rule::TernaryOperator => "TernaryOperator",
                    Rule::ArithmethicInfixExpr => "ArithmethicInfixExpr",
                    Rule::ArithmeticPrefixExpr => "ArithmeticPrefixExpr",
                    Rule::ArithmeticPostfixExpr => "ArithmeticPostfixExpr",
                    Rule::LogicalExpr => "LogicalExpr",
                    Rule::ComparisonExpr => "ComparisonExpr",
                    Rule::MatchExpr => "MatchExpr",
                    Rule::BitwiseInfixExpr => "BitwiseInfixExpr",
                    Rule::Array => "Array",
                    Rule::Object => "Object",
                    Rule::IfExpr => "IfExpr",
                    Rule::TernaryExpr => "TernaryExpr",
                    Rule::SwitchExpr => "SwitchExpr",
                    Rule::ForExpr => "ForExpr",
                    Rule::ReturnExpr => "ReturnExpr",
                    Rule::BreakExpr => "BreakExpr",
                    Rule::ContinueExpr => "ContinueExpr",
                    Rule::FnCallExpr => "FnCallExpr",
                    Rule::FnAssignExpr => "FnAssignExpr",
                    Rule::EOL => "EOL",
                    Rule::LParen => "LParen",
                    Rule::RParen => "RParen",
                    Rule::LBrace => "LBrace",
                    Rule::RBrace => "RBrace",
                    Rule::LBrack => "LBrack",
                    Rule::RBrack => "RBrack",
                    Rule::Comma => "Comma",
                    Rule::Dot => "Dot",
                    Rule::Colon => "Colon",
                    Rule::Question => "Question",
                    Rule::FatArrow => "FatArrow",
                    Rule::Range => "Range",
                    Rule::Decorator => "Decorator",
                    Rule::Assign => "Assign",
                    Rule::AssignAdd => "AssignAdd",
                    Rule::AssignSub => "AssignSub",
                    Rule::AssignPow => "AssignPow",
                    Rule::AssignMul => "AssignMul",
                    Rule::AssignDiv => "AssignDiv",
                    Rule::AssignMod => "AssignMod",
                    Rule::AssignOr => "AssignOr",
                    Rule::AssignAnd => "AssignAnd",
                    Rule::AssignXor => "AssignXor",
                    Rule::AssignSL => "AssignSL",
                    Rule::AssignSR => "AssignSR",
                    Rule::LineComment => "LineComment",
                    Rule::BlockComment => "BlockComment",
                    Rule::Inc => "Inc",
                    Rule::Dec => "Dec",
                    Rule::Add => "Add",
                    Rule::Sub => "Sub",
                    Rule::Pow => "Pow",
                    Rule::Mul => "Mul",
                    Rule::Div => "Div",
                    Rule::Mod => "Mod",
                    Rule::BitwiseNot => "BitwiseNot",
                    Rule::BitwiseOr => "BitwiseOr",
                    Rule::BitwiseAnd => "BitwiseAnd",
                    Rule::Xor => "Xor",
                    Rule::SL => "SL",
                    Rule::SR => "SR",
                    Rule::LogicalOr => "LogicalOr",
                    Rule::LogicalAnd => "LogicalAnd",
                    Rule::LogicalNot => "LogicalNot",
                    Rule::SEq => "SEq",
                    Rule::SNe => "SNe",
                    Rule::Eq => "Eq",
                    Rule::Ne => "Ne",
                    Rule::Le => "Le",
                    Rule::Ge => "Ge",
                    Rule::Lt => "Lt",
                    Rule::Gt => "Gt",
                    Rule::If => "If",
                    Rule::Then => "Then",
                    Rule::Else => "Else",
                    Rule::For => "For",
                    Rule::In => "In",
                    Rule::Do => "Do",
                    Rule::Where => "Where",
                    Rule::Switch => "Switch",
                    Rule::Return => "Return",
                    Rule::Continue => "Continue",
                    Rule::Break => "Break",
                    Rule::Delete => "Delete",
                    Rule::As => "As",
                    Rule::Contains => "Contains",
                    Rule::Matches => "Matches",
                    Rule::Is => "Is",
                    Rule::StartsWith => "StartsWith",
                    Rule::EndsWith => "EndsWith",
                    Rule::LiteralConstPi => "LiteralConstPi",
                    Rule::LiteralConstE => "LiteralConstE",
                    Rule::LiteralConstTau => "LiteralConstTau",
                    Rule::LiteralConstNil => "LiteralConstNil",
                    Rule::LiteralConstTrue => "LiteralConstTrue",
                    Rule::LiteralConstFalse => "LiteralConstFalse",
                    Rule::LiteralIdent => "LiteralIdent",
                    Rule::LiteralU8 => "LiteralU8",
                    Rule::LiteralU16 => "LiteralU16",
                    Rule::LiteralU32 => "LiteralU32",
                    Rule::LiteralU64 => "LiteralU64",
                    Rule::LiteralI8 => "LiteralI8",
                    Rule::LiteralI16 => "LiteralI16",
                    Rule::LiteralI32 => "LiteralI32",
                    Rule::LiteralI64 => "LiteralI64",
                    Rule::LiteralDecimal => "LiteralDecimal",
                    Rule::LiteralCurrency => "LiteralCurrency",
                    Rule::LiteralFloat => "LiteralFloat",
                    Rule::LiteralString => "LiteralString",
                    Rule::Error => "Error",
                },
            )
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for Rule {
        #[inline]
        fn clone(&self) -> Rule {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for Rule {}
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for Rule {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for Rule {
        #[inline]
        fn eq(&self, other: &Rule) -> bool {
            let __self_tag = ::core::intrinsics::discriminant_value(self);
            let __arg1_tag = ::core::intrinsics::discriminant_value(other);
            __self_tag == __arg1_tag
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for Rule {}
    #[automatically_derived]
    impl ::core::cmp::Eq for Rule {
        #[inline]
        #[doc(hidden)]
        #[coverage(off)]
        fn assert_receiver_is_total_eq(&self) -> () {}
    }
    #[automatically_derived]
    impl ::core::cmp::PartialOrd for Rule {
        #[inline]
        fn partial_cmp(
            &self,
            other: &Rule,
        ) -> ::core::option::Option<::core::cmp::Ordering> {
            let __self_tag = ::core::intrinsics::discriminant_value(self);
            let __arg1_tag = ::core::intrinsics::discriminant_value(other);
            ::core::cmp::PartialOrd::partial_cmp(&__self_tag, &__arg1_tag)
        }
    }
    #[automatically_derived]
    impl ::core::cmp::Ord for Rule {
        #[inline]
        fn cmp(&self, other: &Rule) -> ::core::cmp::Ordering {
            let __self_tag = ::core::intrinsics::discriminant_value(self);
            let __arg1_tag = ::core::intrinsics::discriminant_value(other);
            ::core::cmp::Ord::cmp(&__self_tag, &__arg1_tag)
        }
    }
    #[automatically_derived]
    impl ::core::hash::Hash for Rule {
        #[inline]
        fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
            let __self_tag = ::core::intrinsics::discriminant_value(self);
            ::core::hash::Hash::hash(&__self_tag, state)
        }
    }
    impl<'s> ::logos::Logos<'s> for Rule {
        type Error = ();
        type Extras = usize;
        type Source = str;
        fn lex(lex: &mut ::logos::Lexer<'s, Self>) {
            use ::logos::internal::{LexerInternal, CallbackResult};
            type Lexer<'s> = ::logos::Lexer<'s, Rule>;
            fn _end<'s>(lex: &mut Lexer<'s>) {
                lex.end()
            }
            fn _error<'s>(lex: &mut Lexer<'s>) {
                lex.bump_unchecked(1);
                lex.error();
            }
            static COMPACT_TABLE_0: [u8; 256] = [
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                96,
                224,
                224,
                224,
                224,
                160,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                192,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                224,
                0,
                224,
                224,
                255,
                224,
                255,
                255,
                255,
                255,
                251,
                255,
                255,
                255,
                255,
                255,
                255,
                253,
                255,
                247,
                255,
                255,
                255,
                255,
                255,
                255,
                239,
                255,
                255,
                255,
                255,
                255,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
                224,
            ];
            static COMPACT_TABLE_1: [u8; 256] = [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                0,
                0,
                0,
                0,
                31,
                0,
                30,
                31,
                31,
                15,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                31,
                29,
                23,
                27,
                31,
                31,
                31,
                31,
                31,
                31,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ];
            #[inline]
            fn goto1411_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralI64));
            }
            #[inline]
            fn goto1411_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralI64));
            }
            #[inline]
            fn goto4368_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4366_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4372_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4366_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4373_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4366_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4371_at1_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4368,
                    J4372,
                    J4373,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4372,
                        __,
                        J4372,
                        __,
                        J4372,
                        __,
                        J4372,
                        __,
                        J4372,
                        __,
                        J4372,
                        __,
                        J4372,
                        __,
                        J4372,
                        __,
                        J4372,
                        __,
                        J4372,
                        __,
                        J4373,
                        __,
                        J4373,
                        J4368,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4368 => goto4368_at2_ctx1411_x(lex),
                    Jump::J4372 => goto4372_at2_ctx1411_x(lex),
                    Jump::J4373 => goto4373_at2_ctx1411_x(lex),
                    Jump::__ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto3214_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralFloat));
            }
            #[inline]
            fn goto3214_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralFloat));
            }
            #[inline]
            fn goto2110_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralCurrency));
            }
            #[inline]
            fn goto2111_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([162u8..=165u8]) => {
                        lex.bump_unchecked(2usize);
                        goto2110_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4392_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match byte {
                    190u8..=191u8 => {
                        lex.bump_unchecked(2usize);
                        goto2110_ctx3214_x(lex)
                    }
                    128u8..=137u8 => {
                        lex.bump_unchecked(2usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4398_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn pattern0(byte: u8) -> bool {
                match byte {
                    128u8..=137u8 | 144u8..=153u8 => true,
                    _ => false,
                }
            }
            #[inline]
            fn goto4403_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match byte {
                    byte if pattern0(byte) => {
                        lex.bump_unchecked(3usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4400_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4402_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([134u8..=143u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4391_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4401_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match byte {
                    160u8..=169u8 => {
                        lex.bump_unchecked(3usize);
                        goto4389_ctx3214_x(lex)
                    }
                    155u8 => {
                        lex.bump_unchecked(3usize);
                        goto2110_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4399_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4398,
                    J4403,
                    J4400,
                    J4402,
                    J4391,
                    J4401,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4400,
                        J4398,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4401,
                        J4398,
                        __,
                        __,
                        __,
                        __,
                        J4402,
                        __,
                        J4398,
                        __,
                        __,
                        J4403,
                        __,
                        __,
                        J4398,
                        J4391,
                        __,
                        __,
                        J4403,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4398 => goto4398_at2_ctx3214_x(lex),
                    Jump::J4403 => goto4403_at2_ctx3214_x(lex),
                    Jump::J4400 => goto4400_at2_ctx3214_x(lex),
                    Jump::J4402 => goto4402_at2_ctx3214_x(lex),
                    Jump::J4391 => goto4391_at2_ctx3214_x(lex),
                    Jump::J4401 => goto4401_at2_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4390_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn pattern1(byte: u8) -> bool {
                match byte {
                    144u8..=153u8 | 176u8..=185u8 => true,
                    _ => false,
                }
            }
            #[inline]
            fn goto4405_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match byte {
                    byte if pattern1(byte) => {
                        lex.bump_unchecked(3usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4275_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some(&[184u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2110_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4404_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4390,
                    J4398,
                    J4400,
                    J4405,
                    J4391,
                    J4275,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4390,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4275,
                        __,
                        __,
                        J4398,
                        J4400,
                        __,
                        __,
                        J4405,
                        __,
                        J4398,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4391,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4390 => goto4390_at2_ctx3214_x(lex),
                    Jump::J4398 => goto4398_at2_ctx3214_x(lex),
                    Jump::J4400 => goto4400_at2_ctx3214_x(lex),
                    Jump::J4405 => goto4405_at2_ctx3214_x(lex),
                    Jump::J4391 => goto4391_at2_ctx3214_x(lex),
                    Jump::J4275 => goto4275_at2_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn pattern2(byte: u8) -> bool {
                match byte {
                    178u8..=179u8 | 187u8 => true,
                    _ => false,
                }
            }
            #[inline]
            fn goto4395_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match byte {
                    byte if pattern2(byte) => {
                        lex.bump_unchecked(3usize);
                        goto2110_ctx3214_x(lex)
                    }
                    166u8..=175u8 => {
                        lex.bump_unchecked(3usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4397_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match byte {
                    185u8 => {
                        lex.bump_unchecked(3usize);
                        goto2110_ctx3214_x(lex)
                    }
                    166u8..=175u8 => {
                        lex.bump_unchecked(3usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4394_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto2129_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some(&[191u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2110_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4396_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match byte {
                    177u8 => {
                        lex.bump_unchecked(3usize);
                        goto2110_ctx3214_x(lex)
                    }
                    166u8..=175u8 => {
                        lex.bump_unchecked(3usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4393_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4398,
                    J4395,
                    J4390,
                    J4397,
                    J4394,
                    J2129,
                    J4396,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4394,
                        __,
                        J4395,
                        __,
                        J4394,
                        __,
                        J4396,
                        __,
                        J4394,
                        __,
                        J4397,
                        __,
                        J4394,
                        __,
                        J4394,
                        __,
                        J4394,
                        __,
                        J4394,
                        J2129,
                        J4398,
                        __,
                        J4398,
                        J4390,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4398 => goto4398_at2_ctx3214_x(lex),
                    Jump::J4395 => goto4395_at2_ctx3214_x(lex),
                    Jump::J4390 => goto4390_at2_ctx3214_x(lex),
                    Jump::J4397 => goto4397_at2_ctx3214_x(lex),
                    Jump::J4394 => goto4394_at2_ctx3214_x(lex),
                    Jump::J2129 => goto2129_at2_ctx3214_x(lex),
                    Jump::J4396 => goto4396_at2_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto2137_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some(&[169u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2110_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto2136_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some(&[188u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2110_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4407_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match byte {
                    144u8..=153u8 => {
                        lex.bump_unchecked(3usize);
                        goto4389_ctx3214_x(lex)
                    }
                    132u8 => {
                        lex.bump_unchecked(3usize);
                        goto2110_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn pattern3(byte: u8) -> bool {
                match byte {
                    160u8..=161u8 | 165u8..=166u8 => true,
                    _ => false,
                }
            }
            #[inline]
            fn goto2147_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match byte {
                    byte if pattern3(byte) => {
                        lex.bump_unchecked(3usize);
                        goto2110_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4406_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2137,
                    J2136,
                    J4407,
                    J2147,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2136,
                        __,
                        J2137,
                        __,
                        __,
                        J4407,
                        __,
                        __,
                        J2147,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J2137 => goto2137_at2_ctx3214_x(lex),
                    Jump::J2136 => goto2136_at2_ctx3214_x(lex),
                    Jump::J4407 => goto4407_at2_ctx3214_x(lex),
                    Jump::J2147 => goto2147_at2_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3217_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(2usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3216_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(2usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3218_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(2usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3284_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(1usize) {
                    Some([188u8, 144u8..=153u8]) => {
                        lex.bump_unchecked(3usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3241_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(3usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3216_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(3usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3218_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(3usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3255_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([134u8..=143u8]) => {
                        lex.bump_unchecked(3usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3262_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match byte {
                    byte if pattern0(byte) => {
                        lex.bump_unchecked(3usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3270_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3241,
                    J3216,
                    J3217,
                    J3218,
                    J3255,
                    J3262,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3218,
                        J3241,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3216,
                        J3241,
                        __,
                        __,
                        __,
                        __,
                        J3255,
                        __,
                        J3241,
                        __,
                        __,
                        J3262,
                        __,
                        __,
                        J3241,
                        J3217,
                        __,
                        __,
                        J3262,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3241 => goto3241_at2_ctx3214_x(lex),
                    Jump::J3216 => goto3216_at2_ctx3214_x(lex),
                    Jump::J3217 => goto3217_at2_ctx3214_x(lex),
                    Jump::J3218 => goto3218_at2_ctx3214_x(lex),
                    Jump::J3255 => goto3255_at2_ctx3214_x(lex),
                    Jump::J3262 => goto3262_at2_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3279_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match byte {
                    byte if pattern1(byte) => {
                        lex.bump_unchecked(3usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3283_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3241,
                    J3216,
                    J3217,
                    J3218,
                    J3279,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3216,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3241,
                        J3218,
                        __,
                        __,
                        J3279,
                        __,
                        J3241,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3217,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3241 => goto3241_at2_ctx3214_x(lex),
                    Jump::J3216 => goto3216_at2_ctx3214_x(lex),
                    Jump::J3217 => goto3217_at2_ctx3214_x(lex),
                    Jump::J3218 => goto3218_at2_ctx3214_x(lex),
                    Jump::J3279 => goto3279_at2_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3222_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(3usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3245_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3241,
                    J3216,
                    J3222,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3222,
                        __,
                        J3222,
                        __,
                        J3222,
                        __,
                        J3222,
                        __,
                        J3222,
                        __,
                        J3222,
                        __,
                        J3222,
                        __,
                        J3222,
                        __,
                        J3222,
                        __,
                        J3222,
                        __,
                        J3241,
                        __,
                        J3241,
                        J3216,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3241 => goto3241_at2_ctx3214_x(lex),
                    Jump::J3216 => goto3216_at2_ctx3214_x(lex),
                    Jump::J3222 => goto3222_at2_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3282_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(2usize) {
                    Some([175u8, 176u8..=185u8]) => {
                        lex.bump_unchecked(4usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3217_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(4usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3222_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(4usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3241_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(4usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3218_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(4usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3216_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(4usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3302_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([182u8..=191u8]) => {
                        lex.bump_unchecked(4usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3353_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3217,
                    J3222,
                    J3241,
                    J3218,
                    J3216,
                    J3302,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3222,
                        __,
                        J3217,
                        J3302,
                        __,
                        __,
                        J3241,
                        __,
                        __,
                        __,
                        J3217,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3241,
                        __,
                        J3241,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3241,
                        __,
                        J3218,
                        J3217,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3216,
                        __,
                        J3241,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3241,
                        __,
                        __,
                        __,
                        J3241,
                        J3216,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3241,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3217 => goto3217_at3_ctx3214_x(lex),
                    Jump::J3222 => goto3222_at3_ctx3214_x(lex),
                    Jump::J3241 => goto3241_at3_ctx3214_x(lex),
                    Jump::J3218 => goto3218_at3_ctx3214_x(lex),
                    Jump::J3216 => goto3216_at3_ctx3214_x(lex),
                    Jump::J3302 => goto3302_at3_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3290_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match byte {
                    180u8 => goto3217_at3_ctx3214_x(lex),
                    146u8 => goto3216_at3_ctx3214_x(lex),
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3363_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3241,
                    J3216,
                    J3218,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3216,
                        __,
                        J3218,
                        __,
                        J3241,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3241 => goto3241_at3_ctx3214_x(lex),
                    Jump::J3216 => goto3216_at3_ctx3214_x(lex),
                    Jump::J3218 => goto3218_at3_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3366_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(2usize) {
                    Some([159u8, 142u8..=191u8]) => {
                        lex.bump_unchecked(4usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3379_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3217,
                    J3241,
                    J3218,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3218,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3217,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3217,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3241,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3217 => goto3217_at3_ctx3214_x(lex),
                    Jump::J3241 => goto3241_at3_ctx3214_x(lex),
                    Jump::J3218 => goto3218_at3_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3381_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3282,
                    J3353,
                    J3290,
                    J3363,
                    J3366,
                    J3379,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3290,
                        J3353,
                        __,
                        __,
                        __,
                        __,
                        J3363,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3366,
                        J3379,
                        J3282,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3282 => goto3282_at2_ctx3214_x(lex),
                    Jump::J3353 => goto3353_at2_ctx3214_x(lex),
                    Jump::J3290 => goto3290_at2_ctx3214_x(lex),
                    Jump::J3363 => goto3363_at2_ctx3214_x(lex),
                    Jump::J3366 => goto3366_at2_ctx3214_x(lex),
                    Jump::J3379 => goto3379_at2_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3215_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3217,
                    J3216,
                    J3218,
                    J3284,
                    J3215,
                    J3270,
                    J3283,
                    J3245,
                    J3381,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3215,
                        J3215,
                        J3215,
                        J3215,
                        J3215,
                        J3215,
                        J3215,
                        J3215,
                        J3215,
                        J3215,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3216,
                        __,
                        J3217,
                        __,
                        __,
                        __,
                        J3218,
                        J3245,
                        J3270,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3283,
                        __,
                        __,
                        __,
                        __,
                        J3284,
                        J3381,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto3214_ctx3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3217 => goto3217_at1_ctx3214_x(lex),
                    Jump::J3216 => goto3216_at1_ctx3214_x(lex),
                    Jump::J3218 => goto3218_at1_ctx3214_x(lex),
                    Jump::J3284 => goto3284_at1_ctx3214_x(lex),
                    Jump::J3215 => {
                        lex.bump_unchecked(1usize);
                        goto3215_ctx3214_x(lex)
                    }
                    Jump::J3270 => goto3270_at1_ctx3214_x(lex),
                    Jump::J3283 => goto3283_at1_ctx3214_x(lex),
                    Jump::J3245 => goto3245_at1_ctx3214_x(lex),
                    Jump::J3381 => goto3381_at1_ctx3214_x(lex),
                    Jump::__ => goto3214_ctx3214_x(lex),
                }
            }
            #[inline]
            fn goto3217_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(3usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3284_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(2usize) {
                    Some([188u8, 144u8..=153u8]) => {
                        lex.bump_unchecked(4usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3255_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([134u8..=143u8]) => {
                        lex.bump_unchecked(4usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3262_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match byte {
                    byte if pattern0(byte) => {
                        lex.bump_unchecked(4usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3270_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3241,
                    J3216,
                    J3217,
                    J3218,
                    J3255,
                    J3262,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3218,
                        J3241,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3216,
                        J3241,
                        __,
                        __,
                        __,
                        __,
                        J3255,
                        __,
                        J3241,
                        __,
                        __,
                        J3262,
                        __,
                        __,
                        J3241,
                        J3217,
                        __,
                        __,
                        J3262,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3241 => goto3241_at3_ctx3214_x(lex),
                    Jump::J3216 => goto3216_at3_ctx3214_x(lex),
                    Jump::J3217 => goto3217_at3_ctx3214_x(lex),
                    Jump::J3218 => goto3218_at3_ctx3214_x(lex),
                    Jump::J3255 => goto3255_at3_ctx3214_x(lex),
                    Jump::J3262 => goto3262_at3_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3279_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match byte {
                    byte if pattern1(byte) => {
                        lex.bump_unchecked(4usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3283_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3241,
                    J3216,
                    J3217,
                    J3218,
                    J3279,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3216,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3241,
                        J3218,
                        __,
                        __,
                        J3279,
                        __,
                        J3241,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3217,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3241 => goto3241_at3_ctx3214_x(lex),
                    Jump::J3216 => goto3216_at3_ctx3214_x(lex),
                    Jump::J3217 => goto3217_at3_ctx3214_x(lex),
                    Jump::J3218 => goto3218_at3_ctx3214_x(lex),
                    Jump::J3279 => goto3279_at3_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3245_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3241,
                    J3216,
                    J3222,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3222,
                        __,
                        J3222,
                        __,
                        J3222,
                        __,
                        J3222,
                        __,
                        J3222,
                        __,
                        J3222,
                        __,
                        J3222,
                        __,
                        J3222,
                        __,
                        J3222,
                        __,
                        J3222,
                        __,
                        J3241,
                        __,
                        J3241,
                        J3216,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3241 => goto3241_at3_ctx3214_x(lex),
                    Jump::J3216 => goto3216_at3_ctx3214_x(lex),
                    Jump::J3222 => goto3222_at3_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3282_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(3usize) {
                    Some([175u8, 176u8..=185u8]) => {
                        lex.bump_unchecked(5usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3217_at4_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(5usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3222_at4_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(5usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3241_at4_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(5usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3218_at4_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(5usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3216_at4_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(5usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3302_at4_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([182u8..=191u8]) => {
                        lex.bump_unchecked(5usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3353_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3217,
                    J3222,
                    J3241,
                    J3218,
                    J3216,
                    J3302,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3222,
                        __,
                        J3217,
                        J3302,
                        __,
                        __,
                        J3241,
                        __,
                        __,
                        __,
                        J3217,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3241,
                        __,
                        J3241,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3241,
                        __,
                        J3218,
                        J3217,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3216,
                        __,
                        J3241,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3241,
                        __,
                        __,
                        __,
                        J3241,
                        J3216,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3241,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3217 => goto3217_at4_ctx3214_x(lex),
                    Jump::J3222 => goto3222_at4_ctx3214_x(lex),
                    Jump::J3241 => goto3241_at4_ctx3214_x(lex),
                    Jump::J3218 => goto3218_at4_ctx3214_x(lex),
                    Jump::J3216 => goto3216_at4_ctx3214_x(lex),
                    Jump::J3302 => goto3302_at4_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3290_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match byte {
                    180u8 => goto3217_at4_ctx3214_x(lex),
                    146u8 => goto3216_at4_ctx3214_x(lex),
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3363_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3241,
                    J3216,
                    J3218,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3216,
                        __,
                        J3218,
                        __,
                        J3241,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3241 => goto3241_at4_ctx3214_x(lex),
                    Jump::J3216 => goto3216_at4_ctx3214_x(lex),
                    Jump::J3218 => goto3218_at4_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3366_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(3usize) {
                    Some([159u8, 142u8..=191u8]) => {
                        lex.bump_unchecked(5usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3379_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3217,
                    J3241,
                    J3218,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3218,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3217,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3217,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3241,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3217 => goto3217_at4_ctx3214_x(lex),
                    Jump::J3241 => goto3241_at4_ctx3214_x(lex),
                    Jump::J3218 => goto3218_at4_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3381_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3282,
                    J3353,
                    J3290,
                    J3363,
                    J3366,
                    J3379,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3290,
                        J3353,
                        __,
                        __,
                        __,
                        __,
                        J3363,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3366,
                        J3379,
                        J3282,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3282 => goto3282_at3_ctx3214_x(lex),
                    Jump::J3353 => goto3353_at3_ctx3214_x(lex),
                    Jump::J3290 => goto3290_at3_ctx3214_x(lex),
                    Jump::J3363 => goto3363_at3_ctx3214_x(lex),
                    Jump::J3366 => goto3366_at3_ctx3214_x(lex),
                    Jump::J3379 => goto3379_at3_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3382_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3217,
                    J3216,
                    J3218,
                    J3284,
                    J3215,
                    J3270,
                    J3283,
                    J3245,
                    J3381,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3215,
                        J3215,
                        J3215,
                        J3215,
                        J3215,
                        J3215,
                        J3215,
                        J3215,
                        J3215,
                        J3215,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3216,
                        __,
                        J3217,
                        __,
                        __,
                        __,
                        J3218,
                        J3245,
                        J3270,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3283,
                        __,
                        __,
                        __,
                        __,
                        J3284,
                        J3381,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3217 => goto3217_at2_ctx3214_x(lex),
                    Jump::J3216 => goto3216_at2_ctx3214_x(lex),
                    Jump::J3218 => goto3218_at2_ctx3214_x(lex),
                    Jump::J3284 => goto3284_at2_ctx3214_x(lex),
                    Jump::J3215 => {
                        lex.bump_unchecked(2usize);
                        goto3215_ctx3214_x(lex)
                    }
                    Jump::J3270 => goto3270_at2_ctx3214_x(lex),
                    Jump::J3283 => goto3283_at2_ctx3214_x(lex),
                    Jump::J3245 => goto3245_at2_ctx3214_x(lex),
                    Jump::J3381 => goto3381_at2_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3284_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(3usize) {
                    Some([188u8, 144u8..=153u8]) => {
                        lex.bump_unchecked(5usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3255_at4_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([134u8..=143u8]) => {
                        lex.bump_unchecked(5usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3262_at4_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(4usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match byte {
                    byte if pattern0(byte) => {
                        lex.bump_unchecked(5usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3270_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3241,
                    J3216,
                    J3217,
                    J3218,
                    J3255,
                    J3262,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3218,
                        J3241,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3216,
                        J3241,
                        __,
                        __,
                        __,
                        __,
                        J3255,
                        __,
                        J3241,
                        __,
                        __,
                        J3262,
                        __,
                        __,
                        J3241,
                        J3217,
                        __,
                        __,
                        J3262,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3241 => goto3241_at4_ctx3214_x(lex),
                    Jump::J3216 => goto3216_at4_ctx3214_x(lex),
                    Jump::J3217 => goto3217_at4_ctx3214_x(lex),
                    Jump::J3218 => goto3218_at4_ctx3214_x(lex),
                    Jump::J3255 => goto3255_at4_ctx3214_x(lex),
                    Jump::J3262 => goto3262_at4_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3279_at4_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(4usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match byte {
                    byte if pattern1(byte) => {
                        lex.bump_unchecked(5usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3283_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3241,
                    J3216,
                    J3217,
                    J3218,
                    J3279,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3216,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3241,
                        J3218,
                        __,
                        __,
                        J3279,
                        __,
                        J3241,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3217,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3241 => goto3241_at4_ctx3214_x(lex),
                    Jump::J3216 => goto3216_at4_ctx3214_x(lex),
                    Jump::J3217 => goto3217_at4_ctx3214_x(lex),
                    Jump::J3218 => goto3218_at4_ctx3214_x(lex),
                    Jump::J3279 => goto3279_at4_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3245_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3241,
                    J3216,
                    J3222,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3222,
                        __,
                        J3222,
                        __,
                        J3222,
                        __,
                        J3222,
                        __,
                        J3222,
                        __,
                        J3222,
                        __,
                        J3222,
                        __,
                        J3222,
                        __,
                        J3222,
                        __,
                        J3222,
                        __,
                        J3241,
                        __,
                        J3241,
                        J3216,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3241 => goto3241_at4_ctx3214_x(lex),
                    Jump::J3216 => goto3216_at4_ctx3214_x(lex),
                    Jump::J3222 => goto3222_at4_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3282_at4_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(4usize) {
                    Some([175u8, 176u8..=185u8]) => {
                        lex.bump_unchecked(6usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3217_at5_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(5usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(6usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3222_at5_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(5usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(6usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3241_at5_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(5usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(6usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3218_at5_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(5usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(6usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3216_at5_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(5usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(6usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3302_at5_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(5usize) {
                    Some([182u8..=191u8]) => {
                        lex.bump_unchecked(6usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3353_at4_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3217,
                    J3222,
                    J3241,
                    J3218,
                    J3216,
                    J3302,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3222,
                        __,
                        J3217,
                        J3302,
                        __,
                        __,
                        J3241,
                        __,
                        __,
                        __,
                        J3217,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3241,
                        __,
                        J3241,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3241,
                        __,
                        J3218,
                        J3217,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3216,
                        __,
                        J3241,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3241,
                        __,
                        __,
                        __,
                        J3241,
                        J3216,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3241,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(4usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3217 => goto3217_at5_ctx3214_x(lex),
                    Jump::J3222 => goto3222_at5_ctx3214_x(lex),
                    Jump::J3241 => goto3241_at5_ctx3214_x(lex),
                    Jump::J3218 => goto3218_at5_ctx3214_x(lex),
                    Jump::J3216 => goto3216_at5_ctx3214_x(lex),
                    Jump::J3302 => goto3302_at5_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3290_at4_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(4usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match byte {
                    180u8 => goto3217_at5_ctx3214_x(lex),
                    146u8 => goto3216_at5_ctx3214_x(lex),
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3363_at4_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3241,
                    J3216,
                    J3218,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3216,
                        __,
                        J3218,
                        __,
                        J3241,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(4usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3241 => goto3241_at5_ctx3214_x(lex),
                    Jump::J3216 => goto3216_at5_ctx3214_x(lex),
                    Jump::J3218 => goto3218_at5_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3366_at4_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(4usize) {
                    Some([159u8, 142u8..=191u8]) => {
                        lex.bump_unchecked(6usize);
                        goto3215_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3379_at4_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3217,
                    J3241,
                    J3218,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3218,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3217,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3217,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3241,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(4usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3217 => goto3217_at5_ctx3214_x(lex),
                    Jump::J3241 => goto3241_at5_ctx3214_x(lex),
                    Jump::J3218 => goto3218_at5_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3381_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3282,
                    J3353,
                    J3290,
                    J3363,
                    J3366,
                    J3379,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3290,
                        J3353,
                        __,
                        __,
                        __,
                        __,
                        J3363,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3366,
                        J3379,
                        J3282,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3282 => goto3282_at4_ctx3214_x(lex),
                    Jump::J3353 => goto3353_at4_ctx3214_x(lex),
                    Jump::J3290 => goto3290_at4_ctx3214_x(lex),
                    Jump::J3363 => goto3363_at4_ctx3214_x(lex),
                    Jump::J3366 => goto3366_at4_ctx3214_x(lex),
                    Jump::J3379 => goto3379_at4_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3382_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3217,
                    J3216,
                    J3218,
                    J3284,
                    J3215,
                    J3270,
                    J3283,
                    J3245,
                    J3381,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3215,
                        J3215,
                        J3215,
                        J3215,
                        J3215,
                        J3215,
                        J3215,
                        J3215,
                        J3215,
                        J3215,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3216,
                        __,
                        J3217,
                        __,
                        __,
                        __,
                        J3218,
                        J3245,
                        J3270,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3283,
                        __,
                        __,
                        __,
                        __,
                        J3284,
                        J3381,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3217 => goto3217_at3_ctx3214_x(lex),
                    Jump::J3216 => goto3216_at3_ctx3214_x(lex),
                    Jump::J3218 => goto3218_at3_ctx3214_x(lex),
                    Jump::J3284 => goto3284_at3_ctx3214_x(lex),
                    Jump::J3215 => {
                        lex.bump_unchecked(3usize);
                        goto3215_ctx3214_x(lex)
                    }
                    Jump::J3270 => goto3270_at3_ctx3214_x(lex),
                    Jump::J3283 => goto3283_at3_ctx3214_x(lex),
                    Jump::J3245 => goto3245_at3_ctx3214_x(lex),
                    Jump::J3381 => goto3381_at3_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto3383_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto3382_at1_ctx3214_x(lex),
                };
                match byte {
                    b'+' | b'-' => goto3382_at2_ctx3214_x(lex),
                    _ => goto3382_at1_ctx3214_x(lex),
                }
            }
            #[inline]
            fn goto2113_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some(&[139u8]) => {
                        lex.bump_unchecked(2usize);
                        goto2110_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto2131_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(1usize) {
                    Some([130u8, 160u8..=191u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2110_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4398_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4391_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4400_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4414_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4398,
                    J4391,
                    J4400,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4400,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4391,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4391,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4398,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4398 => goto4398_at3_ctx3214_x(lex),
                    Jump::J4391 => goto4391_at3_ctx3214_x(lex),
                    Jump::J4400 => goto4400_at3_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4413_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(2usize) {
                    Some([159u8, 142u8..=191u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4411_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([182u8..=191u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4390_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4394_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4410_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4398,
                    J4411,
                    J4400,
                    J4390,
                    J4394,
                    J4391,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4394,
                        __,
                        J4391,
                        J4411,
                        __,
                        __,
                        J4398,
                        __,
                        __,
                        __,
                        J4391,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4398,
                        __,
                        J4398,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4398,
                        __,
                        J4400,
                        J4391,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4390,
                        __,
                        J4398,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4398,
                        __,
                        __,
                        __,
                        J4398,
                        J4390,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4398,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4398 => goto4398_at3_ctx3214_x(lex),
                    Jump::J4411 => goto4411_at3_ctx3214_x(lex),
                    Jump::J4400 => goto4400_at3_ctx3214_x(lex),
                    Jump::J4390 => goto4390_at3_ctx3214_x(lex),
                    Jump::J4394 => goto4394_at3_ctx3214_x(lex),
                    Jump::J4391 => goto4391_at3_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4415_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(2usize) {
                    Some([175u8, 176u8..=185u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4412_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4390,
                    J4398,
                    J4400,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4390,
                        __,
                        J4400,
                        __,
                        J4398,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4390 => goto4390_at3_ctx3214_x(lex),
                    Jump::J4398 => goto4398_at3_ctx3214_x(lex),
                    Jump::J4400 => goto4400_at3_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4409_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match byte {
                    146u8 => goto4390_at3_ctx3214_x(lex),
                    180u8 => goto4391_at3_ctx3214_x(lex),
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4408_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4414,
                    J4413,
                    J4410,
                    J4415,
                    J4412,
                    J4409,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4409,
                        J4410,
                        __,
                        __,
                        __,
                        __,
                        J4412,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4413,
                        J4414,
                        J4415,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4414 => goto4414_at2_ctx3214_x(lex),
                    Jump::J4413 => goto4413_at2_ctx3214_x(lex),
                    Jump::J4410 => goto4410_at2_ctx3214_x(lex),
                    Jump::J4415 => goto4415_at2_ctx3214_x(lex),
                    Jump::J4412 => goto4412_at2_ctx3214_x(lex),
                    Jump::J4409 => goto4409_at2_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto1595_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralDecimal));
            }
            #[inline]
            fn goto4390_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(2usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto2112_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some(&[143u8]) => {
                        lex.bump_unchecked(2usize);
                        goto2110_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4391_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(2usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4389_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2111,
                    J2110,
                    J4392,
                    J4399,
                    J4404,
                    J4393,
                    J4406,
                    J3383,
                    J2113,
                    J2131,
                    J4408,
                    J1595,
                    J4390,
                    J4389,
                    J2112,
                    J4391,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2110,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4389,
                        J4389,
                        J4389,
                        J4389,
                        J4389,
                        J4389,
                        J4389,
                        J4389,
                        J4389,
                        J4389,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J1595,
                        J3383,
                        J1595,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4389,
                        __,
                        __,
                        __,
                        __,
                        J1595,
                        J3383,
                        J1595,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2111,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2112,
                        __,
                        J2113,
                        J4390,
                        __,
                        J4391,
                        __,
                        __,
                        __,
                        J4392,
                        J4393,
                        J4399,
                        J2131,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4404,
                        __,
                        __,
                        __,
                        __,
                        J4406,
                        J4408,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto3214_ctx3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J2111 => goto2111_at1_ctx3214_x(lex),
                    Jump::J2110 => {
                        lex.bump_unchecked(1usize);
                        goto2110_ctx3214_x(lex)
                    }
                    Jump::J4392 => goto4392_at1_ctx3214_x(lex),
                    Jump::J4399 => goto4399_at1_ctx3214_x(lex),
                    Jump::J4404 => goto4404_at1_ctx3214_x(lex),
                    Jump::J4393 => goto4393_at1_ctx3214_x(lex),
                    Jump::J4406 => goto4406_at1_ctx3214_x(lex),
                    Jump::J3383 => goto3383_at1_ctx3214_x(lex),
                    Jump::J2113 => goto2113_at1_ctx3214_x(lex),
                    Jump::J2131 => goto2131_at1_ctx3214_x(lex),
                    Jump::J4408 => goto4408_at1_ctx3214_x(lex),
                    Jump::J1595 => {
                        lex.bump_unchecked(1usize);
                        goto1595_ctx3214_x(lex)
                    }
                    Jump::J4390 => goto4390_at1_ctx3214_x(lex),
                    Jump::J4389 => {
                        lex.bump_unchecked(1usize);
                        goto4389_ctx3214_x(lex)
                    }
                    Jump::J2112 => goto2112_at1_ctx3214_x(lex),
                    Jump::J4391 => goto4391_at1_ctx3214_x(lex),
                    Jump::__ => goto3214_ctx3214_x(lex),
                }
            }
            #[inline]
            fn goto4419_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(2usize) {
                    Some([188u8, 144u8..=153u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4398_at4_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(5usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4391_at4_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(5usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4400_at4_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(5usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4414_at3_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4398,
                    J4391,
                    J4400,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4400,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4391,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4391,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4398,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4398 => goto4398_at4_ctx1411_x(lex),
                    Jump::J4391 => goto4391_at4_ctx1411_x(lex),
                    Jump::J4400 => goto4400_at4_ctx1411_x(lex),
                    Jump::__ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4413_at3_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(3usize) {
                    Some([159u8, 142u8..=191u8]) => {
                        lex.bump_unchecked(5usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4411_at4_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([182u8..=191u8]) => {
                        lex.bump_unchecked(5usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4390_at4_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(5usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4394_at4_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(5usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4410_at3_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4398,
                    J4411,
                    J4400,
                    J4390,
                    J4394,
                    J4391,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4394,
                        __,
                        J4391,
                        J4411,
                        __,
                        __,
                        J4398,
                        __,
                        __,
                        __,
                        J4391,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4398,
                        __,
                        J4398,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4398,
                        __,
                        J4400,
                        J4391,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4390,
                        __,
                        J4398,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4398,
                        __,
                        __,
                        __,
                        J4398,
                        J4390,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4398,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4398 => goto4398_at4_ctx1411_x(lex),
                    Jump::J4411 => goto4411_at4_ctx1411_x(lex),
                    Jump::J4400 => goto4400_at4_ctx1411_x(lex),
                    Jump::J4390 => goto4390_at4_ctx1411_x(lex),
                    Jump::J4394 => goto4394_at4_ctx1411_x(lex),
                    Jump::J4391 => goto4391_at4_ctx1411_x(lex),
                    Jump::__ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4415_at3_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(3usize) {
                    Some([175u8, 176u8..=185u8]) => {
                        lex.bump_unchecked(5usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4412_at3_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4390,
                    J4398,
                    J4400,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4390,
                        __,
                        J4400,
                        __,
                        J4398,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4390 => goto4390_at4_ctx1411_x(lex),
                    Jump::J4398 => goto4398_at4_ctx1411_x(lex),
                    Jump::J4400 => goto4400_at4_ctx1411_x(lex),
                    Jump::__ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4409_at3_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match byte {
                    146u8 => goto4390_at4_ctx1411_x(lex),
                    180u8 => goto4391_at4_ctx1411_x(lex),
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4408_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4414,
                    J4413,
                    J4410,
                    J4415,
                    J4412,
                    J4409,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4409,
                        J4410,
                        __,
                        __,
                        __,
                        __,
                        J4412,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4413,
                        J4414,
                        J4415,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4414 => goto4414_at3_ctx1411_x(lex),
                    Jump::J4413 => goto4413_at3_ctx1411_x(lex),
                    Jump::J4410 => goto4410_at3_ctx1411_x(lex),
                    Jump::J4415 => goto4415_at3_ctx1411_x(lex),
                    Jump::J4412 => goto4412_at3_ctx1411_x(lex),
                    Jump::J4409 => goto4409_at3_ctx1411_x(lex),
                    Jump::__ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4390_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4400_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4394_at3_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4398_at3_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4390_at3_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4416_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4394,
                    J4398,
                    J4390,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4394,
                        __,
                        J4394,
                        __,
                        J4394,
                        __,
                        J4394,
                        __,
                        J4394,
                        __,
                        J4394,
                        __,
                        J4394,
                        __,
                        J4394,
                        __,
                        J4394,
                        __,
                        J4394,
                        __,
                        J4398,
                        __,
                        J4398,
                        J4390,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4394 => goto4394_at3_ctx1411_x(lex),
                    Jump::J4398 => goto4398_at3_ctx1411_x(lex),
                    Jump::J4390 => goto4390_at3_ctx1411_x(lex),
                    Jump::__ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4391_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4400_at3_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4405_at3_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match byte {
                    byte if pattern1(byte) => {
                        lex.bump_unchecked(4usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4391_at3_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4418_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4390,
                    J4398,
                    J4400,
                    J4405,
                    J4391,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4390,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4398,
                        J4400,
                        __,
                        __,
                        J4405,
                        __,
                        J4398,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4391,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4390 => goto4390_at3_ctx1411_x(lex),
                    Jump::J4398 => goto4398_at3_ctx1411_x(lex),
                    Jump::J4400 => goto4400_at3_ctx1411_x(lex),
                    Jump::J4405 => goto4405_at3_ctx1411_x(lex),
                    Jump::J4391 => goto4391_at3_ctx1411_x(lex),
                    Jump::__ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4403_at3_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match byte {
                    byte if pattern0(byte) => {
                        lex.bump_unchecked(4usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4402_at3_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([134u8..=143u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4389_ctx3214_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4417_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4398,
                    J4390,
                    J4400,
                    J4403,
                    J4402,
                    J4391,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4400,
                        J4398,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4390,
                        J4398,
                        __,
                        __,
                        __,
                        __,
                        J4402,
                        __,
                        J4398,
                        __,
                        __,
                        J4403,
                        __,
                        __,
                        J4398,
                        J4391,
                        __,
                        __,
                        J4403,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4398 => goto4398_at3_ctx1411_x(lex),
                    Jump::J4390 => goto4390_at3_ctx1411_x(lex),
                    Jump::J4400 => goto4400_at3_ctx1411_x(lex),
                    Jump::J4403 => goto4403_at3_ctx1411_x(lex),
                    Jump::J4402 => goto4402_at3_ctx1411_x(lex),
                    Jump::J4391 => goto4391_at3_ctx1411_x(lex),
                    Jump::__ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4388_at1_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4419,
                    J4408,
                    J4390,
                    J4400,
                    J4389,
                    J4416,
                    J4391,
                    J4418,
                    J4417,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4389,
                        J4389,
                        J4389,
                        J4389,
                        J4389,
                        J4389,
                        J4389,
                        J4389,
                        J4389,
                        J4389,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4389,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4390,
                        __,
                        J4391,
                        __,
                        __,
                        __,
                        J4400,
                        J4416,
                        J4417,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4418,
                        __,
                        __,
                        __,
                        __,
                        J4419,
                        J4408,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4419 => goto4419_at2_ctx1411_x(lex),
                    Jump::J4408 => goto4408_at2_ctx1411_x(lex),
                    Jump::J4390 => goto4390_at2_ctx1411_x(lex),
                    Jump::J4400 => goto4400_at2_ctx1411_x(lex),
                    Jump::J4389 => {
                        lex.bump_unchecked(2usize);
                        goto4389_ctx3214_x(lex)
                    }
                    Jump::J4416 => goto4416_at2_ctx1411_x(lex),
                    Jump::J4391 => goto4391_at2_ctx1411_x(lex),
                    Jump::J4418 => goto4418_at2_ctx1411_x(lex),
                    Jump::J4417 => goto4417_at2_ctx1411_x(lex),
                    Jump::__ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto861_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralI8));
            }
            #[inline]
            fn goto1227_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralI32));
            }
            #[inline]
            fn goto1406_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some(b"2") => {
                        lex.bump_unchecked(3usize);
                        goto1227_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto1590_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some(b"4") => {
                        lex.bump_unchecked(3usize);
                        goto1411_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto1043_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralI16));
            }
            #[inline]
            fn goto1222_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some(b"6") => {
                        lex.bump_unchecked(3usize);
                        goto1043_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4194_at1_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J861,
                    J1406,
                    J1590,
                    J1222,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J1222,
                        __,
                        J1406,
                        __,
                        __,
                        J1590,
                        __,
                        J861,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J861 => {
                        lex.bump_unchecked(2usize);
                        goto861_ctx1411_x(lex)
                    }
                    Jump::J1406 => goto1406_at2_ctx1411_x(lex),
                    Jump::J1590 => goto1590_at2_ctx1411_x(lex),
                    Jump::J1222 => goto1222_at2_ctx1411_x(lex),
                    Jump::__ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4370_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4366_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4375_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([134u8..=143u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4366_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4376_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match byte {
                    byte if pattern0(byte) => {
                        lex.bump_unchecked(3usize);
                        goto4366_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4369_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4366_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4374_at1_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4368,
                    J4373,
                    J4370,
                    J4375,
                    J4376,
                    J4369,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4370,
                        J4373,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4368,
                        J4373,
                        __,
                        __,
                        __,
                        __,
                        J4375,
                        __,
                        J4373,
                        __,
                        __,
                        J4376,
                        __,
                        __,
                        J4373,
                        J4369,
                        __,
                        __,
                        J4376,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4368 => goto4368_at2_ctx1411_x(lex),
                    Jump::J4373 => goto4373_at2_ctx1411_x(lex),
                    Jump::J4370 => goto4370_at2_ctx1411_x(lex),
                    Jump::J4375 => goto4375_at2_ctx1411_x(lex),
                    Jump::J4376 => goto4376_at2_ctx1411_x(lex),
                    Jump::J4369 => goto4369_at2_ctx1411_x(lex),
                    Jump::__ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4378_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match byte {
                    byte if pattern1(byte) => {
                        lex.bump_unchecked(3usize);
                        goto4366_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4377_at1_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4368,
                    J4373,
                    J4370,
                    J4378,
                    J4369,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4368,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4373,
                        J4370,
                        __,
                        __,
                        J4378,
                        __,
                        J4373,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4369,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4368 => goto4368_at2_ctx1411_x(lex),
                    Jump::J4373 => goto4373_at2_ctx1411_x(lex),
                    Jump::J4370 => goto4370_at2_ctx1411_x(lex),
                    Jump::J4378 => goto4378_at2_ctx1411_x(lex),
                    Jump::J4369 => goto4369_at2_ctx1411_x(lex),
                    Jump::__ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto309_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralU16));
            }
            #[inline]
            fn goto488_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some(b"6") => {
                        lex.bump_unchecked(3usize);
                        goto309_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto127_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralU8));
            }
            #[inline]
            fn goto677_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralU64));
            }
            #[inline]
            fn goto856_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some(b"4") => {
                        lex.bump_unchecked(3usize);
                        goto677_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto493_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralU32));
            }
            #[inline]
            fn goto672_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some(b"2") => {
                        lex.bump_unchecked(3usize);
                        goto493_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4030_at1_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J488,
                    J127,
                    J856,
                    J672,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J488,
                        __,
                        J672,
                        __,
                        __,
                        J856,
                        __,
                        J127,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J488 => goto488_at2_ctx1411_x(lex),
                    Jump::J127 => {
                        lex.bump_unchecked(2usize);
                        goto127_ctx1411_x(lex)
                    }
                    Jump::J856 => goto856_at2_ctx1411_x(lex),
                    Jump::J672 => goto672_at2_ctx1411_x(lex),
                    Jump::__ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4368_at1_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(2usize);
                        goto4366_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4370_at1_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(2usize);
                        goto4366_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4379_at1_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(1usize) {
                    Some([188u8, 144u8..=153u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4366_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4368_at3_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4366_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4373_at3_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4366_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4370_at3_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4366_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4383_at3_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([182u8..=191u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4366_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4372_at3_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4366_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4369_at3_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4366_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4382_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4368,
                    J4373,
                    J4370,
                    J4383,
                    J4372,
                    J4369,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4372,
                        __,
                        J4369,
                        J4383,
                        __,
                        __,
                        J4373,
                        __,
                        __,
                        __,
                        J4369,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4373,
                        __,
                        J4373,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4373,
                        __,
                        J4370,
                        J4369,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4368,
                        __,
                        J4373,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4373,
                        __,
                        __,
                        __,
                        J4373,
                        J4368,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4373,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4368 => goto4368_at3_ctx1411_x(lex),
                    Jump::J4373 => goto4373_at3_ctx1411_x(lex),
                    Jump::J4370 => goto4370_at3_ctx1411_x(lex),
                    Jump::J4383 => goto4383_at3_ctx1411_x(lex),
                    Jump::J4372 => goto4372_at3_ctx1411_x(lex),
                    Jump::J4369 => goto4369_at3_ctx1411_x(lex),
                    Jump::__ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4387_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(2usize) {
                    Some([175u8, 176u8..=185u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4366_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4384_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4370,
                    J4368,
                    J4373,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4368,
                        __,
                        J4370,
                        __,
                        J4373,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4370 => goto4370_at3_ctx1411_x(lex),
                    Jump::J4368 => goto4368_at3_ctx1411_x(lex),
                    Jump::J4373 => goto4373_at3_ctx1411_x(lex),
                    Jump::__ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4381_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match byte {
                    146u8 => goto4368_at3_ctx1411_x(lex),
                    180u8 => goto4369_at3_ctx1411_x(lex),
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4386_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4370,
                    J4373,
                    J4369,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4370,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4369,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4369,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4373,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4370 => goto4370_at3_ctx1411_x(lex),
                    Jump::J4373 => goto4373_at3_ctx1411_x(lex),
                    Jump::J4369 => goto4369_at3_ctx1411_x(lex),
                    Jump::__ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4385_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(2usize) {
                    Some([159u8, 142u8..=191u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4366_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4380_at1_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4382,
                    J4387,
                    J4384,
                    J4381,
                    J4386,
                    J4385,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4381,
                        J4382,
                        __,
                        __,
                        __,
                        __,
                        J4384,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4385,
                        J4386,
                        J4387,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4382 => goto4382_at2_ctx1411_x(lex),
                    Jump::J4387 => goto4387_at2_ctx1411_x(lex),
                    Jump::J4384 => goto4384_at2_ctx1411_x(lex),
                    Jump::J4381 => goto4381_at2_ctx1411_x(lex),
                    Jump::J4386 => goto4386_at2_ctx1411_x(lex),
                    Jump::J4385 => goto4385_at2_ctx1411_x(lex),
                    Jump::__ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4369_at1_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(2usize);
                        goto4366_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4366_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4366,
                    J4371,
                    J4388,
                    J4194,
                    J4374,
                    J4377,
                    J4030,
                    J4368,
                    J4370,
                    J4379,
                    J4380,
                    J4369,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4388,
                        __,
                        J4366,
                        J4366,
                        J4366,
                        J4366,
                        J4366,
                        J4366,
                        J4366,
                        J4366,
                        J4366,
                        J4366,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4366,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4194,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4368,
                        __,
                        J4369,
                        __,
                        __,
                        __,
                        J4370,
                        J4371,
                        J4374,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4377,
                        __,
                        __,
                        __,
                        __,
                        J4379,
                        J4380,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto1411_ctx1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4366 => {
                        lex.bump_unchecked(1usize);
                        goto4366_ctx1411_x(lex)
                    }
                    Jump::J4371 => goto4371_at1_ctx1411_x(lex),
                    Jump::J4388 => goto4388_at1_ctx1411_x(lex),
                    Jump::J4194 => goto4194_at1_ctx1411_x(lex),
                    Jump::J4374 => goto4374_at1_ctx1411_x(lex),
                    Jump::J4377 => goto4377_at1_ctx1411_x(lex),
                    Jump::J4030 => goto4030_at1_ctx1411_x(lex),
                    Jump::J4368 => goto4368_at1_ctx1411_x(lex),
                    Jump::J4370 => goto4370_at1_ctx1411_x(lex),
                    Jump::J4379 => goto4379_at1_ctx1411_x(lex),
                    Jump::J4380 => goto4380_at1_ctx1411_x(lex),
                    Jump::J4369 => goto4369_at1_ctx1411_x(lex),
                    Jump::__ => goto1411_ctx1411_x(lex),
                }
            }
            #[inline]
            fn goto124_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralIdent));
            }
            #[inline]
            fn pattern4(byte: u8) -> bool {
                COMPACT_TABLE_0[byte as usize] & 1 > 0
            }
            #[inline]
            fn goto125_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                while let Some(arr) = lex.read::<&[u8; 16]>() {
                    if pattern4(arr[0]) {
                        if pattern4(arr[1]) {
                            if pattern4(arr[2]) {
                                if pattern4(arr[3]) {
                                    if pattern4(arr[4]) {
                                        if pattern4(arr[5]) {
                                            if pattern4(arr[6]) {
                                                if pattern4(arr[7]) {
                                                    if pattern4(arr[8]) {
                                                        if pattern4(arr[9]) {
                                                            if pattern4(arr[10]) {
                                                                if pattern4(arr[11]) {
                                                                    if pattern4(arr[12]) {
                                                                        if pattern4(arr[13]) {
                                                                            if pattern4(arr[14]) {
                                                                                if pattern4(arr[15]) {
                                                                                    lex.bump_unchecked(16);
                                                                                    continue;
                                                                                }
                                                                                lex.bump_unchecked(15);
                                                                                return goto124_ctx124_x(lex);
                                                                            }
                                                                            lex.bump_unchecked(14);
                                                                            return goto124_ctx124_x(lex);
                                                                        }
                                                                        lex.bump_unchecked(13);
                                                                        return goto124_ctx124_x(lex);
                                                                    }
                                                                    lex.bump_unchecked(12);
                                                                    return goto124_ctx124_x(lex);
                                                                }
                                                                lex.bump_unchecked(11);
                                                                return goto124_ctx124_x(lex);
                                                            }
                                                            lex.bump_unchecked(10);
                                                            return goto124_ctx124_x(lex);
                                                        }
                                                        lex.bump_unchecked(9);
                                                        return goto124_ctx124_x(lex);
                                                    }
                                                    lex.bump_unchecked(8);
                                                    return goto124_ctx124_x(lex);
                                                }
                                                lex.bump_unchecked(7);
                                                return goto124_ctx124_x(lex);
                                            }
                                            lex.bump_unchecked(6);
                                            return goto124_ctx124_x(lex);
                                        }
                                        lex.bump_unchecked(5);
                                        return goto124_ctx124_x(lex);
                                    }
                                    lex.bump_unchecked(4);
                                    return goto124_ctx124_x(lex);
                                }
                                lex.bump_unchecked(3);
                                return goto124_ctx124_x(lex);
                            }
                            lex.bump_unchecked(2);
                            return goto124_ctx124_x(lex);
                        }
                        lex.bump_unchecked(1);
                        return goto124_ctx124_x(lex);
                    }
                    return goto124_ctx124_x(lex);
                }
                while lex.test(pattern4) {
                    lex.bump_unchecked(1);
                }
                goto124_ctx124_x(lex);
            }
            #[inline]
            fn pattern5(byte: u8) -> bool {
                COMPACT_TABLE_0[byte as usize] & 2 > 0
            }
            #[inline]
            fn goto81_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Delete));
            }
            #[inline]
            fn pattern6(byte: u8) -> bool {
                COMPACT_TABLE_0[byte as usize] & 4 > 0
            }
            #[inline]
            fn goto3928_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto81_ctx124_x(lex),
                };
                match byte {
                    byte if pattern4(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    _ => goto81_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto3927_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 2usize]>() {
                    Some(b"te") => {
                        lex.bump_unchecked(2usize);
                        goto3928_ctx124_x(lex)
                    }
                    _ => goto125_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto3925_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto81_ctx124_x(lex),
                };
                match byte {
                    byte if pattern6(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    b'e' => {
                        lex.bump_unchecked(1usize);
                        goto3927_ctx124_x(lex)
                    }
                    _ => goto81_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto4522_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto124_ctx124_x(lex),
                };
                match byte {
                    byte if pattern5(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    b'l' => {
                        lex.bump_unchecked(1usize);
                        goto3925_ctx124_x(lex)
                    }
                    _ => goto124_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto75_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Do));
            }
            #[inline]
            fn goto4523_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto75_ctx124_x(lex),
                };
                match byte {
                    byte if pattern4(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    _ => goto75_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto4520_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J125,
                    J4522,
                    J4523,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        __,
                        __,
                        __,
                        __,
                        J125,
                        __,
                        J125,
                        J125,
                        J125,
                        J125,
                        J4522,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J4523,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto124_ctx124_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J125 => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    Jump::J4522 => {
                        lex.bump_unchecked(1usize);
                        goto4522_ctx124_x(lex)
                    }
                    Jump::J4523 => {
                        lex.bump_unchecked(1usize);
                        goto4523_ctx124_x(lex)
                    }
                    Jump::__ => goto124_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto76_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Where));
            }
            #[inline]
            fn goto4526_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto76_ctx125_x(lex),
                };
                match byte {
                    byte if pattern4(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    _ => goto76_ctx125_x(lex),
                }
            }
            #[inline]
            fn goto4525_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 4usize]>() {
                    Some(b"here") => {
                        lex.bump_unchecked(4usize);
                        goto4526_ctx125_x(lex)
                    }
                    _ => goto125_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto2662_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralCurrency));
            }
            #[inline]
            fn goto2662_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralCurrency));
            }
            #[inline]
            fn goto3005_at1_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(2usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto3005_at2_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(3usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto3030_at2_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(3usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto3011_at2_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(3usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto3034_at1_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3005,
                    J3030,
                    J3011,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3030,
                        __,
                        J3030,
                        J3005,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto2662_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3005 => goto3005_at2_ctx2662_x(lex),
                    Jump::J3030 => goto3030_at2_ctx2662_x(lex),
                    Jump::J3011 => goto3011_at2_ctx2662_x(lex),
                    Jump::__ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto3044_at2_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([134u8..=143u8]) => {
                        lex.bump_unchecked(3usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto3006_at2_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(3usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto3051_at2_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto2662_x(lex),
                };
                match byte {
                    byte if pattern0(byte) => {
                        lex.bump_unchecked(3usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto3007_at2_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(3usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto3059_at1_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3044,
                    J3005,
                    J3006,
                    J3051,
                    J3030,
                    J3007,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3007,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3005,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        J3044,
                        __,
                        J3030,
                        __,
                        __,
                        J3051,
                        __,
                        __,
                        J3030,
                        J3006,
                        __,
                        __,
                        J3051,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto2662_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3044 => goto3044_at2_ctx2662_x(lex),
                    Jump::J3005 => goto3005_at2_ctx2662_x(lex),
                    Jump::J3006 => goto3006_at2_ctx2662_x(lex),
                    Jump::J3051 => goto3051_at2_ctx2662_x(lex),
                    Jump::J3030 => goto3030_at2_ctx2662_x(lex),
                    Jump::J3007 => goto3007_at2_ctx2662_x(lex),
                    Jump::__ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto3068_at2_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto2662_x(lex),
                };
                match byte {
                    byte if pattern1(byte) => {
                        lex.bump_unchecked(3usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto3072_at1_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3068,
                    J3005,
                    J3006,
                    J3030,
                    J3007,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3005,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3030,
                        J3007,
                        __,
                        __,
                        J3068,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3006,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto2662_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3068 => goto3068_at2_ctx2662_x(lex),
                    Jump::J3005 => goto3005_at2_ctx2662_x(lex),
                    Jump::J3006 => goto3006_at2_ctx2662_x(lex),
                    Jump::J3030 => goto3030_at2_ctx2662_x(lex),
                    Jump::J3007 => goto3007_at2_ctx2662_x(lex),
                    Jump::__ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto3073_at1_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(1usize) {
                    Some([188u8, 144u8..=153u8]) => {
                        lex.bump_unchecked(3usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto3071_at2_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(2usize) {
                    Some([175u8, 176u8..=185u8]) => {
                        lex.bump_unchecked(4usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto3005_at3_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(4usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto3030_at3_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(4usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto3007_at3_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(4usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto3152_at2_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3005,
                    J3030,
                    J3007,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3005,
                        __,
                        J3007,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto2662_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3005 => goto3005_at3_ctx2662_x(lex),
                    Jump::J3030 => goto3030_at3_ctx2662_x(lex),
                    Jump::J3007 => goto3007_at3_ctx2662_x(lex),
                    Jump::__ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto3155_at2_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(2usize) {
                    Some([159u8, 142u8..=191u8]) => {
                        lex.bump_unchecked(4usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto3006_at3_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(4usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto3168_at2_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3030,
                    J3006,
                    J3007,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3007,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3006,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3006,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto2662_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3030 => goto3030_at3_ctx2662_x(lex),
                    Jump::J3006 => goto3006_at3_ctx2662_x(lex),
                    Jump::J3007 => goto3007_at3_ctx2662_x(lex),
                    Jump::__ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto3079_at2_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto2662_x(lex),
                };
                match byte {
                    146u8 => goto3005_at3_ctx2662_x(lex),
                    180u8 => goto3006_at3_ctx2662_x(lex),
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto3091_at3_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([182u8..=191u8]) => {
                        lex.bump_unchecked(4usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto3011_at3_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(4usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto3142_at2_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3007,
                    J3005,
                    J3091,
                    J3011,
                    J3006,
                    J3030,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3011,
                        __,
                        J3006,
                        J3091,
                        __,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        J3006,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3030,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3030,
                        __,
                        J3007,
                        J3006,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3005,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        J3030,
                        J3005,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto2662_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3007 => goto3007_at3_ctx2662_x(lex),
                    Jump::J3005 => goto3005_at3_ctx2662_x(lex),
                    Jump::J3091 => goto3091_at3_ctx2662_x(lex),
                    Jump::J3011 => goto3011_at3_ctx2662_x(lex),
                    Jump::J3006 => goto3006_at3_ctx2662_x(lex),
                    Jump::J3030 => goto3030_at3_ctx2662_x(lex),
                    Jump::__ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto3170_at1_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3071,
                    J3152,
                    J3155,
                    J3168,
                    J3079,
                    J3142,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3079,
                        J3142,
                        __,
                        __,
                        __,
                        __,
                        J3152,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3155,
                        J3168,
                        J3071,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto2662_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3071 => goto3071_at2_ctx2662_x(lex),
                    Jump::J3152 => goto3152_at2_ctx2662_x(lex),
                    Jump::J3155 => goto3155_at2_ctx2662_x(lex),
                    Jump::J3168 => goto3168_at2_ctx2662_x(lex),
                    Jump::J3079 => goto3079_at2_ctx2662_x(lex),
                    Jump::J3142 => goto3142_at2_ctx2662_x(lex),
                    Jump::__ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto3007_at1_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(2usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto3006_at1_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(2usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto3004_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3004,
                    J3005,
                    J3034,
                    J3059,
                    J3072,
                    J3073,
                    J3170,
                    J3007,
                    J3006,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3004,
                        J3004,
                        J3004,
                        J3004,
                        J3004,
                        J3004,
                        J3004,
                        J3004,
                        J3004,
                        J3004,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3004,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3005,
                        __,
                        J3006,
                        __,
                        __,
                        __,
                        J3007,
                        J3034,
                        J3059,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3072,
                        __,
                        __,
                        __,
                        __,
                        J3073,
                        J3170,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto2662_ctx2662_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3004 => {
                        lex.bump_unchecked(1usize);
                        goto3004_ctx2662_x(lex)
                    }
                    Jump::J3005 => goto3005_at1_ctx2662_x(lex),
                    Jump::J3034 => goto3034_at1_ctx2662_x(lex),
                    Jump::J3059 => goto3059_at1_ctx2662_x(lex),
                    Jump::J3072 => goto3072_at1_ctx2662_x(lex),
                    Jump::J3073 => goto3073_at1_ctx2662_x(lex),
                    Jump::J3170 => goto3170_at1_ctx2662_x(lex),
                    Jump::J3007 => goto3007_at1_ctx2662_x(lex),
                    Jump::J3006 => goto3006_at1_ctx2662_x(lex),
                    Jump::__ => goto2662_ctx2662_x(lex),
                }
            }
            #[inline]
            fn goto3005_at4<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(5usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3005_at5<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(5usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(6usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3030_at5<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(5usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(6usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3011_at5<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(5usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(6usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3034_at4<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3005,
                    J3030,
                    J3011,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3030,
                        __,
                        J3030,
                        J3005,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(4usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3005 => goto3005_at5(lex),
                    Jump::J3030 => goto3030_at5(lex),
                    Jump::J3011 => goto3011_at5(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto3044_at5<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(5usize) {
                    Some([134u8..=143u8]) => {
                        lex.bump_unchecked(6usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3006_at5<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(5usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(6usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3051_at5<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(5usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match byte {
                    byte if pattern0(byte) => {
                        lex.bump_unchecked(6usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3007_at5<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(5usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(6usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3059_at4<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3044,
                    J3005,
                    J3006,
                    J3051,
                    J3030,
                    J3007,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3007,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3005,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        J3044,
                        __,
                        J3030,
                        __,
                        __,
                        J3051,
                        __,
                        __,
                        J3030,
                        J3006,
                        __,
                        __,
                        J3051,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(4usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3044 => goto3044_at5(lex),
                    Jump::J3005 => goto3005_at5(lex),
                    Jump::J3006 => goto3006_at5(lex),
                    Jump::J3051 => goto3051_at5(lex),
                    Jump::J3030 => goto3030_at5(lex),
                    Jump::J3007 => goto3007_at5(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto3068_at5<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(5usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match byte {
                    byte if pattern1(byte) => {
                        lex.bump_unchecked(6usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3072_at4<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3068,
                    J3005,
                    J3006,
                    J3030,
                    J3007,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3005,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3030,
                        J3007,
                        __,
                        __,
                        J3068,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3006,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(4usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3068 => goto3068_at5(lex),
                    Jump::J3005 => goto3005_at5(lex),
                    Jump::J3006 => goto3006_at5(lex),
                    Jump::J3030 => goto3030_at5(lex),
                    Jump::J3007 => goto3007_at5(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto3073_at4<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(4usize) {
                    Some([188u8, 144u8..=153u8]) => {
                        lex.bump_unchecked(6usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3071_at5<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(5usize) {
                    Some([175u8, 176u8..=185u8]) => {
                        lex.bump_unchecked(7usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3005_at6<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(6usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(7usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3030_at6<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(6usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(7usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3007_at6<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(6usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(7usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3152_at5<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3005,
                    J3030,
                    J3007,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3005,
                        __,
                        J3007,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(5usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3005 => goto3005_at6(lex),
                    Jump::J3030 => goto3030_at6(lex),
                    Jump::J3007 => goto3007_at6(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto3155_at5<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(5usize) {
                    Some([159u8, 142u8..=191u8]) => {
                        lex.bump_unchecked(7usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3006_at6<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(6usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(7usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3168_at5<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3030,
                    J3006,
                    J3007,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3007,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3006,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3006,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(5usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3030 => goto3030_at6(lex),
                    Jump::J3006 => goto3006_at6(lex),
                    Jump::J3007 => goto3007_at6(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto3079_at5<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(5usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match byte {
                    146u8 => goto3005_at6(lex),
                    180u8 => goto3006_at6(lex),
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3091_at6<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(6usize) {
                    Some([182u8..=191u8]) => {
                        lex.bump_unchecked(7usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3011_at6<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(6usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(7usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3142_at5<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3007,
                    J3005,
                    J3091,
                    J3011,
                    J3006,
                    J3030,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3011,
                        __,
                        J3006,
                        J3091,
                        __,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        J3006,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3030,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3030,
                        __,
                        J3007,
                        J3006,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3005,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        J3030,
                        J3005,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(5usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3007 => goto3007_at6(lex),
                    Jump::J3005 => goto3005_at6(lex),
                    Jump::J3091 => goto3091_at6(lex),
                    Jump::J3011 => goto3011_at6(lex),
                    Jump::J3006 => goto3006_at6(lex),
                    Jump::J3030 => goto3030_at6(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto3170_at4<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3071,
                    J3152,
                    J3155,
                    J3168,
                    J3079,
                    J3142,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3079,
                        J3142,
                        __,
                        __,
                        __,
                        __,
                        J3152,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3155,
                        J3168,
                        J3071,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(4usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3071 => goto3071_at5(lex),
                    Jump::J3152 => goto3152_at5(lex),
                    Jump::J3155 => goto3155_at5(lex),
                    Jump::J3168 => goto3168_at5(lex),
                    Jump::J3079 => goto3079_at5(lex),
                    Jump::J3142 => goto3142_at5(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto3007_at4<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(5usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3006_at4<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(5usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3173_at3<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3004,
                    J3005,
                    J3034,
                    J3059,
                    J3072,
                    J3073,
                    J3170,
                    J3007,
                    J3006,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3004,
                        J3004,
                        J3004,
                        J3004,
                        J3004,
                        J3004,
                        J3004,
                        J3004,
                        J3004,
                        J3004,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3004,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3005,
                        __,
                        J3006,
                        __,
                        __,
                        __,
                        J3007,
                        J3034,
                        J3059,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3072,
                        __,
                        __,
                        __,
                        __,
                        J3073,
                        J3170,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3004 => {
                        lex.bump_unchecked(4usize);
                        goto3004_ctx2662_x(lex)
                    }
                    Jump::J3005 => goto3005_at4(lex),
                    Jump::J3034 => goto3034_at4(lex),
                    Jump::J3059 => goto3059_at4(lex),
                    Jump::J3072 => goto3072_at4(lex),
                    Jump::J3073 => goto3073_at4(lex),
                    Jump::J3170 => goto3170_at4(lex),
                    Jump::J3007 => goto3007_at4(lex),
                    Jump::J3006 => goto3006_at4(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto2689_at2_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto2665_at2_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto2727_at2_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto2662_x(lex),
                };
                match byte {
                    byte if pattern1(byte) => {
                        lex.bump_unchecked(3usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto2666_at2_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto2664_at2_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto2731_at1_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2689,
                    J2665,
                    J2727,
                    J2666,
                    J2664,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2664,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2689,
                        J2666,
                        __,
                        __,
                        J2727,
                        __,
                        J2689,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2665,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto2662_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J2689 => goto2689_at2_ctx2662_x(lex),
                    Jump::J2665 => goto2665_at2_ctx2662_x(lex),
                    Jump::J2727 => goto2727_at2_ctx2662_x(lex),
                    Jump::J2666 => goto2666_at2_ctx2662_x(lex),
                    Jump::J2664 => goto2664_at2_ctx2662_x(lex),
                    Jump::__ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto2666_at3_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto2689_at3_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto2664_at3_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto2811_at2_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2666,
                    J2689,
                    J2664,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2664,
                        __,
                        J2666,
                        __,
                        J2689,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto2662_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J2666 => goto2666_at3_ctx2662_x(lex),
                    Jump::J2689 => goto2689_at3_ctx2662_x(lex),
                    Jump::J2664 => goto2664_at3_ctx2662_x(lex),
                    Jump::__ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto2814_at2_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(2usize) {
                    Some([159u8, 142u8..=191u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto2670_at3_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto2665_at3_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto2750_at3_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([182u8..=191u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto2801_at2_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2670,
                    J2665,
                    J2750,
                    J2689,
                    J2666,
                    J2664,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2670,
                        __,
                        J2665,
                        J2750,
                        __,
                        __,
                        J2689,
                        __,
                        __,
                        __,
                        J2665,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2689,
                        __,
                        J2689,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2689,
                        __,
                        J2666,
                        J2665,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2664,
                        __,
                        J2689,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2689,
                        __,
                        __,
                        __,
                        J2689,
                        J2664,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2689,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto2662_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J2670 => goto2670_at3_ctx2662_x(lex),
                    Jump::J2665 => goto2665_at3_ctx2662_x(lex),
                    Jump::J2750 => goto2750_at3_ctx2662_x(lex),
                    Jump::J2689 => goto2689_at3_ctx2662_x(lex),
                    Jump::J2666 => goto2666_at3_ctx2662_x(lex),
                    Jump::J2664 => goto2664_at3_ctx2662_x(lex),
                    Jump::__ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto2827_at2_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2666,
                    J2665,
                    J2689,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2666,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2665,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2665,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2689,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto2662_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J2666 => goto2666_at3_ctx2662_x(lex),
                    Jump::J2665 => goto2665_at3_ctx2662_x(lex),
                    Jump::J2689 => goto2689_at3_ctx2662_x(lex),
                    Jump::__ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto2738_at2_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto2662_x(lex),
                };
                match byte {
                    180u8 => goto2665_at3_ctx2662_x(lex),
                    146u8 => goto2664_at3_ctx2662_x(lex),
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto2730_at2_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(2usize) {
                    Some([175u8, 176u8..=185u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto2829_at1_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2811,
                    J2814,
                    J2801,
                    J2827,
                    J2738,
                    J2730,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2738,
                        J2801,
                        __,
                        __,
                        __,
                        __,
                        J2811,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2814,
                        J2827,
                        J2730,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto2662_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J2811 => goto2811_at2_ctx2662_x(lex),
                    Jump::J2814 => goto2814_at2_ctx2662_x(lex),
                    Jump::J2801 => goto2801_at2_ctx2662_x(lex),
                    Jump::J2827 => goto2827_at2_ctx2662_x(lex),
                    Jump::J2738 => goto2738_at2_ctx2662_x(lex),
                    Jump::J2730 => goto2730_at2_ctx2662_x(lex),
                    Jump::__ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto2710_at2_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto2662_x(lex),
                };
                match byte {
                    byte if pattern0(byte) => {
                        lex.bump_unchecked(3usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto2703_at2_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([134u8..=143u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto2718_at1_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2710,
                    J2689,
                    J2665,
                    J2703,
                    J2666,
                    J2664,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2666,
                        J2689,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2664,
                        J2689,
                        __,
                        __,
                        __,
                        __,
                        J2703,
                        __,
                        J2689,
                        __,
                        __,
                        J2710,
                        __,
                        __,
                        J2689,
                        J2665,
                        __,
                        __,
                        J2710,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto2662_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J2710 => goto2710_at2_ctx2662_x(lex),
                    Jump::J2689 => goto2689_at2_ctx2662_x(lex),
                    Jump::J2665 => goto2665_at2_ctx2662_x(lex),
                    Jump::J2703 => goto2703_at2_ctx2662_x(lex),
                    Jump::J2666 => goto2666_at2_ctx2662_x(lex),
                    Jump::J2664 => goto2664_at2_ctx2662_x(lex),
                    Jump::__ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto2665_at1_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(2usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto2732_at1_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(1usize) {
                    Some([188u8, 144u8..=153u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto2666_at1_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(2usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto2670_at2_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto2693_at1_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2670,
                    J2689,
                    J2664,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2670,
                        __,
                        J2670,
                        __,
                        J2670,
                        __,
                        J2670,
                        __,
                        J2670,
                        __,
                        J2670,
                        __,
                        J2670,
                        __,
                        J2670,
                        __,
                        J2670,
                        __,
                        J2670,
                        __,
                        J2689,
                        __,
                        J2689,
                        J2664,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto2662_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J2670 => goto2670_at2_ctx2662_x(lex),
                    Jump::J2689 => goto2689_at2_ctx2662_x(lex),
                    Jump::J2664 => goto2664_at2_ctx2662_x(lex),
                    Jump::__ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto2664_at1_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(2usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2662_x(lex),
                }
            }
            #[inline]
            fn goto2663_ctx2662_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2731,
                    J2829,
                    J2663,
                    J2718,
                    J2665,
                    J2732,
                    J2666,
                    J2693,
                    J2664,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2663,
                        J2663,
                        J2663,
                        J2663,
                        J2663,
                        J2663,
                        J2663,
                        J2663,
                        J2663,
                        J2663,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2663,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2664,
                        __,
                        J2665,
                        __,
                        __,
                        __,
                        J2666,
                        J2693,
                        J2718,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2731,
                        __,
                        __,
                        __,
                        __,
                        J2732,
                        J2829,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto2662_ctx2662_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J2731 => goto2731_at1_ctx2662_x(lex),
                    Jump::J2829 => goto2829_at1_ctx2662_x(lex),
                    Jump::J2663 => {
                        lex.bump_unchecked(1usize);
                        goto2663_ctx2662_x(lex)
                    }
                    Jump::J2718 => goto2718_at1_ctx2662_x(lex),
                    Jump::J2665 => goto2665_at1_ctx2662_x(lex),
                    Jump::J2732 => goto2732_at1_ctx2662_x(lex),
                    Jump::J2666 => goto2666_at1_ctx2662_x(lex),
                    Jump::J2693 => goto2693_at1_ctx2662_x(lex),
                    Jump::J2664 => goto2664_at1_ctx2662_x(lex),
                    Jump::__ => goto2662_ctx2662_x(lex),
                }
            }
            #[inline]
            fn goto2689_at3_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => lex.error(),
                }
            }
            #[inline]
            fn goto2665_at3_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => lex.error(),
                }
            }
            #[inline]
            fn goto2727_at3_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return lex.error(),
                };
                match byte {
                    byte if pattern1(byte) => {
                        lex.bump_unchecked(4usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => lex.error(),
                }
            }
            #[inline]
            fn goto2666_at3_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => lex.error(),
                }
            }
            #[inline]
            fn goto2664_at3_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => lex.error(),
                }
            }
            #[inline]
            fn goto2731_at2_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2689,
                    J2665,
                    J2727,
                    J2666,
                    J2664,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2664,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2689,
                        J2666,
                        __,
                        __,
                        J2727,
                        __,
                        J2689,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2665,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return lex.error(),
                };
                match LUT[byte as usize] {
                    Jump::J2689 => goto2689_at3_x(lex),
                    Jump::J2665 => goto2665_at3_x(lex),
                    Jump::J2727 => goto2727_at3_x(lex),
                    Jump::J2666 => goto2666_at3_x(lex),
                    Jump::J2664 => goto2664_at3_x(lex),
                    Jump::__ => lex.error(),
                }
            }
            #[inline]
            fn goto2666_at4_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(5usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => lex.error(),
                }
            }
            #[inline]
            fn goto2689_at4_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(5usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => lex.error(),
                }
            }
            #[inline]
            fn goto2664_at4_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(5usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => lex.error(),
                }
            }
            #[inline]
            fn goto2811_at3_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2666,
                    J2689,
                    J2664,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2664,
                        __,
                        J2666,
                        __,
                        J2689,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return lex.error(),
                };
                match LUT[byte as usize] {
                    Jump::J2666 => goto2666_at4_x(lex),
                    Jump::J2689 => goto2689_at4_x(lex),
                    Jump::J2664 => goto2664_at4_x(lex),
                    Jump::__ => lex.error(),
                }
            }
            #[inline]
            fn goto2814_at3_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(3usize) {
                    Some([159u8, 142u8..=191u8]) => {
                        lex.bump_unchecked(5usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => lex.error(),
                }
            }
            #[inline]
            fn goto2670_at4_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(5usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => lex.error(),
                }
            }
            #[inline]
            fn goto2665_at4_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(5usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => lex.error(),
                }
            }
            #[inline]
            fn goto2750_at4_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([182u8..=191u8]) => {
                        lex.bump_unchecked(5usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => lex.error(),
                }
            }
            #[inline]
            fn goto2801_at3_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2670,
                    J2665,
                    J2750,
                    J2689,
                    J2666,
                    J2664,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2670,
                        __,
                        J2665,
                        J2750,
                        __,
                        __,
                        J2689,
                        __,
                        __,
                        __,
                        J2665,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2689,
                        __,
                        J2689,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2689,
                        __,
                        J2666,
                        J2665,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2664,
                        __,
                        J2689,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2689,
                        __,
                        __,
                        __,
                        J2689,
                        J2664,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2689,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return lex.error(),
                };
                match LUT[byte as usize] {
                    Jump::J2670 => goto2670_at4_x(lex),
                    Jump::J2665 => goto2665_at4_x(lex),
                    Jump::J2750 => goto2750_at4_x(lex),
                    Jump::J2689 => goto2689_at4_x(lex),
                    Jump::J2666 => goto2666_at4_x(lex),
                    Jump::J2664 => goto2664_at4_x(lex),
                    Jump::__ => lex.error(),
                }
            }
            #[inline]
            fn goto2827_at3_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2666,
                    J2665,
                    J2689,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2666,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2665,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2665,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2689,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return lex.error(),
                };
                match LUT[byte as usize] {
                    Jump::J2666 => goto2666_at4_x(lex),
                    Jump::J2665 => goto2665_at4_x(lex),
                    Jump::J2689 => goto2689_at4_x(lex),
                    Jump::__ => lex.error(),
                }
            }
            #[inline]
            fn goto2738_at3_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return lex.error(),
                };
                match byte {
                    180u8 => goto2665_at4_x(lex),
                    146u8 => goto2664_at4_x(lex),
                    _ => lex.error(),
                }
            }
            #[inline]
            fn goto2730_at3_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(3usize) {
                    Some([175u8, 176u8..=185u8]) => {
                        lex.bump_unchecked(5usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => lex.error(),
                }
            }
            #[inline]
            fn goto2829_at2_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2811,
                    J2814,
                    J2801,
                    J2827,
                    J2738,
                    J2730,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2738,
                        J2801,
                        __,
                        __,
                        __,
                        __,
                        J2811,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2814,
                        J2827,
                        J2730,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return lex.error(),
                };
                match LUT[byte as usize] {
                    Jump::J2811 => goto2811_at3_x(lex),
                    Jump::J2814 => goto2814_at3_x(lex),
                    Jump::J2801 => goto2801_at3_x(lex),
                    Jump::J2827 => goto2827_at3_x(lex),
                    Jump::J2738 => goto2738_at3_x(lex),
                    Jump::J2730 => goto2730_at3_x(lex),
                    Jump::__ => lex.error(),
                }
            }
            #[inline]
            fn goto2710_at3_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return lex.error(),
                };
                match byte {
                    byte if pattern0(byte) => {
                        lex.bump_unchecked(4usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => lex.error(),
                }
            }
            #[inline]
            fn goto2703_at3_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([134u8..=143u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => lex.error(),
                }
            }
            #[inline]
            fn goto2718_at2_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2710,
                    J2689,
                    J2665,
                    J2703,
                    J2666,
                    J2664,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2666,
                        J2689,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2664,
                        J2689,
                        __,
                        __,
                        __,
                        __,
                        J2703,
                        __,
                        J2689,
                        __,
                        __,
                        J2710,
                        __,
                        __,
                        J2689,
                        J2665,
                        __,
                        __,
                        J2710,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return lex.error(),
                };
                match LUT[byte as usize] {
                    Jump::J2710 => goto2710_at3_x(lex),
                    Jump::J2689 => goto2689_at3_x(lex),
                    Jump::J2665 => goto2665_at3_x(lex),
                    Jump::J2703 => goto2703_at3_x(lex),
                    Jump::J2666 => goto2666_at3_x(lex),
                    Jump::J2664 => goto2664_at3_x(lex),
                    Jump::__ => lex.error(),
                }
            }
            #[inline]
            fn goto2665_at2_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => lex.error(),
                }
            }
            #[inline]
            fn goto2732_at2_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(2usize) {
                    Some([188u8, 144u8..=153u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => lex.error(),
                }
            }
            #[inline]
            fn goto2666_at2_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => lex.error(),
                }
            }
            #[inline]
            fn goto2670_at3_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => lex.error(),
                }
            }
            #[inline]
            fn goto2693_at2_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2670,
                    J2689,
                    J2664,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2670,
                        __,
                        J2670,
                        __,
                        J2670,
                        __,
                        J2670,
                        __,
                        J2670,
                        __,
                        J2670,
                        __,
                        J2670,
                        __,
                        J2670,
                        __,
                        J2670,
                        __,
                        J2670,
                        __,
                        J2689,
                        __,
                        J2689,
                        J2664,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return lex.error(),
                };
                match LUT[byte as usize] {
                    Jump::J2670 => goto2670_at3_x(lex),
                    Jump::J2689 => goto2689_at3_x(lex),
                    Jump::J2664 => goto2664_at3_x(lex),
                    Jump::__ => lex.error(),
                }
            }
            #[inline]
            fn goto2664_at2_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => lex.error(),
                }
            }
            #[inline]
            fn goto2832_at1_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2731,
                    J2829,
                    J2663,
                    J2718,
                    J2665,
                    J2732,
                    J2666,
                    J2693,
                    J2664,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2663,
                        J2663,
                        J2663,
                        J2663,
                        J2663,
                        J2663,
                        J2663,
                        J2663,
                        J2663,
                        J2663,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2663,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2664,
                        __,
                        J2665,
                        __,
                        __,
                        __,
                        J2666,
                        J2693,
                        J2718,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2731,
                        __,
                        __,
                        __,
                        __,
                        J2732,
                        J2829,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return lex.error(),
                };
                match LUT[byte as usize] {
                    Jump::J2731 => goto2731_at2_x(lex),
                    Jump::J2829 => goto2829_at2_x(lex),
                    Jump::J2663 => {
                        lex.bump_unchecked(2usize);
                        goto2663_ctx2662_x(lex)
                    }
                    Jump::J2718 => goto2718_at2_x(lex),
                    Jump::J2665 => goto2665_at2_x(lex),
                    Jump::J2732 => goto2732_at2_x(lex),
                    Jump::J2666 => goto2666_at2_x(lex),
                    Jump::J2693 => goto2693_at2_x(lex),
                    Jump::J2664 => goto2664_at2_x(lex),
                    Jump::__ => lex.error(),
                }
            }
            #[inline]
            fn goto2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 1usize]>() {
                    Some(b".") => goto2832_at1_x(lex),
                    _ => lex.error(),
                }
            }
            #[inline]
            fn goto2689_at3_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2665_at3_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2727_at3_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return goto2833_x(lex),
                };
                match byte {
                    byte if pattern1(byte) => {
                        lex.bump_unchecked(4usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2666_at3_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2664_at3_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2731_at2_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2689,
                    J2665,
                    J2727,
                    J2666,
                    J2664,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2664,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2689,
                        J2666,
                        __,
                        __,
                        J2727,
                        __,
                        J2689,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2665,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto2833_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J2689 => goto2689_at3_ctx2833_x(lex),
                    Jump::J2665 => goto2665_at3_ctx2833_x(lex),
                    Jump::J2727 => goto2727_at3_ctx2833_x(lex),
                    Jump::J2666 => goto2666_at3_ctx2833_x(lex),
                    Jump::J2664 => goto2664_at3_ctx2833_x(lex),
                    Jump::__ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2666_at4_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(5usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2689_at4_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(5usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2664_at4_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(5usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2811_at3_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2666,
                    J2689,
                    J2664,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2664,
                        __,
                        J2666,
                        __,
                        J2689,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return goto2833_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J2666 => goto2666_at4_ctx2833_x(lex),
                    Jump::J2689 => goto2689_at4_ctx2833_x(lex),
                    Jump::J2664 => goto2664_at4_ctx2833_x(lex),
                    Jump::__ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2814_at3_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(3usize) {
                    Some([159u8, 142u8..=191u8]) => {
                        lex.bump_unchecked(5usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2670_at4_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(5usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2665_at4_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(5usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2750_at4_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([182u8..=191u8]) => {
                        lex.bump_unchecked(5usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2801_at3_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2670,
                    J2665,
                    J2750,
                    J2689,
                    J2666,
                    J2664,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2670,
                        __,
                        J2665,
                        J2750,
                        __,
                        __,
                        J2689,
                        __,
                        __,
                        __,
                        J2665,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2689,
                        __,
                        J2689,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2689,
                        __,
                        J2666,
                        J2665,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2664,
                        __,
                        J2689,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2689,
                        __,
                        __,
                        __,
                        J2689,
                        J2664,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2689,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return goto2833_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J2670 => goto2670_at4_ctx2833_x(lex),
                    Jump::J2665 => goto2665_at4_ctx2833_x(lex),
                    Jump::J2750 => goto2750_at4_ctx2833_x(lex),
                    Jump::J2689 => goto2689_at4_ctx2833_x(lex),
                    Jump::J2666 => goto2666_at4_ctx2833_x(lex),
                    Jump::J2664 => goto2664_at4_ctx2833_x(lex),
                    Jump::__ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2827_at3_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2666,
                    J2665,
                    J2689,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2666,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2665,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2665,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2689,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return goto2833_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J2666 => goto2666_at4_ctx2833_x(lex),
                    Jump::J2665 => goto2665_at4_ctx2833_x(lex),
                    Jump::J2689 => goto2689_at4_ctx2833_x(lex),
                    Jump::__ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2738_at3_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return goto2833_x(lex),
                };
                match byte {
                    180u8 => goto2665_at4_ctx2833_x(lex),
                    146u8 => goto2664_at4_ctx2833_x(lex),
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2730_at3_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(3usize) {
                    Some([175u8, 176u8..=185u8]) => {
                        lex.bump_unchecked(5usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2829_at2_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2811,
                    J2814,
                    J2801,
                    J2827,
                    J2738,
                    J2730,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2738,
                        J2801,
                        __,
                        __,
                        __,
                        __,
                        J2811,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2814,
                        J2827,
                        J2730,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto2833_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J2811 => goto2811_at3_ctx2833_x(lex),
                    Jump::J2814 => goto2814_at3_ctx2833_x(lex),
                    Jump::J2801 => goto2801_at3_ctx2833_x(lex),
                    Jump::J2827 => goto2827_at3_ctx2833_x(lex),
                    Jump::J2738 => goto2738_at3_ctx2833_x(lex),
                    Jump::J2730 => goto2730_at3_ctx2833_x(lex),
                    Jump::__ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2710_at3_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return goto2833_x(lex),
                };
                match byte {
                    byte if pattern0(byte) => {
                        lex.bump_unchecked(4usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2703_at3_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([134u8..=143u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2718_at2_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2710,
                    J2689,
                    J2665,
                    J2703,
                    J2666,
                    J2664,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2666,
                        J2689,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2664,
                        J2689,
                        __,
                        __,
                        __,
                        __,
                        J2703,
                        __,
                        J2689,
                        __,
                        __,
                        J2710,
                        __,
                        __,
                        J2689,
                        J2665,
                        __,
                        __,
                        J2710,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto2833_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J2710 => goto2710_at3_ctx2833_x(lex),
                    Jump::J2689 => goto2689_at3_ctx2833_x(lex),
                    Jump::J2665 => goto2665_at3_ctx2833_x(lex),
                    Jump::J2703 => goto2703_at3_ctx2833_x(lex),
                    Jump::J2666 => goto2666_at3_ctx2833_x(lex),
                    Jump::J2664 => goto2664_at3_ctx2833_x(lex),
                    Jump::__ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2665_at2_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2732_at2_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(2usize) {
                    Some([188u8, 144u8..=153u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2666_at2_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2670_at3_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2693_at2_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2670,
                    J2689,
                    J2664,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2670,
                        __,
                        J2670,
                        __,
                        J2670,
                        __,
                        J2670,
                        __,
                        J2670,
                        __,
                        J2670,
                        __,
                        J2670,
                        __,
                        J2670,
                        __,
                        J2670,
                        __,
                        J2670,
                        __,
                        J2689,
                        __,
                        J2689,
                        J2664,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto2833_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J2670 => goto2670_at3_ctx2833_x(lex),
                    Jump::J2689 => goto2689_at3_ctx2833_x(lex),
                    Jump::J2664 => goto2664_at3_ctx2833_x(lex),
                    Jump::__ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2664_at2_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2663_ctx2662_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2832_at1_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2731,
                    J2829,
                    J2663,
                    J2718,
                    J2665,
                    J2732,
                    J2666,
                    J2693,
                    J2664,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2663,
                        J2663,
                        J2663,
                        J2663,
                        J2663,
                        J2663,
                        J2663,
                        J2663,
                        J2663,
                        J2663,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2663,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2664,
                        __,
                        J2665,
                        __,
                        __,
                        __,
                        J2666,
                        J2693,
                        J2718,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2731,
                        __,
                        __,
                        __,
                        __,
                        J2732,
                        J2829,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto2833_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J2731 => goto2731_at2_ctx2833_x(lex),
                    Jump::J2829 => goto2829_at2_ctx2833_x(lex),
                    Jump::J2663 => {
                        lex.bump_unchecked(2usize);
                        goto2663_ctx2662_x(lex)
                    }
                    Jump::J2718 => goto2718_at2_ctx2833_x(lex),
                    Jump::J2665 => goto2665_at2_ctx2833_x(lex),
                    Jump::J2732 => goto2732_at2_ctx2833_x(lex),
                    Jump::J2666 => goto2666_at2_ctx2833_x(lex),
                    Jump::J2693 => goto2693_at2_ctx2833_x(lex),
                    Jump::J2664 => goto2664_at2_ctx2833_x(lex),
                    Jump::__ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2833_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 1usize]>() {
                    Some(b".") => goto2832_at1_ctx2833_x(lex),
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2835_at1_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(2usize);
                        goto2834_ctx2833_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2836_at3_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2834_ctx2833_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2860_at3_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2834_ctx2833_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2837_at3_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2834_ctx2833_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2835_at3_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2834_ctx2833_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2841_at3_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2834_ctx2833_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2921_at3_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([182u8..=191u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2834_ctx2833_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2972_at2_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2836,
                    J2860,
                    J2837,
                    J2835,
                    J2841,
                    J2921,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2841,
                        __,
                        J2836,
                        J2921,
                        __,
                        __,
                        J2860,
                        __,
                        __,
                        __,
                        J2836,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2860,
                        __,
                        J2860,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2860,
                        __,
                        J2837,
                        J2836,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2835,
                        __,
                        J2860,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2860,
                        __,
                        __,
                        __,
                        J2860,
                        J2835,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2860,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto2833_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J2836 => goto2836_at3_ctx2833_x(lex),
                    Jump::J2860 => goto2860_at3_ctx2833_x(lex),
                    Jump::J2837 => goto2837_at3_ctx2833_x(lex),
                    Jump::J2835 => goto2835_at3_ctx2833_x(lex),
                    Jump::J2841 => goto2841_at3_ctx2833_x(lex),
                    Jump::J2921 => goto2921_at3_ctx2833_x(lex),
                    Jump::__ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2909_at2_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto2833_x(lex),
                };
                match byte {
                    180u8 => goto2836_at3_ctx2833_x(lex),
                    146u8 => goto2835_at3_ctx2833_x(lex),
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2901_at2_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(2usize) {
                    Some([175u8, 176u8..=185u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2834_ctx2833_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2985_at2_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(2usize) {
                    Some([159u8, 142u8..=191u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2834_ctx2833_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2982_at2_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2860,
                    J2837,
                    J2835,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2835,
                        __,
                        J2837,
                        __,
                        J2860,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto2833_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J2860 => goto2860_at3_ctx2833_x(lex),
                    Jump::J2837 => goto2837_at3_ctx2833_x(lex),
                    Jump::J2835 => goto2835_at3_ctx2833_x(lex),
                    Jump::__ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2998_at2_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2836,
                    J2837,
                    J2860,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2837,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2836,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2836,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2860,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto2833_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J2836 => goto2836_at3_ctx2833_x(lex),
                    Jump::J2837 => goto2837_at3_ctx2833_x(lex),
                    Jump::J2860 => goto2860_at3_ctx2833_x(lex),
                    Jump::__ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto3000_at1_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2972,
                    J2909,
                    J2901,
                    J2985,
                    J2982,
                    J2998,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2909,
                        J2972,
                        __,
                        __,
                        __,
                        __,
                        J2982,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2985,
                        J2998,
                        J2901,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto2833_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J2972 => goto2972_at2_ctx2833_x(lex),
                    Jump::J2909 => goto2909_at2_ctx2833_x(lex),
                    Jump::J2901 => goto2901_at2_ctx2833_x(lex),
                    Jump::J2985 => goto2985_at2_ctx2833_x(lex),
                    Jump::J2982 => goto2982_at2_ctx2833_x(lex),
                    Jump::J2998 => goto2998_at2_ctx2833_x(lex),
                    Jump::__ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2860_at2_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2834_ctx2833_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2837_at2_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2834_ctx2833_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2874_at2_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([134u8..=143u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2834_ctx2833_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2835_at2_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2834_ctx2833_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2836_at2_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2834_ctx2833_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2881_at2_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto2833_x(lex),
                };
                match byte {
                    byte if pattern0(byte) => {
                        lex.bump_unchecked(3usize);
                        goto2834_ctx2833_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2889_at1_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2860,
                    J2837,
                    J2874,
                    J2835,
                    J2836,
                    J2881,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2837,
                        J2860,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2835,
                        J2860,
                        __,
                        __,
                        __,
                        __,
                        J2874,
                        __,
                        J2860,
                        __,
                        __,
                        J2881,
                        __,
                        __,
                        J2860,
                        J2836,
                        __,
                        __,
                        J2881,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto2833_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J2860 => goto2860_at2_ctx2833_x(lex),
                    Jump::J2837 => goto2837_at2_ctx2833_x(lex),
                    Jump::J2874 => goto2874_at2_ctx2833_x(lex),
                    Jump::J2835 => goto2835_at2_ctx2833_x(lex),
                    Jump::J2836 => goto2836_at2_ctx2833_x(lex),
                    Jump::J2881 => goto2881_at2_ctx2833_x(lex),
                    Jump::__ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2898_at2_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto2833_x(lex),
                };
                match byte {
                    byte if pattern1(byte) => {
                        lex.bump_unchecked(3usize);
                        goto2834_ctx2833_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2902_at1_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2860,
                    J2837,
                    J2898,
                    J2835,
                    J2836,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2835,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2860,
                        J2837,
                        __,
                        __,
                        J2898,
                        __,
                        J2860,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2836,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto2833_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J2860 => goto2860_at2_ctx2833_x(lex),
                    Jump::J2837 => goto2837_at2_ctx2833_x(lex),
                    Jump::J2898 => goto2898_at2_ctx2833_x(lex),
                    Jump::J2835 => goto2835_at2_ctx2833_x(lex),
                    Jump::J2836 => goto2836_at2_ctx2833_x(lex),
                    Jump::__ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2836_at1_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(2usize);
                        goto2834_ctx2833_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2837_at1_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(2usize);
                        goto2834_ctx2833_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2841_at2_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2834_ctx2833_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2864_at1_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2860,
                    J2841,
                    J2835,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2841,
                        __,
                        J2841,
                        __,
                        J2841,
                        __,
                        J2841,
                        __,
                        J2841,
                        __,
                        J2841,
                        __,
                        J2841,
                        __,
                        J2841,
                        __,
                        J2841,
                        __,
                        J2841,
                        __,
                        J2860,
                        __,
                        J2860,
                        J2835,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto2833_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J2860 => goto2860_at2_ctx2833_x(lex),
                    Jump::J2841 => goto2841_at2_ctx2833_x(lex),
                    Jump::J2835 => goto2835_at2_ctx2833_x(lex),
                    Jump::__ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2903_at1_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(1usize) {
                    Some([188u8, 144u8..=153u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2834_ctx2833_x(lex)
                    }
                    _ => goto2833_x(lex),
                }
            }
            #[inline]
            fn goto2834_ctx2833_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2835,
                    J3000,
                    J2889,
                    J2902,
                    J2836,
                    J2837,
                    J2834,
                    J2864,
                    J2903,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2834,
                        J2834,
                        J2834,
                        J2834,
                        J2834,
                        J2834,
                        J2834,
                        J2834,
                        J2834,
                        J2834,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2834,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2835,
                        __,
                        J2836,
                        __,
                        __,
                        __,
                        J2837,
                        J2864,
                        J2889,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2902,
                        __,
                        __,
                        __,
                        __,
                        J2903,
                        J3000,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto2833_ctx2833_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J2835 => goto2835_at1_ctx2833_x(lex),
                    Jump::J3000 => goto3000_at1_ctx2833_x(lex),
                    Jump::J2889 => goto2889_at1_ctx2833_x(lex),
                    Jump::J2902 => goto2902_at1_ctx2833_x(lex),
                    Jump::J2836 => goto2836_at1_ctx2833_x(lex),
                    Jump::J2837 => goto2837_at1_ctx2833_x(lex),
                    Jump::J2834 => {
                        lex.bump_unchecked(1usize);
                        goto2834_ctx2833_x(lex)
                    }
                    Jump::J2864 => goto2864_at1_ctx2833_x(lex),
                    Jump::J2903 => goto2903_at1_ctx2833_x(lex),
                    Jump::__ => goto2833_ctx2833_x(lex),
                }
            }
            #[inline]
            fn goto3175_at2<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match byte {
                    b'.' => goto3173_at3(lex),
                    b'1'..=b'9' => {
                        lex.bump_unchecked(3usize);
                        goto2834_ctx2833_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3179_at1<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([190u8..=191u8]) => goto3175_at2(lex),
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto16_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Comma));
            }
            #[inline]
            fn goto124_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralIdent));
            }
            #[inline]
            fn goto93_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Contains));
            }
            #[inline]
            fn goto4560_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto93_ctx125_x(lex),
                };
                match byte {
                    byte if pattern4(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    _ => goto93_ctx125_x(lex),
                }
            }
            #[inline]
            fn goto4559_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 3usize]>() {
                    Some(b"ins") => {
                        lex.bump_unchecked(3usize);
                        goto4560_ctx125_x(lex)
                    }
                    _ => goto125_ctx124_x(lex),
                }
            }
            #[inline]
            fn pattern7(byte: u8) -> bool {
                COMPACT_TABLE_0[byte as usize] & 8 > 0
            }
            #[inline]
            fn pattern8(byte: u8) -> bool {
                COMPACT_TABLE_0[byte as usize] & 16 > 0
            }
            #[inline]
            fn goto79_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Continue));
            }
            #[inline]
            fn goto4545_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto79_ctx125_x(lex),
                };
                match byte {
                    byte if pattern4(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    _ => goto79_ctx125_x(lex),
                }
            }
            #[inline]
            fn goto4565_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto124_ctx125_x(lex),
                };
                match byte {
                    byte if pattern6(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    b'e' => {
                        lex.bump_unchecked(1usize);
                        goto4545_ctx125_x(lex)
                    }
                    _ => goto124_ctx125_x(lex),
                }
            }
            #[inline]
            fn goto4563_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto124_ctx125_x(lex),
                };
                match byte {
                    byte if pattern8(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    b'u' => {
                        lex.bump_unchecked(1usize);
                        goto4565_ctx125_x(lex)
                    }
                    _ => goto124_ctx125_x(lex),
                }
            }
            #[inline]
            fn goto4561_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto124_ctx125_x(lex),
                };
                match byte {
                    byte if pattern7(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    b'n' => {
                        lex.bump_unchecked(1usize);
                        goto4563_ctx125_x(lex)
                    }
                    _ => goto124_ctx125_x(lex),
                }
            }
            #[inline]
            fn goto4556_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J125,
                    J4559,
                    J4561,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        __,
                        __,
                        __,
                        __,
                        J125,
                        __,
                        J4559,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J4561,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto124_ctx125_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J125 => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    Jump::J4559 => {
                        lex.bump_unchecked(1usize);
                        goto4559_ctx125_x(lex)
                    }
                    Jump::J4561 => {
                        lex.bump_unchecked(1usize);
                        goto4561_ctx125_x(lex)
                    }
                    Jump::__ => goto124_ctx125_x(lex),
                }
            }
            #[inline]
            fn goto4553_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 3usize]>() {
                    Some(b"ont") => {
                        lex.bump_unchecked(3usize);
                        goto4556_ctx125_x(lex)
                    }
                    _ => goto125_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto69_ctx69_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Gt));
            }
            #[inline]
            fn goto58_ctx69_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::SR));
            }
            #[inline]
            fn goto34_ctx69_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::AssignSR));
            }
            #[inline]
            fn goto4474_ctx69_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 1usize]>() {
                    Some(b"=") => {
                        lex.bump_unchecked(1usize);
                        goto34_ctx69_x(lex)
                    }
                    _ => goto58_ctx69_x(lex),
                }
            }
            #[inline]
            fn goto67_ctx69_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Ge));
            }
            #[inline]
            fn goto4496_ctx69_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto69_ctx69_x(lex),
                };
                match byte {
                    b'>' => {
                        lex.bump_unchecked(1usize);
                        goto4474_ctx69_x(lex)
                    }
                    b'=' => {
                        lex.bump_unchecked(1usize);
                        goto67_ctx69_x(lex)
                    }
                    _ => goto69_ctx69_x(lex),
                }
            }
            #[inline]
            fn goto17_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Dot));
            }
            #[inline]
            fn goto21_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Range));
            }
            #[inline]
            fn goto17_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Dot));
            }
            #[inline]
            fn goto4337_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(2usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4341_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match byte {
                    166u8..=175u8 => {
                        lex.bump_unchecked(3usize);
                        goto4335_ctx3214_x(lex)
                    }
                    byte if pattern2(byte) => {
                        lex.bump_unchecked(3usize);
                        goto2110_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4340_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4343_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match byte {
                    166u8..=175u8 => {
                        lex.bump_unchecked(3usize);
                        goto4335_ctx3214_x(lex)
                    }
                    185u8 => {
                        lex.bump_unchecked(3usize);
                        goto2110_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4342_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match byte {
                    166u8..=175u8 => {
                        lex.bump_unchecked(3usize);
                        goto4335_ctx3214_x(lex)
                    }
                    177u8 => {
                        lex.bump_unchecked(3usize);
                        goto2110_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4344_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4336_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4339_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4341,
                    J4340,
                    J4343,
                    J4342,
                    J2129,
                    J4344,
                    J4336,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4340,
                        __,
                        J4341,
                        __,
                        J4340,
                        __,
                        J4342,
                        __,
                        J4340,
                        __,
                        J4343,
                        __,
                        J4340,
                        __,
                        J4340,
                        __,
                        J4340,
                        __,
                        J4340,
                        J2129,
                        J4344,
                        __,
                        J4344,
                        J4336,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4341 => goto4341_at2_ctx3214_x(lex),
                    Jump::J4340 => goto4340_at2_ctx3214_x(lex),
                    Jump::J4343 => goto4343_at2_ctx3214_x(lex),
                    Jump::J4342 => goto4342_at2_ctx3214_x(lex),
                    Jump::J2129 => goto2129_at2_ctx3214_x(lex),
                    Jump::J4344 => goto4344_at2_ctx3214_x(lex),
                    Jump::J4336 => goto4336_at2_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4349_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match byte {
                    byte if pattern0(byte) => {
                        lex.bump_unchecked(3usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4348_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([134u8..=143u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4337_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4347_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match byte {
                    160u8..=169u8 => {
                        lex.bump_unchecked(3usize);
                        goto4335_ctx3214_x(lex)
                    }
                    155u8 => {
                        lex.bump_unchecked(3usize);
                        goto2110_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4346_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4345_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4349,
                    J4348,
                    J4337,
                    J4344,
                    J4347,
                    J4346,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4346,
                        J4344,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4347,
                        J4344,
                        __,
                        __,
                        __,
                        __,
                        J4348,
                        __,
                        J4344,
                        __,
                        __,
                        J4349,
                        __,
                        __,
                        J4344,
                        J4337,
                        __,
                        __,
                        J4349,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4349 => goto4349_at2_ctx3214_x(lex),
                    Jump::J4348 => goto4348_at2_ctx3214_x(lex),
                    Jump::J4337 => goto4337_at2_ctx3214_x(lex),
                    Jump::J4344 => goto4344_at2_ctx3214_x(lex),
                    Jump::J4347 => goto4347_at2_ctx3214_x(lex),
                    Jump::J4346 => goto4346_at2_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4336_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(2usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4338_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match byte {
                    128u8..=137u8 => {
                        lex.bump_unchecked(2usize);
                        goto4335_ctx3214_x(lex)
                    }
                    190u8..=191u8 => {
                        lex.bump_unchecked(2usize);
                        goto2110_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4351_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match byte {
                    byte if pattern1(byte) => {
                        lex.bump_unchecked(3usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4350_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4346,
                    J4351,
                    J4337,
                    J4336,
                    J4275,
                    J4344,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4336,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4275,
                        __,
                        __,
                        J4344,
                        J4346,
                        __,
                        __,
                        J4351,
                        __,
                        J4344,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4337,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4346 => goto4346_at2_ctx3214_x(lex),
                    Jump::J4351 => goto4351_at2_ctx3214_x(lex),
                    Jump::J4337 => goto4337_at2_ctx3214_x(lex),
                    Jump::J4336 => goto4336_at2_ctx3214_x(lex),
                    Jump::J4275 => goto4275_at2_ctx3214_x(lex),
                    Jump::J4344 => goto4344_at2_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4353_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match byte {
                    144u8..=153u8 => {
                        lex.bump_unchecked(3usize);
                        goto4335_ctx3214_x(lex)
                    }
                    132u8 => {
                        lex.bump_unchecked(3usize);
                        goto2110_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4352_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2137,
                    J2136,
                    J2147,
                    J4353,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2136,
                        __,
                        J2137,
                        __,
                        __,
                        J4353,
                        __,
                        __,
                        J2147,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J2137 => goto2137_at2_ctx3214_x(lex),
                    Jump::J2136 => goto2136_at2_ctx3214_x(lex),
                    Jump::J2147 => goto2147_at2_ctx3214_x(lex),
                    Jump::J4353 => goto4353_at2_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4336_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4344_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4346_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4358_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4336,
                    J4344,
                    J4346,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4336,
                        __,
                        J4346,
                        __,
                        J4344,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4336 => goto4336_at3_ctx3214_x(lex),
                    Jump::J4344 => goto4344_at3_ctx3214_x(lex),
                    Jump::J4346 => goto4346_at3_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4337_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4355_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match byte {
                    180u8 => goto4337_at3_ctx3214_x(lex),
                    146u8 => goto4336_at3_ctx3214_x(lex),
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4360_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4337,
                    J4344,
                    J4346,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4346,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4337,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4337,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4344,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4337 => goto4337_at3_ctx3214_x(lex),
                    Jump::J4344 => goto4344_at3_ctx3214_x(lex),
                    Jump::J4346 => goto4346_at3_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4359_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(2usize) {
                    Some([159u8, 142u8..=191u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4340_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4357_at3_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([182u8..=191u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4356_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4340,
                    J4357,
                    J4337,
                    J4344,
                    J4336,
                    J4346,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4340,
                        __,
                        J4337,
                        J4357,
                        __,
                        __,
                        J4344,
                        __,
                        __,
                        __,
                        J4337,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4344,
                        __,
                        J4344,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4344,
                        __,
                        J4346,
                        J4337,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4336,
                        __,
                        J4344,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4344,
                        __,
                        __,
                        __,
                        J4344,
                        J4336,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4344,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4340 => goto4340_at3_ctx3214_x(lex),
                    Jump::J4357 => goto4357_at3_ctx3214_x(lex),
                    Jump::J4337 => goto4337_at3_ctx3214_x(lex),
                    Jump::J4344 => goto4344_at3_ctx3214_x(lex),
                    Jump::J4336 => goto4336_at3_ctx3214_x(lex),
                    Jump::J4346 => goto4346_at3_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4361_at2_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(2usize) {
                    Some([175u8, 176u8..=185u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4354_at1_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4358,
                    J4355,
                    J4360,
                    J4359,
                    J4356,
                    J4361,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4355,
                        J4356,
                        __,
                        __,
                        __,
                        __,
                        J4358,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4359,
                        J4360,
                        J4361,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4358 => goto4358_at2_ctx3214_x(lex),
                    Jump::J4355 => goto4355_at2_ctx3214_x(lex),
                    Jump::J4360 => goto4360_at2_ctx3214_x(lex),
                    Jump::J4359 => goto4359_at2_ctx3214_x(lex),
                    Jump::J4356 => goto4356_at2_ctx3214_x(lex),
                    Jump::J4361 => goto4361_at2_ctx3214_x(lex),
                    Jump::__ => goto3214_x(lex),
                }
            }
            #[inline]
            fn goto4335_ctx3214_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J2111,
                    J2110,
                    J4337,
                    J4339,
                    J3383,
                    J2113,
                    J4345,
                    J2131,
                    J1595,
                    J4336,
                    J4338,
                    J4335,
                    J4350,
                    J4352,
                    J2112,
                    J4354,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2110,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4335,
                        J4335,
                        J4335,
                        J4335,
                        J4335,
                        J4335,
                        J4335,
                        J4335,
                        J4335,
                        J4335,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J1595,
                        J3383,
                        J1595,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4335,
                        __,
                        __,
                        __,
                        __,
                        J1595,
                        J3383,
                        J1595,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2111,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2112,
                        __,
                        J2113,
                        J4336,
                        __,
                        J4337,
                        __,
                        __,
                        __,
                        J4338,
                        J4339,
                        J4345,
                        J2131,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4350,
                        __,
                        __,
                        __,
                        __,
                        J4352,
                        J4354,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto3214_ctx3214_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J2111 => goto2111_at1_ctx3214_x(lex),
                    Jump::J2110 => {
                        lex.bump_unchecked(1usize);
                        goto2110_ctx3214_x(lex)
                    }
                    Jump::J4337 => goto4337_at1_ctx3214_x(lex),
                    Jump::J4339 => goto4339_at1_ctx3214_x(lex),
                    Jump::J3383 => goto3383_at1_ctx3214_x(lex),
                    Jump::J2113 => goto2113_at1_ctx3214_x(lex),
                    Jump::J4345 => goto4345_at1_ctx3214_x(lex),
                    Jump::J2131 => goto2131_at1_ctx3214_x(lex),
                    Jump::J1595 => {
                        lex.bump_unchecked(1usize);
                        goto1595_ctx3214_x(lex)
                    }
                    Jump::J4336 => goto4336_at1_ctx3214_x(lex),
                    Jump::J4338 => goto4338_at1_ctx3214_x(lex),
                    Jump::J4335 => {
                        lex.bump_unchecked(1usize);
                        goto4335_ctx3214_x(lex)
                    }
                    Jump::J4350 => goto4350_at1_ctx3214_x(lex),
                    Jump::J4352 => goto4352_at1_ctx3214_x(lex),
                    Jump::J2112 => goto2112_at1_ctx3214_x(lex),
                    Jump::J4354 => goto4354_at1_ctx3214_x(lex),
                    Jump::__ => goto3214_ctx3214_x(lex),
                }
            }
            #[inline]
            fn goto4365_at1_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(1usize) {
                    Some([188u8, 144u8..=153u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto17_x(lex),
                }
            }
            #[inline]
            fn goto4337_at1_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(2usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto17_x(lex),
                }
            }
            #[inline]
            fn goto4336_at1_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(2usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto17_x(lex),
                }
            }
            #[inline]
            fn goto4340_at2_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto17_x(lex),
                }
            }
            #[inline]
            fn goto4344_at2_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto17_x(lex),
                }
            }
            #[inline]
            fn goto4336_at2_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto17_x(lex),
                }
            }
            #[inline]
            fn goto4362_at1_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4340,
                    J4344,
                    J4336,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4340,
                        __,
                        J4340,
                        __,
                        J4340,
                        __,
                        J4340,
                        __,
                        J4340,
                        __,
                        J4340,
                        __,
                        J4340,
                        __,
                        J4340,
                        __,
                        J4340,
                        __,
                        J4340,
                        __,
                        J4344,
                        __,
                        J4344,
                        J4336,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto17_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4340 => goto4340_at2_ctx17_x(lex),
                    Jump::J4344 => goto4344_at2_ctx17_x(lex),
                    Jump::J4336 => goto4336_at2_ctx17_x(lex),
                    Jump::__ => goto17_x(lex),
                }
            }
            #[inline]
            fn goto4349_at2_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto17_x(lex),
                };
                match byte {
                    byte if pattern0(byte) => {
                        lex.bump_unchecked(3usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto17_x(lex),
                }
            }
            #[inline]
            fn goto4348_at2_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([134u8..=143u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto17_x(lex),
                }
            }
            #[inline]
            fn goto4337_at2_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto17_x(lex),
                }
            }
            #[inline]
            fn goto4346_at2_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto17_x(lex),
                }
            }
            #[inline]
            fn goto4363_at1_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4349,
                    J4348,
                    J4337,
                    J4344,
                    J4336,
                    J4346,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4346,
                        J4344,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4336,
                        J4344,
                        __,
                        __,
                        __,
                        __,
                        J4348,
                        __,
                        J4344,
                        __,
                        __,
                        J4349,
                        __,
                        __,
                        J4344,
                        J4337,
                        __,
                        __,
                        J4349,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto17_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4349 => goto4349_at2_ctx17_x(lex),
                    Jump::J4348 => goto4348_at2_ctx17_x(lex),
                    Jump::J4337 => goto4337_at2_ctx17_x(lex),
                    Jump::J4344 => goto4344_at2_ctx17_x(lex),
                    Jump::J4336 => goto4336_at2_ctx17_x(lex),
                    Jump::J4346 => goto4346_at2_ctx17_x(lex),
                    Jump::__ => goto17_x(lex),
                }
            }
            #[inline]
            fn goto4336_at3_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto17_x(lex),
                }
            }
            #[inline]
            fn goto4344_at3_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto17_x(lex),
                }
            }
            #[inline]
            fn goto4346_at3_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto17_x(lex),
                }
            }
            #[inline]
            fn goto4358_at2_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4336,
                    J4344,
                    J4346,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4336,
                        __,
                        J4346,
                        __,
                        J4344,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto17_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4336 => goto4336_at3_ctx17_x(lex),
                    Jump::J4344 => goto4344_at3_ctx17_x(lex),
                    Jump::J4346 => goto4346_at3_ctx17_x(lex),
                    Jump::__ => goto17_x(lex),
                }
            }
            #[inline]
            fn goto4337_at3_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto17_x(lex),
                }
            }
            #[inline]
            fn goto4355_at2_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto17_x(lex),
                };
                match byte {
                    180u8 => goto4337_at3_ctx17_x(lex),
                    146u8 => goto4336_at3_ctx17_x(lex),
                    _ => goto17_x(lex),
                }
            }
            #[inline]
            fn goto4360_at2_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4337,
                    J4344,
                    J4346,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4346,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4337,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4337,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4344,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto17_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4337 => goto4337_at3_ctx17_x(lex),
                    Jump::J4344 => goto4344_at3_ctx17_x(lex),
                    Jump::J4346 => goto4346_at3_ctx17_x(lex),
                    Jump::__ => goto17_x(lex),
                }
            }
            #[inline]
            fn goto4359_at2_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(2usize) {
                    Some([159u8, 142u8..=191u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto17_x(lex),
                }
            }
            #[inline]
            fn goto4340_at3_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto17_x(lex),
                }
            }
            #[inline]
            fn goto4357_at3_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([182u8..=191u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto17_x(lex),
                }
            }
            #[inline]
            fn goto4356_at2_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4340,
                    J4357,
                    J4337,
                    J4344,
                    J4336,
                    J4346,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4340,
                        __,
                        J4337,
                        J4357,
                        __,
                        __,
                        J4344,
                        __,
                        __,
                        __,
                        J4337,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4344,
                        __,
                        J4344,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4344,
                        __,
                        J4346,
                        J4337,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4336,
                        __,
                        J4344,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4344,
                        __,
                        __,
                        __,
                        J4344,
                        J4336,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4344,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto17_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4340 => goto4340_at3_ctx17_x(lex),
                    Jump::J4357 => goto4357_at3_ctx17_x(lex),
                    Jump::J4337 => goto4337_at3_ctx17_x(lex),
                    Jump::J4344 => goto4344_at3_ctx17_x(lex),
                    Jump::J4336 => goto4336_at3_ctx17_x(lex),
                    Jump::J4346 => goto4346_at3_ctx17_x(lex),
                    Jump::__ => goto17_x(lex),
                }
            }
            #[inline]
            fn goto4361_at2_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(2usize) {
                    Some([175u8, 176u8..=185u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto17_x(lex),
                }
            }
            #[inline]
            fn goto4354_at1_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4358,
                    J4355,
                    J4360,
                    J4359,
                    J4356,
                    J4361,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4355,
                        J4356,
                        __,
                        __,
                        __,
                        __,
                        J4358,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4359,
                        J4360,
                        J4361,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto17_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4358 => goto4358_at2_ctx17_x(lex),
                    Jump::J4355 => goto4355_at2_ctx17_x(lex),
                    Jump::J4360 => goto4360_at2_ctx17_x(lex),
                    Jump::J4359 => goto4359_at2_ctx17_x(lex),
                    Jump::J4356 => goto4356_at2_ctx17_x(lex),
                    Jump::J4361 => goto4361_at2_ctx17_x(lex),
                    Jump::__ => goto17_x(lex),
                }
            }
            #[inline]
            fn goto4351_at2_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto17_x(lex),
                };
                match byte {
                    byte if pattern1(byte) => {
                        lex.bump_unchecked(3usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto17_x(lex),
                }
            }
            #[inline]
            fn goto4364_at1_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4351,
                    J4337,
                    J4336,
                    J4344,
                    J4346,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4336,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4344,
                        J4346,
                        __,
                        __,
                        J4351,
                        __,
                        J4344,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4337,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto17_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4351 => goto4351_at2_ctx17_x(lex),
                    Jump::J4337 => goto4337_at2_ctx17_x(lex),
                    Jump::J4336 => goto4336_at2_ctx17_x(lex),
                    Jump::J4344 => goto4344_at2_ctx17_x(lex),
                    Jump::J4346 => goto4346_at2_ctx17_x(lex),
                    Jump::__ => goto17_x(lex),
                }
            }
            #[inline]
            fn goto4346_at1_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(2usize);
                        goto4335_ctx3214_x(lex)
                    }
                    _ => goto17_x(lex),
                }
            }
            #[inline]
            fn goto4434_ctx17_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J21,
                    J4365,
                    J4337,
                    J4336,
                    J4362,
                    J4363,
                    J4335,
                    J4354,
                    J4364,
                    J4346,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J21,
                        __,
                        J4335,
                        J4335,
                        J4335,
                        J4335,
                        J4335,
                        J4335,
                        J4335,
                        J4335,
                        J4335,
                        J4335,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4335,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4336,
                        __,
                        J4337,
                        __,
                        __,
                        __,
                        J4346,
                        J4362,
                        J4363,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4364,
                        __,
                        __,
                        __,
                        __,
                        J4365,
                        J4354,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto17_ctx17_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J21 => {
                        lex.bump_unchecked(1usize);
                        goto21_ctx17_x(lex)
                    }
                    Jump::J4365 => goto4365_at1_ctx17_x(lex),
                    Jump::J4337 => goto4337_at1_ctx17_x(lex),
                    Jump::J4336 => goto4336_at1_ctx17_x(lex),
                    Jump::J4362 => goto4362_at1_ctx17_x(lex),
                    Jump::J4363 => goto4363_at1_ctx17_x(lex),
                    Jump::J4335 => {
                        lex.bump_unchecked(1usize);
                        goto4335_ctx3214_x(lex)
                    }
                    Jump::J4354 => goto4354_at1_ctx17_x(lex),
                    Jump::J4364 => goto4364_at1_ctx17_x(lex),
                    Jump::J4346 => goto4346_at1_ctx17_x(lex),
                    Jump::__ => goto17_ctx17_x(lex),
                }
            }
            #[inline]
            fn goto94_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Matches));
            }
            #[inline]
            fn goto4568_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto94_ctx125_x(lex),
                };
                match byte {
                    byte if pattern4(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    _ => goto94_ctx125_x(lex),
                }
            }
            #[inline]
            fn goto4567_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 6usize]>() {
                    Some(b"atches") => {
                        lex.bump_unchecked(6usize);
                        goto4568_ctx125_x(lex)
                    }
                    _ => goto125_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto11_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::RParen));
            }
            #[inline]
            fn goto3005_at3<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(4usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3030_at4<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(5usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3011_at4<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(5usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3034_at3<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3005,
                    J3030,
                    J3011,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3030,
                        __,
                        J3030,
                        J3005,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3005 => goto3005_at4(lex),
                    Jump::J3030 => goto3030_at4(lex),
                    Jump::J3011 => goto3011_at4(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto3044_at4<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(4usize) {
                    Some([134u8..=143u8]) => {
                        lex.bump_unchecked(5usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3051_at4<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(4usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match byte {
                    byte if pattern0(byte) => {
                        lex.bump_unchecked(5usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3059_at3<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3044,
                    J3005,
                    J3006,
                    J3051,
                    J3030,
                    J3007,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3007,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3005,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        J3044,
                        __,
                        J3030,
                        __,
                        __,
                        J3051,
                        __,
                        __,
                        J3030,
                        J3006,
                        __,
                        __,
                        J3051,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3044 => goto3044_at4(lex),
                    Jump::J3005 => goto3005_at4(lex),
                    Jump::J3006 => goto3006_at4(lex),
                    Jump::J3051 => goto3051_at4(lex),
                    Jump::J3030 => goto3030_at4(lex),
                    Jump::J3007 => goto3007_at4(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto3068_at4<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(4usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match byte {
                    byte if pattern1(byte) => {
                        lex.bump_unchecked(5usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3072_at3<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3068,
                    J3005,
                    J3006,
                    J3030,
                    J3007,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3005,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3030,
                        J3007,
                        __,
                        __,
                        J3068,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3006,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3068 => goto3068_at4(lex),
                    Jump::J3005 => goto3005_at4(lex),
                    Jump::J3006 => goto3006_at4(lex),
                    Jump::J3030 => goto3030_at4(lex),
                    Jump::J3007 => goto3007_at4(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto3073_at3<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(3usize) {
                    Some([188u8, 144u8..=153u8]) => {
                        lex.bump_unchecked(5usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3071_at4<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(4usize) {
                    Some([175u8, 176u8..=185u8]) => {
                        lex.bump_unchecked(6usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3152_at4<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3005,
                    J3030,
                    J3007,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3005,
                        __,
                        J3007,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(4usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3005 => goto3005_at5(lex),
                    Jump::J3030 => goto3030_at5(lex),
                    Jump::J3007 => goto3007_at5(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto3155_at4<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(4usize) {
                    Some([159u8, 142u8..=191u8]) => {
                        lex.bump_unchecked(6usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3168_at4<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3030,
                    J3006,
                    J3007,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3007,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3006,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3006,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(4usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3030 => goto3030_at5(lex),
                    Jump::J3006 => goto3006_at5(lex),
                    Jump::J3007 => goto3007_at5(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto3079_at4<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(4usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match byte {
                    146u8 => goto3005_at5(lex),
                    180u8 => goto3006_at5(lex),
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3091_at5<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(5usize) {
                    Some([182u8..=191u8]) => {
                        lex.bump_unchecked(6usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3142_at4<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3007,
                    J3005,
                    J3091,
                    J3011,
                    J3006,
                    J3030,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3011,
                        __,
                        J3006,
                        J3091,
                        __,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        J3006,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3030,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3030,
                        __,
                        J3007,
                        J3006,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3005,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        J3030,
                        J3005,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(4usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3007 => goto3007_at5(lex),
                    Jump::J3005 => goto3005_at5(lex),
                    Jump::J3091 => goto3091_at5(lex),
                    Jump::J3011 => goto3011_at5(lex),
                    Jump::J3006 => goto3006_at5(lex),
                    Jump::J3030 => goto3030_at5(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto3170_at3<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3071,
                    J3152,
                    J3155,
                    J3168,
                    J3079,
                    J3142,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3079,
                        J3142,
                        __,
                        __,
                        __,
                        __,
                        J3152,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3155,
                        J3168,
                        J3071,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3071 => goto3071_at4(lex),
                    Jump::J3152 => goto3152_at4(lex),
                    Jump::J3155 => goto3155_at4(lex),
                    Jump::J3168 => goto3168_at4(lex),
                    Jump::J3079 => goto3079_at4(lex),
                    Jump::J3142 => goto3142_at4(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto3007_at3<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(4usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3006_at3<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(4usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3173_at2<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3004,
                    J3005,
                    J3034,
                    J3059,
                    J3072,
                    J3073,
                    J3170,
                    J3007,
                    J3006,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3004,
                        J3004,
                        J3004,
                        J3004,
                        J3004,
                        J3004,
                        J3004,
                        J3004,
                        J3004,
                        J3004,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3004,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3005,
                        __,
                        J3006,
                        __,
                        __,
                        __,
                        J3007,
                        J3034,
                        J3059,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3072,
                        __,
                        __,
                        __,
                        __,
                        J3073,
                        J3170,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3004 => {
                        lex.bump_unchecked(3usize);
                        goto3004_ctx2662_x(lex)
                    }
                    Jump::J3005 => goto3005_at3(lex),
                    Jump::J3034 => goto3034_at3(lex),
                    Jump::J3059 => goto3059_at3(lex),
                    Jump::J3072 => goto3072_at3(lex),
                    Jump::J3073 => goto3073_at3(lex),
                    Jump::J3170 => goto3170_at3(lex),
                    Jump::J3007 => goto3007_at3(lex),
                    Jump::J3006 => goto3006_at3(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto3175_at1<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match byte {
                    b'.' => goto3173_at2(lex),
                    b'1'..=b'9' => {
                        lex.bump_unchecked(2usize);
                        goto2834_ctx2833_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto55_ctx55_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::BitwiseAnd));
            }
            #[inline]
            fn goto60_ctx55_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LogicalAnd));
            }
            #[inline]
            fn goto31_ctx55_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::AssignAnd));
            }
            #[inline]
            fn goto4478_ctx55_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto55_ctx55_x(lex),
                };
                match byte {
                    b'&' => {
                        lex.bump_unchecked(1usize);
                        goto60_ctx55_x(lex)
                    }
                    b'=' => {
                        lex.bump_unchecked(1usize);
                        goto31_ctx55_x(lex)
                    }
                    _ => goto55_ctx55_x(lex),
                }
            }
            #[inline]
            fn goto54_ctx54_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::BitwiseOr));
            }
            #[inline]
            fn goto59_ctx54_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LogicalOr));
            }
            #[inline]
            fn goto30_ctx54_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::AssignOr));
            }
            #[inline]
            fn goto4476_ctx54_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto54_ctx54_x(lex),
                };
                match byte {
                    b'|' => {
                        lex.bump_unchecked(1usize);
                        goto59_ctx54_x(lex)
                    }
                    b'=' => {
                        lex.bump_unchecked(1usize);
                        goto30_ctx54_x(lex)
                    }
                    _ => goto54_ctx54_x(lex),
                }
            }
            #[inline]
            fn goto53_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::BitwiseNot));
            }
            #[inline]
            fn goto3034_at5<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3005,
                    J3030,
                    J3011,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3011,
                        __,
                        J3030,
                        __,
                        J3030,
                        J3005,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(5usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3005 => goto3005_at6(lex),
                    Jump::J3030 => goto3030_at6(lex),
                    Jump::J3011 => goto3011_at6(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto3044_at6<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(6usize) {
                    Some([134u8..=143u8]) => {
                        lex.bump_unchecked(7usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3051_at6<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(6usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match byte {
                    byte if pattern0(byte) => {
                        lex.bump_unchecked(7usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3059_at5<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3044,
                    J3005,
                    J3006,
                    J3051,
                    J3030,
                    J3007,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3007,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3005,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        J3044,
                        __,
                        J3030,
                        __,
                        __,
                        J3051,
                        __,
                        __,
                        J3030,
                        J3006,
                        __,
                        __,
                        J3051,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(5usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3044 => goto3044_at6(lex),
                    Jump::J3005 => goto3005_at6(lex),
                    Jump::J3006 => goto3006_at6(lex),
                    Jump::J3051 => goto3051_at6(lex),
                    Jump::J3030 => goto3030_at6(lex),
                    Jump::J3007 => goto3007_at6(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto3068_at6<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(6usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match byte {
                    byte if pattern1(byte) => {
                        lex.bump_unchecked(7usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3072_at5<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3068,
                    J3005,
                    J3006,
                    J3030,
                    J3007,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3005,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3030,
                        J3007,
                        __,
                        __,
                        J3068,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3006,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(5usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3068 => goto3068_at6(lex),
                    Jump::J3005 => goto3005_at6(lex),
                    Jump::J3006 => goto3006_at6(lex),
                    Jump::J3030 => goto3030_at6(lex),
                    Jump::J3007 => goto3007_at6(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto3073_at5<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(5usize) {
                    Some([188u8, 144u8..=153u8]) => {
                        lex.bump_unchecked(7usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3071_at6<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(6usize) {
                    Some([175u8, 176u8..=185u8]) => {
                        lex.bump_unchecked(8usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3005_at7<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(7usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(8usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3030_at7<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(7usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(8usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3007_at7<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(7usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(8usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3152_at6<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3005,
                    J3030,
                    J3007,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3005,
                        __,
                        J3007,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(6usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3005 => goto3005_at7(lex),
                    Jump::J3030 => goto3030_at7(lex),
                    Jump::J3007 => goto3007_at7(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto3155_at6<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(6usize) {
                    Some([159u8, 142u8..=191u8]) => {
                        lex.bump_unchecked(8usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3006_at7<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(7usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(8usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3168_at6<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3030,
                    J3006,
                    J3007,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3007,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3006,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3006,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(6usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3030 => goto3030_at7(lex),
                    Jump::J3006 => goto3006_at7(lex),
                    Jump::J3007 => goto3007_at7(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto3079_at6<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(6usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match byte {
                    146u8 => goto3005_at7(lex),
                    180u8 => goto3006_at7(lex),
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3091_at7<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(7usize) {
                    Some([182u8..=191u8]) => {
                        lex.bump_unchecked(8usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3011_at7<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(7usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(8usize);
                        goto3004_ctx2662_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3142_at6<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3007,
                    J3005,
                    J3091,
                    J3011,
                    J3006,
                    J3030,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3011,
                        __,
                        J3006,
                        J3091,
                        __,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        J3006,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3030,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3030,
                        __,
                        J3007,
                        J3006,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3005,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        J3030,
                        J3005,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(6usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3007 => goto3007_at7(lex),
                    Jump::J3005 => goto3005_at7(lex),
                    Jump::J3091 => goto3091_at7(lex),
                    Jump::J3011 => goto3011_at7(lex),
                    Jump::J3006 => goto3006_at7(lex),
                    Jump::J3030 => goto3030_at7(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto3170_at5<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3071,
                    J3152,
                    J3155,
                    J3168,
                    J3079,
                    J3142,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3079,
                        J3142,
                        __,
                        __,
                        __,
                        __,
                        J3152,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3155,
                        J3168,
                        J3071,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(5usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3071 => goto3071_at6(lex),
                    Jump::J3152 => goto3152_at6(lex),
                    Jump::J3155 => goto3155_at6(lex),
                    Jump::J3168 => goto3168_at6(lex),
                    Jump::J3079 => goto3079_at6(lex),
                    Jump::J3142 => goto3142_at6(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto3173_at4<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3004,
                    J3005,
                    J3034,
                    J3059,
                    J3072,
                    J3073,
                    J3170,
                    J3007,
                    J3006,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3004,
                        J3004,
                        J3004,
                        J3004,
                        J3004,
                        J3004,
                        J3004,
                        J3004,
                        J3004,
                        J3004,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3004,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3005,
                        __,
                        J3006,
                        __,
                        __,
                        __,
                        J3007,
                        J3034,
                        J3059,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3072,
                        __,
                        __,
                        __,
                        __,
                        J3073,
                        J3170,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(4usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3004 => {
                        lex.bump_unchecked(5usize);
                        goto3004_ctx2662_x(lex)
                    }
                    Jump::J3005 => goto3005_at5(lex),
                    Jump::J3034 => goto3034_at5(lex),
                    Jump::J3059 => goto3059_at5(lex),
                    Jump::J3072 => goto3072_at5(lex),
                    Jump::J3073 => goto3073_at5(lex),
                    Jump::J3170 => goto3170_at5(lex),
                    Jump::J3007 => goto3007_at5(lex),
                    Jump::J3006 => goto3006_at5(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto3175_at3<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(3usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match byte {
                    b'.' => goto3173_at4(lex),
                    b'1'..=b'9' => {
                        lex.bump_unchecked(4usize);
                        goto2834_ctx2833_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3195_at1<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(1usize) {
                    Some(&[159u8, 155u8]) => goto3175_at3(lex),
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto19_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Question));
            }
            #[inline]
            fn goto1_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                lex.trivia();
                Rule::lex(lex);
            }
            #[inline]
            fn pattern9(byte: u8) -> bool {
                const LUT: u64 = 4294980096u64;
                match 1u64.checked_shl(byte as u32) {
                    Some(shift) => LUT & shift != 0,
                    None => false,
                }
            }
            #[inline]
            fn goto2_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                while let Some(arr) = lex.read::<&[u8; 16]>() {
                    if pattern9(arr[0]) {
                        if pattern9(arr[1]) {
                            if pattern9(arr[2]) {
                                if pattern9(arr[3]) {
                                    if pattern9(arr[4]) {
                                        if pattern9(arr[5]) {
                                            if pattern9(arr[6]) {
                                                if pattern9(arr[7]) {
                                                    if pattern9(arr[8]) {
                                                        if pattern9(arr[9]) {
                                                            if pattern9(arr[10]) {
                                                                if pattern9(arr[11]) {
                                                                    if pattern9(arr[12]) {
                                                                        if pattern9(arr[13]) {
                                                                            if pattern9(arr[14]) {
                                                                                if pattern9(arr[15]) {
                                                                                    lex.bump_unchecked(16);
                                                                                    continue;
                                                                                }
                                                                                lex.bump_unchecked(15);
                                                                                return goto1_ctx1_x(lex);
                                                                            }
                                                                            lex.bump_unchecked(14);
                                                                            return goto1_ctx1_x(lex);
                                                                        }
                                                                        lex.bump_unchecked(13);
                                                                        return goto1_ctx1_x(lex);
                                                                    }
                                                                    lex.bump_unchecked(12);
                                                                    return goto1_ctx1_x(lex);
                                                                }
                                                                lex.bump_unchecked(11);
                                                                return goto1_ctx1_x(lex);
                                                            }
                                                            lex.bump_unchecked(10);
                                                            return goto1_ctx1_x(lex);
                                                        }
                                                        lex.bump_unchecked(9);
                                                        return goto1_ctx1_x(lex);
                                                    }
                                                    lex.bump_unchecked(8);
                                                    return goto1_ctx1_x(lex);
                                                }
                                                lex.bump_unchecked(7);
                                                return goto1_ctx1_x(lex);
                                            }
                                            lex.bump_unchecked(6);
                                            return goto1_ctx1_x(lex);
                                        }
                                        lex.bump_unchecked(5);
                                        return goto1_ctx1_x(lex);
                                    }
                                    lex.bump_unchecked(4);
                                    return goto1_ctx1_x(lex);
                                }
                                lex.bump_unchecked(3);
                                return goto1_ctx1_x(lex);
                            }
                            lex.bump_unchecked(2);
                            return goto1_ctx1_x(lex);
                        }
                        lex.bump_unchecked(1);
                        return goto1_ctx1_x(lex);
                    }
                    return goto1_ctx1_x(lex);
                }
                while lex.test(pattern9) {
                    lex.bump_unchecked(1);
                }
                goto1_ctx1_x(lex);
            }
            #[inline]
            fn goto3201_at2<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some(&[188u8]) => goto3175_at3(lex),
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3202_at2<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some(&[169u8]) => goto3175_at3(lex),
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3205_at2<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some(&[132u8]) => goto3175_at3(lex),
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3212_at2<'s>(lex: &mut Lexer<'s>) {
                let arr = match lex.read_at::<&[u8; 2usize]>(2usize) {
                    Some(arr) => arr,
                    None => return _error(lex),
                };
                match arr[0] {
                    byte if pattern3(byte) => goto3175_at3(lex),
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3210_at1<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3201,
                    J3202,
                    J3205,
                    J3212,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3201,
                        __,
                        J3202,
                        __,
                        __,
                        J3205,
                        __,
                        __,
                        J3212,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let arr = match lex.read_at::<&[u8; 3usize]>(1usize) {
                    Some(arr) => arr,
                    None => return _error(lex),
                };
                match LUT[arr[0] as usize] {
                    Jump::J3201 => goto3201_at2(lex),
                    Jump::J3202 => goto3202_at2(lex),
                    Jump::J3205 => goto3205_at2(lex),
                    Jump::J3212 => goto3212_at2(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto10_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LParen));
            }
            #[inline]
            fn goto51_ctx51_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Div));
            }
            #[inline]
            fn goto35_ctx35_x<'s>(lex: &mut Lexer<'s>) {
                #[inline]
                fn callback<'s>(_: &mut Lexer<'s>) -> impl CallbackResult<'s, (), Rule> {
                    Skip
                }
                callback(lex).construct(|()| Rule::LineComment, lex);
            }
            #[inline]
            fn pattern10(byte: u8) -> bool {
                match byte {
                    0u8..=9u8 | 11u8..=255u8 => true,
                    _ => false,
                }
            }
            #[inline]
            fn goto36_ctx35_x<'s>(lex: &mut Lexer<'s>) {
                while let Some(arr) = lex.read::<&[u8; 16]>() {
                    if pattern10(arr[0]) {
                        if pattern10(arr[1]) {
                            if pattern10(arr[2]) {
                                if pattern10(arr[3]) {
                                    if pattern10(arr[4]) {
                                        if pattern10(arr[5]) {
                                            if pattern10(arr[6]) {
                                                if pattern10(arr[7]) {
                                                    if pattern10(arr[8]) {
                                                        if pattern10(arr[9]) {
                                                            if pattern10(arr[10]) {
                                                                if pattern10(arr[11]) {
                                                                    if pattern10(arr[12]) {
                                                                        if pattern10(arr[13]) {
                                                                            if pattern10(arr[14]) {
                                                                                if pattern10(arr[15]) {
                                                                                    lex.bump_unchecked(16);
                                                                                    continue;
                                                                                }
                                                                                lex.bump_unchecked(15);
                                                                                return goto35_ctx35_x(lex);
                                                                            }
                                                                            lex.bump_unchecked(14);
                                                                            return goto35_ctx35_x(lex);
                                                                        }
                                                                        lex.bump_unchecked(13);
                                                                        return goto35_ctx35_x(lex);
                                                                    }
                                                                    lex.bump_unchecked(12);
                                                                    return goto35_ctx35_x(lex);
                                                                }
                                                                lex.bump_unchecked(11);
                                                                return goto35_ctx35_x(lex);
                                                            }
                                                            lex.bump_unchecked(10);
                                                            return goto35_ctx35_x(lex);
                                                        }
                                                        lex.bump_unchecked(9);
                                                        return goto35_ctx35_x(lex);
                                                    }
                                                    lex.bump_unchecked(8);
                                                    return goto35_ctx35_x(lex);
                                                }
                                                lex.bump_unchecked(7);
                                                return goto35_ctx35_x(lex);
                                            }
                                            lex.bump_unchecked(6);
                                            return goto35_ctx35_x(lex);
                                        }
                                        lex.bump_unchecked(5);
                                        return goto35_ctx35_x(lex);
                                    }
                                    lex.bump_unchecked(4);
                                    return goto35_ctx35_x(lex);
                                }
                                lex.bump_unchecked(3);
                                return goto35_ctx35_x(lex);
                            }
                            lex.bump_unchecked(2);
                            return goto35_ctx35_x(lex);
                        }
                        lex.bump_unchecked(1);
                        return goto35_ctx35_x(lex);
                    }
                    return goto35_ctx35_x(lex);
                }
                while lex.test(pattern10) {
                    lex.bump_unchecked(1);
                }
                goto35_ctx35_x(lex);
            }
            #[inline]
            fn goto51_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Div));
            }
            #[inline]
            fn goto3898_ctx3898_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralString));
            }
            #[inline]
            fn pattern11(byte: u8) -> bool {
                match byte {
                    b'A'..=b'Z' | b'a'..=b'z' => true,
                    _ => false,
                }
            }
            #[inline]
            fn goto3899_ctx3898_x<'s>(lex: &mut Lexer<'s>) {
                while let Some(arr) = lex.read::<&[u8; 16]>() {
                    if pattern11(arr[0]) {
                        if pattern11(arr[1]) {
                            if pattern11(arr[2]) {
                                if pattern11(arr[3]) {
                                    if pattern11(arr[4]) {
                                        if pattern11(arr[5]) {
                                            if pattern11(arr[6]) {
                                                if pattern11(arr[7]) {
                                                    if pattern11(arr[8]) {
                                                        if pattern11(arr[9]) {
                                                            if pattern11(arr[10]) {
                                                                if pattern11(arr[11]) {
                                                                    if pattern11(arr[12]) {
                                                                        if pattern11(arr[13]) {
                                                                            if pattern11(arr[14]) {
                                                                                if pattern11(arr[15]) {
                                                                                    lex.bump_unchecked(16);
                                                                                    continue;
                                                                                }
                                                                                lex.bump_unchecked(15);
                                                                                return goto3898_ctx3898_x(lex);
                                                                            }
                                                                            lex.bump_unchecked(14);
                                                                            return goto3898_ctx3898_x(lex);
                                                                        }
                                                                        lex.bump_unchecked(13);
                                                                        return goto3898_ctx3898_x(lex);
                                                                    }
                                                                    lex.bump_unchecked(12);
                                                                    return goto3898_ctx3898_x(lex);
                                                                }
                                                                lex.bump_unchecked(11);
                                                                return goto3898_ctx3898_x(lex);
                                                            }
                                                            lex.bump_unchecked(10);
                                                            return goto3898_ctx3898_x(lex);
                                                        }
                                                        lex.bump_unchecked(9);
                                                        return goto3898_ctx3898_x(lex);
                                                    }
                                                    lex.bump_unchecked(8);
                                                    return goto3898_ctx3898_x(lex);
                                                }
                                                lex.bump_unchecked(7);
                                                return goto3898_ctx3898_x(lex);
                                            }
                                            lex.bump_unchecked(6);
                                            return goto3898_ctx3898_x(lex);
                                        }
                                        lex.bump_unchecked(5);
                                        return goto3898_ctx3898_x(lex);
                                    }
                                    lex.bump_unchecked(4);
                                    return goto3898_ctx3898_x(lex);
                                }
                                lex.bump_unchecked(3);
                                return goto3898_ctx3898_x(lex);
                            }
                            lex.bump_unchecked(2);
                            return goto3898_ctx3898_x(lex);
                        }
                        lex.bump_unchecked(1);
                        return goto3898_ctx3898_x(lex);
                    }
                    return goto3898_ctx3898_x(lex);
                }
                while lex.test(pattern11) {
                    lex.bump_unchecked(1);
                }
                goto3898_ctx3898_x(lex);
            }
            #[inline]
            fn goto3900_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 1usize]>() {
                    Some(b"/") => {
                        lex.bump_unchecked(1usize);
                        goto3899_ctx3898_x(lex)
                    }
                    _ => lex.error(),
                }
            }
            #[inline]
            fn goto3900_ctx3900_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 1usize]>() {
                    Some(b"/") => {
                        lex.bump_unchecked(1usize);
                        goto3899_ctx3898_x(lex)
                    }
                    _ => goto3900_x(lex),
                }
            }
            #[inline]
            fn pattern12(byte: u8) -> bool {
                COMPACT_TABLE_0[byte as usize] & 32 > 0
            }
            #[inline]
            fn goto3902_at1_ctx3900_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto3900_x(lex),
                };
                match byte {
                    byte if pattern10(byte) => {
                        lex.bump_unchecked(2usize);
                        goto3901_ctx3900_x(lex)
                    }
                    _ => goto3900_x(lex),
                }
            }
            #[inline]
            fn goto3901_ctx3900_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto3900_ctx3900_x(lex),
                };
                match byte {
                    byte if pattern12(byte) => {
                        lex.bump_unchecked(1usize);
                        goto3901_ctx3900_x(lex)
                    }
                    b'\\' => goto3902_at1_ctx3900_x(lex),
                    _ => goto3900_ctx3900_x(lex),
                }
            }
            #[inline]
            fn goto3902_at1_ctx51_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto51_x(lex),
                };
                match byte {
                    byte if pattern10(byte) => {
                        lex.bump_unchecked(2usize);
                        goto3901_ctx3900_x(lex)
                    }
                    _ => goto51_x(lex),
                }
            }
            #[inline]
            fn goto38_x<'s>(lex: &mut Lexer<'s>) {
                #[inline]
                fn callback<'s>(
                    lex: &mut Lexer<'s>,
                ) -> impl CallbackResult<'s, (), Rule> {
                    let mut count = 0;
                    for c in lex.slice().chars() {
                        if c == '\n' {
                            count += 1;
                        }
                    }
                    lex.extras += count;
                    Skip
                }
                callback(lex).construct(|()| Rule::BlockComment, lex);
            }
            #[inline]
            fn goto39_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 2usize]>() {
                    Some(b"*/") => {
                        lex.bump_unchecked(2usize);
                        goto38_x(lex)
                    }
                    _ => lex.error(),
                }
            }
            #[inline]
            fn goto38_ctx39_x<'s>(lex: &mut Lexer<'s>) {
                #[inline]
                fn callback<'s>(
                    lex: &mut Lexer<'s>,
                ) -> impl CallbackResult<'s, (), Rule> {
                    let mut count = 0;
                    for c in lex.slice().chars() {
                        if c == '\n' {
                            count += 1;
                        }
                    }
                    lex.extras += count;
                    Skip
                }
                callback(lex).construct(|()| Rule::BlockComment, lex);
            }
            #[inline]
            fn goto39_ctx39_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 2usize]>() {
                    Some(b"*/") => {
                        lex.bump_unchecked(2usize);
                        goto38_ctx39_x(lex)
                    }
                    _ => goto39_x(lex),
                }
            }
            #[inline]
            fn pattern13(byte: u8) -> bool {
                match byte {
                    0u8..=b')' | b'+'..=255u8 => true,
                    _ => false,
                }
            }
            #[inline]
            fn pattern14(byte: u8) -> bool {
                match byte {
                    0u8..=b'.' | b'0'..=255u8 => true,
                    _ => false,
                }
            }
            #[inline]
            fn goto42_at1_ctx39_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto39_x(lex),
                };
                match byte {
                    byte if pattern14(byte) => {
                        lex.bump_unchecked(2usize);
                        goto40_ctx39_x(lex)
                    }
                    _ => goto39_x(lex),
                }
            }
            #[inline]
            fn goto40_ctx39_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto39_ctx39_x(lex),
                };
                match byte {
                    byte if pattern13(byte) => {
                        lex.bump_unchecked(1usize);
                        goto40_ctx39_x(lex)
                    }
                    b'*' => goto42_at1_ctx39_x(lex),
                    _ => goto39_ctx39_x(lex),
                }
            }
            #[inline]
            fn goto4425_at1_ctx51_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4426,
                    J40,
                    J4421,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J40,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4426,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto51_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4426 => {
                        lex.bump_unchecked(2usize);
                        goto4426_ctx51_x(lex)
                    }
                    Jump::J40 => {
                        lex.bump_unchecked(2usize);
                        goto40_ctx39_x(lex)
                    }
                    Jump::J4421 => {
                        lex.bump_unchecked(2usize);
                        goto4421_ctx51_x(lex)
                    }
                    Jump::__ => goto51_x(lex),
                }
            }
            #[inline]
            fn goto38_ctx51_x<'s>(lex: &mut Lexer<'s>) {
                #[inline]
                fn callback<'s>(
                    lex: &mut Lexer<'s>,
                ) -> impl CallbackResult<'s, (), Rule> {
                    let mut count = 0;
                    for c in lex.slice().chars() {
                        if c == '\n' {
                            count += 1;
                        }
                    }
                    lex.extras += count;
                    Skip
                }
                callback(lex).construct(|()| Rule::BlockComment, lex);
            }
            #[inline]
            fn goto4427_ctx51_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto38_ctx51_x(lex),
                };
                match byte {
                    byte if pattern11(byte) => {
                        lex.bump_unchecked(1usize);
                        goto3899_ctx3898_x(lex)
                    }
                    _ => goto38_ctx51_x(lex),
                }
            }
            #[inline]
            fn goto4426_ctx51_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4425,
                    J4427,
                    J4421,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4427,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4425,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto51_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4425 => goto4425_at1_ctx51_x(lex),
                    Jump::J4427 => {
                        lex.bump_unchecked(1usize);
                        goto4427_ctx51_x(lex)
                    }
                    Jump::J4421 => {
                        lex.bump_unchecked(1usize);
                        goto4421_ctx51_x(lex)
                    }
                    Jump::__ => goto51_x(lex),
                }
            }
            #[inline]
            fn goto3898_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralString));
            }
            #[inline]
            fn goto38_ctx3898_x<'s>(lex: &mut Lexer<'s>) {
                #[inline]
                fn callback<'s>(
                    lex: &mut Lexer<'s>,
                ) -> impl CallbackResult<'s, (), Rule> {
                    let mut count = 0;
                    for c in lex.slice().chars() {
                        if c == '\n' {
                            count += 1;
                        }
                    }
                    lex.extras += count;
                    Skip
                }
                callback(lex).construct(|()| Rule::BlockComment, lex);
            }
            #[inline]
            fn goto4430_at1_ctx3898_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto3898_x(lex),
                };
                match byte {
                    byte if pattern14(byte) => {
                        lex.bump_unchecked(2usize);
                        goto40_ctx39_x(lex)
                    }
                    b'/' => {
                        lex.bump_unchecked(2usize);
                        goto38_ctx3898_x(lex)
                    }
                    _ => goto3898_x(lex),
                }
            }
            #[inline]
            fn goto4428_ctx3898_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4430,
                    J40,
                    J4428,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J4430,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J4428,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                        J40,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto3898_ctx3898_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4430 => goto4430_at1_ctx3898_x(lex),
                    Jump::J40 => {
                        lex.bump_unchecked(1usize);
                        goto40_ctx39_x(lex)
                    }
                    Jump::J4428 => {
                        lex.bump_unchecked(1usize);
                        goto4428_ctx3898_x(lex)
                    }
                    Jump::__ => goto3898_ctx3898_x(lex),
                }
            }
            #[inline]
            fn goto4421_ctx51_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4421,
                    J4426,
                    J4428,
                    J4425,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4426,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4428,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4425,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                        J4421,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto51_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4421 => {
                        lex.bump_unchecked(1usize);
                        goto4421_ctx51_x(lex)
                    }
                    Jump::J4426 => {
                        lex.bump_unchecked(1usize);
                        goto4426_ctx51_x(lex)
                    }
                    Jump::J4428 => {
                        lex.bump_unchecked(1usize);
                        goto4428_ctx3898_x(lex)
                    }
                    Jump::J4425 => goto4425_at1_ctx51_x(lex),
                    Jump::__ => goto51_x(lex),
                }
            }
            #[inline]
            fn goto28_ctx51_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::AssignDiv));
            }
            #[inline]
            fn goto4444_ctx51_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3901,
                    J3902,
                    J3899,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3899,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3902,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto28_ctx51_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J3901 => {
                        lex.bump_unchecked(1usize);
                        goto3901_ctx3900_x(lex)
                    }
                    Jump::J3902 => goto3902_at1_ctx51_x(lex),
                    Jump::J3899 => {
                        lex.bump_unchecked(1usize);
                        goto3899_ctx3898_x(lex)
                    }
                    Jump::__ => goto28_ctx51_x(lex),
                }
            }
            #[inline]
            fn goto4462_ctx51_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J36,
                    J3902,
                    J4421,
                    J3901,
                    J4444,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J4421,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J36,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J4444,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3902,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                        J3901,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto51_ctx51_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J36 => {
                        lex.bump_unchecked(1usize);
                        goto36_ctx35_x(lex)
                    }
                    Jump::J3902 => goto3902_at1_ctx51_x(lex),
                    Jump::J4421 => {
                        lex.bump_unchecked(1usize);
                        goto4421_ctx51_x(lex)
                    }
                    Jump::J3901 => {
                        lex.bump_unchecked(1usize);
                        goto3901_ctx3900_x(lex)
                    }
                    Jump::J4444 => {
                        lex.bump_unchecked(1usize);
                        goto4444_ctx51_x(lex)
                    }
                    Jump::__ => goto51_ctx51_x(lex),
                }
            }
            #[inline]
            fn goto61_ctx61_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LogicalNot));
            }
            #[inline]
            fn goto65_ctx61_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Ne));
            }
            #[inline]
            fn goto63_ctx61_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::SNe));
            }
            #[inline]
            fn goto4490_ctx61_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto65_ctx61_x(lex),
                };
                match byte {
                    b'=' => {
                        lex.bump_unchecked(1usize);
                        goto63_ctx61_x(lex)
                    }
                    _ => goto65_ctx61_x(lex),
                }
            }
            #[inline]
            fn goto4488_ctx61_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 1usize]>() {
                    Some(b"=") => {
                        lex.bump_unchecked(1usize);
                        goto4490_ctx61_x(lex)
                    }
                    _ => goto61_ctx61_x(lex),
                }
            }
            #[inline]
            fn goto18_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Colon));
            }
            #[inline]
            fn goto13_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::RBrace));
            }
            #[inline]
            fn goto4196_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4196,
                    J4030,
                    J4194,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        J4194,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto1411_ctx1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4196 => {
                        lex.bump_unchecked(1usize);
                        goto4196_ctx1411_x(lex)
                    }
                    Jump::J4030 => goto4030_at1_ctx1411_x(lex),
                    Jump::J4194 => goto4194_at1_ctx1411_x(lex),
                    Jump::__ => goto1411_ctx1411_x(lex),
                }
            }
            #[inline]
            fn goto4206_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4196,
                    J4030,
                    J4194,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        J4194,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto1411_ctx1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4196 => {
                        lex.bump_unchecked(1usize);
                        goto4196_ctx1411_x(lex)
                    }
                    Jump::J4030 => goto4030_at1_ctx1411_x(lex),
                    Jump::J4194 => goto4194_at1_ctx1411_x(lex),
                    Jump::__ => goto1411_ctx1411_x(lex),
                }
            }
            #[inline]
            fn goto4204_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4196,
                    J4030,
                    J4206,
                    J4194,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4206,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        J4194,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto1411_ctx1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4196 => {
                        lex.bump_unchecked(1usize);
                        goto4196_ctx1411_x(lex)
                    }
                    Jump::J4030 => goto4030_at1_ctx1411_x(lex),
                    Jump::J4206 => {
                        lex.bump_unchecked(1usize);
                        goto4206_ctx1411_x(lex)
                    }
                    Jump::J4194 => goto4194_at1_ctx1411_x(lex),
                    Jump::__ => goto1411_ctx1411_x(lex),
                }
            }
            #[inline]
            fn goto4199_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4196,
                    J4030,
                    J4194,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        J4194,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto1043_ctx1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4196 => {
                        lex.bump_unchecked(1usize);
                        goto4196_ctx1411_x(lex)
                    }
                    Jump::J4030 => goto4030_at1_ctx1411_x(lex),
                    Jump::J4194 => goto4194_at1_ctx1411_x(lex),
                    Jump::__ => goto1043_ctx1411_x(lex),
                }
            }
            #[inline]
            fn goto4198_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4196,
                    J4199,
                    J4030,
                    J4194,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4199,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        J4194,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto1411_ctx1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4196 => {
                        lex.bump_unchecked(1usize);
                        goto4196_ctx1411_x(lex)
                    }
                    Jump::J4199 => {
                        lex.bump_unchecked(1usize);
                        goto4199_ctx1411_x(lex)
                    }
                    Jump::J4030 => goto4030_at1_ctx1411_x(lex),
                    Jump::J4194 => goto4194_at1_ctx1411_x(lex),
                    Jump::__ => goto1411_ctx1411_x(lex),
                }
            }
            #[inline]
            fn goto4202_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4196,
                    J4030,
                    J4194,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        J4194,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto1227_ctx1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4196 => {
                        lex.bump_unchecked(1usize);
                        goto4196_ctx1411_x(lex)
                    }
                    Jump::J4030 => goto4030_at1_ctx1411_x(lex),
                    Jump::J4194 => goto4194_at1_ctx1411_x(lex),
                    Jump::__ => goto1227_ctx1411_x(lex),
                }
            }
            #[inline]
            fn goto4201_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4202,
                    J4196,
                    J4030,
                    J4194,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4202,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        J4194,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto1411_ctx1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4202 => {
                        lex.bump_unchecked(1usize);
                        goto4202_ctx1411_x(lex)
                    }
                    Jump::J4196 => {
                        lex.bump_unchecked(1usize);
                        goto4196_ctx1411_x(lex)
                    }
                    Jump::J4030 => goto4030_at1_ctx1411_x(lex),
                    Jump::J4194 => goto4194_at1_ctx1411_x(lex),
                    Jump::__ => goto1411_ctx1411_x(lex),
                }
            }
            #[inline]
            fn goto4207_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4196,
                    J4030,
                    J4194,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        J4194,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto861_ctx1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4196 => {
                        lex.bump_unchecked(1usize);
                        goto4196_ctx1411_x(lex)
                    }
                    Jump::J4030 => goto4030_at1_ctx1411_x(lex),
                    Jump::J4194 => goto4194_at1_ctx1411_x(lex),
                    Jump::__ => goto861_ctx1411_x(lex),
                }
            }
            #[inline]
            fn goto4197_at1_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4196,
                    J4204,
                    J4198,
                    J4201,
                    J4207,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4198,
                        J4196,
                        J4201,
                        J4196,
                        J4196,
                        J4204,
                        J4196,
                        J4207,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4196 => {
                        lex.bump_unchecked(2usize);
                        goto4196_ctx1411_x(lex)
                    }
                    Jump::J4204 => {
                        lex.bump_unchecked(2usize);
                        goto4204_ctx1411_x(lex)
                    }
                    Jump::J4198 => {
                        lex.bump_unchecked(2usize);
                        goto4198_ctx1411_x(lex)
                    }
                    Jump::J4201 => {
                        lex.bump_unchecked(2usize);
                        goto4201_ctx1411_x(lex)
                    }
                    Jump::J4207 => {
                        lex.bump_unchecked(2usize);
                        goto4207_ctx1411_x(lex)
                    }
                    Jump::__ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4175_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4173_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4174_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4173_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4176_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4173_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4179_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4173_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4184_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match byte {
                    byte if pattern1(byte) => {
                        lex.bump_unchecked(3usize);
                        goto4173_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4183_at1_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4175,
                    J4174,
                    J4176,
                    J4179,
                    J4184,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4174,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4179,
                        J4176,
                        __,
                        __,
                        J4184,
                        __,
                        J4179,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4175,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4175 => goto4175_at2_ctx1411_x(lex),
                    Jump::J4174 => goto4174_at2_ctx1411_x(lex),
                    Jump::J4176 => goto4176_at2_ctx1411_x(lex),
                    Jump::J4179 => goto4179_at2_ctx1411_x(lex),
                    Jump::J4184 => goto4184_at2_ctx1411_x(lex),
                    Jump::__ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4178_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4173_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4177_at1_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4174,
                    J4179,
                    J4178,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4178,
                        __,
                        J4178,
                        __,
                        J4178,
                        __,
                        J4178,
                        __,
                        J4178,
                        __,
                        J4178,
                        __,
                        J4178,
                        __,
                        J4178,
                        __,
                        J4178,
                        __,
                        J4178,
                        __,
                        J4179,
                        __,
                        J4179,
                        J4174,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4174 => goto4174_at2_ctx1411_x(lex),
                    Jump::J4179 => goto4179_at2_ctx1411_x(lex),
                    Jump::J4178 => goto4178_at2_ctx1411_x(lex),
                    Jump::__ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4176_at1_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(2usize);
                        goto4173_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4174_at1_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(2usize);
                        goto4173_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4175_at1_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(2usize);
                        goto4173_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4185_at1_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(1usize) {
                    Some([188u8, 144u8..=153u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4173_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4189_at3_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([182u8..=191u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4173_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4175_at3_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4173_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4174_at3_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4173_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4176_at3_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4173_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4179_at3_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4173_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4178_at3_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4173_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4188_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4189,
                    J4175,
                    J4174,
                    J4176,
                    J4179,
                    J4178,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4178,
                        __,
                        J4175,
                        J4189,
                        __,
                        __,
                        J4179,
                        __,
                        __,
                        __,
                        J4175,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4179,
                        __,
                        J4179,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4179,
                        __,
                        J4176,
                        J4175,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4174,
                        __,
                        J4179,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4179,
                        __,
                        __,
                        __,
                        J4179,
                        J4174,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4179,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4189 => goto4189_at3_ctx1411_x(lex),
                    Jump::J4175 => goto4175_at3_ctx1411_x(lex),
                    Jump::J4174 => goto4174_at3_ctx1411_x(lex),
                    Jump::J4176 => goto4176_at3_ctx1411_x(lex),
                    Jump::J4179 => goto4179_at3_ctx1411_x(lex),
                    Jump::J4178 => goto4178_at3_ctx1411_x(lex),
                    Jump::__ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4191_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(2usize) {
                    Some([159u8, 142u8..=191u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4173_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4190_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4176,
                    J4179,
                    J4174,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4174,
                        __,
                        J4176,
                        __,
                        J4179,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4176 => goto4176_at3_ctx1411_x(lex),
                    Jump::J4179 => goto4179_at3_ctx1411_x(lex),
                    Jump::J4174 => goto4174_at3_ctx1411_x(lex),
                    Jump::__ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4193_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(2usize) {
                    Some([175u8, 176u8..=185u8]) => {
                        lex.bump_unchecked(4usize);
                        goto4173_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4192_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4176,
                    J4175,
                    J4179,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4176,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4175,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4175,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4179,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4176 => goto4176_at3_ctx1411_x(lex),
                    Jump::J4175 => goto4175_at3_ctx1411_x(lex),
                    Jump::J4179 => goto4179_at3_ctx1411_x(lex),
                    Jump::__ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4187_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match byte {
                    180u8 => goto4175_at3_ctx1411_x(lex),
                    146u8 => goto4174_at3_ctx1411_x(lex),
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4186_at1_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4188,
                    J4191,
                    J4190,
                    J4193,
                    J4192,
                    J4187,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4187,
                        J4188,
                        __,
                        __,
                        __,
                        __,
                        J4190,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4191,
                        J4192,
                        J4193,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4188 => goto4188_at2_ctx1411_x(lex),
                    Jump::J4191 => goto4191_at2_ctx1411_x(lex),
                    Jump::J4190 => goto4190_at2_ctx1411_x(lex),
                    Jump::J4193 => goto4193_at2_ctx1411_x(lex),
                    Jump::J4192 => goto4192_at2_ctx1411_x(lex),
                    Jump::J4187 => goto4187_at2_ctx1411_x(lex),
                    Jump::__ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4173_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4180,
                    J4183,
                    J4177,
                    J4176,
                    J4194,
                    J4173,
                    J4030,
                    J4174,
                    J4175,
                    J4185,
                    J4186,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4173,
                        J4173,
                        J4173,
                        J4173,
                        J4173,
                        J4173,
                        J4173,
                        J4173,
                        J4173,
                        J4173,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4173,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4194,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4174,
                        __,
                        J4175,
                        __,
                        __,
                        __,
                        J4176,
                        J4177,
                        J4180,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4183,
                        __,
                        __,
                        __,
                        __,
                        J4185,
                        J4186,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto1411_ctx1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4180 => goto4180_at1_ctx1411_x(lex),
                    Jump::J4183 => goto4183_at1_ctx1411_x(lex),
                    Jump::J4177 => goto4177_at1_ctx1411_x(lex),
                    Jump::J4176 => goto4176_at1_ctx1411_x(lex),
                    Jump::J4194 => goto4194_at1_ctx1411_x(lex),
                    Jump::J4173 => {
                        lex.bump_unchecked(1usize);
                        goto4173_ctx1411_x(lex)
                    }
                    Jump::J4030 => goto4030_at1_ctx1411_x(lex),
                    Jump::J4174 => goto4174_at1_ctx1411_x(lex),
                    Jump::J4175 => goto4175_at1_ctx1411_x(lex),
                    Jump::J4185 => goto4185_at1_ctx1411_x(lex),
                    Jump::J4186 => goto4186_at1_ctx1411_x(lex),
                    Jump::__ => goto1411_ctx1411_x(lex),
                }
            }
            #[inline]
            fn goto4181_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([134u8..=143u8]) => {
                        lex.bump_unchecked(3usize);
                        goto4173_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4182_at2_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match byte {
                    byte if pattern0(byte) => {
                        lex.bump_unchecked(3usize);
                        goto4173_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4180_at1_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4181,
                    J4175,
                    J4174,
                    J4182,
                    J4176,
                    J4179,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4176,
                        J4179,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4174,
                        J4179,
                        __,
                        __,
                        __,
                        __,
                        J4181,
                        __,
                        J4179,
                        __,
                        __,
                        J4182,
                        __,
                        __,
                        J4179,
                        J4175,
                        __,
                        __,
                        J4182,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4181 => goto4181_at2_ctx1411_x(lex),
                    Jump::J4175 => goto4175_at2_ctx1411_x(lex),
                    Jump::J4174 => goto4174_at2_ctx1411_x(lex),
                    Jump::J4182 => goto4182_at2_ctx1411_x(lex),
                    Jump::J4176 => goto4176_at2_ctx1411_x(lex),
                    Jump::J4179 => goto4179_at2_ctx1411_x(lex),
                    Jump::__ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4214_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4196,
                    J4030,
                    J4194,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        J4194,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto493_ctx1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4196 => {
                        lex.bump_unchecked(1usize);
                        goto4196_ctx1411_x(lex)
                    }
                    Jump::J4030 => goto4030_at1_ctx1411_x(lex),
                    Jump::J4194 => goto4194_at1_ctx1411_x(lex),
                    Jump::__ => goto493_ctx1411_x(lex),
                }
            }
            #[inline]
            fn goto4213_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4196,
                    J4030,
                    J4214,
                    J4194,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4214,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        J4194,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto1411_ctx1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4196 => {
                        lex.bump_unchecked(1usize);
                        goto4196_ctx1411_x(lex)
                    }
                    Jump::J4030 => goto4030_at1_ctx1411_x(lex),
                    Jump::J4214 => {
                        lex.bump_unchecked(1usize);
                        goto4214_ctx1411_x(lex)
                    }
                    Jump::J4194 => goto4194_at1_ctx1411_x(lex),
                    Jump::__ => goto1411_ctx1411_x(lex),
                }
            }
            #[inline]
            fn goto4217_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4196,
                    J4030,
                    J4194,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        J4194,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto677_ctx1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4196 => {
                        lex.bump_unchecked(1usize);
                        goto4196_ctx1411_x(lex)
                    }
                    Jump::J4030 => goto4030_at1_ctx1411_x(lex),
                    Jump::J4194 => goto4194_at1_ctx1411_x(lex),
                    Jump::__ => goto677_ctx1411_x(lex),
                }
            }
            #[inline]
            fn goto4216_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4196,
                    J4030,
                    J4217,
                    J4194,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4217,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        J4194,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto1411_ctx1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4196 => {
                        lex.bump_unchecked(1usize);
                        goto4196_ctx1411_x(lex)
                    }
                    Jump::J4030 => goto4030_at1_ctx1411_x(lex),
                    Jump::J4217 => {
                        lex.bump_unchecked(1usize);
                        goto4217_ctx1411_x(lex)
                    }
                    Jump::J4194 => goto4194_at1_ctx1411_x(lex),
                    Jump::__ => goto1411_ctx1411_x(lex),
                }
            }
            #[inline]
            fn goto4219_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4196,
                    J4030,
                    J4194,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        J4194,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto127_ctx1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4196 => {
                        lex.bump_unchecked(1usize);
                        goto4196_ctx1411_x(lex)
                    }
                    Jump::J4030 => goto4030_at1_ctx1411_x(lex),
                    Jump::J4194 => goto4194_at1_ctx1411_x(lex),
                    Jump::__ => goto127_ctx1411_x(lex),
                }
            }
            #[inline]
            fn goto4211_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4196,
                    J4030,
                    J4194,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        J4194,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto309_ctx1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4196 => {
                        lex.bump_unchecked(1usize);
                        goto4196_ctx1411_x(lex)
                    }
                    Jump::J4030 => goto4030_at1_ctx1411_x(lex),
                    Jump::J4194 => goto4194_at1_ctx1411_x(lex),
                    Jump::__ => goto309_ctx1411_x(lex),
                }
            }
            #[inline]
            fn goto4210_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4196,
                    J4030,
                    J4211,
                    J4194,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4211,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        J4194,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4030,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto1411_ctx1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4196 => {
                        lex.bump_unchecked(1usize);
                        goto4196_ctx1411_x(lex)
                    }
                    Jump::J4030 => goto4030_at1_ctx1411_x(lex),
                    Jump::J4211 => {
                        lex.bump_unchecked(1usize);
                        goto4211_ctx1411_x(lex)
                    }
                    Jump::J4194 => goto4194_at1_ctx1411_x(lex),
                    Jump::__ => goto1411_ctx1411_x(lex),
                }
            }
            #[inline]
            fn goto4209_at1_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4213,
                    J4196,
                    J4216,
                    J4219,
                    J4210,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4210,
                        J4196,
                        J4213,
                        J4196,
                        J4196,
                        J4216,
                        J4196,
                        J4219,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        J4196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4213 => {
                        lex.bump_unchecked(2usize);
                        goto4213_ctx1411_x(lex)
                    }
                    Jump::J4196 => {
                        lex.bump_unchecked(2usize);
                        goto4196_ctx1411_x(lex)
                    }
                    Jump::J4216 => {
                        lex.bump_unchecked(2usize);
                        goto4216_ctx1411_x(lex)
                    }
                    Jump::J4219 => {
                        lex.bump_unchecked(2usize);
                        goto4219_ctx1411_x(lex)
                    }
                    Jump::J4210 => {
                        lex.bump_unchecked(2usize);
                        goto4210_ctx1411_x(lex)
                    }
                    Jump::__ => goto1411_x(lex),
                }
            }
            #[inline]
            fn pattern15(byte: u8) -> bool {
                const LUT: u64 = 35465847073801215u64;
                match 1u64.checked_shl(byte.wrapping_sub(48u8) as u32) {
                    Some(shift) => LUT & shift != 0,
                    None => false,
                }
            }
            #[inline]
            fn goto4195_at1_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto1411_x(lex),
                };
                match byte {
                    byte if pattern15(byte) => {
                        lex.bump_unchecked(2usize);
                        goto4196_ctx1411_x(lex)
                    }
                    _ => goto1411_x(lex),
                }
            }
            #[inline]
            fn goto4172_ctx1411_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4197,
                    J4180,
                    J4183,
                    J4209,
                    J4176,
                    J4195,
                    J4177,
                    J4173,
                    J4175,
                    J4174,
                    J4185,
                    J4186,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4173,
                        J4173,
                        J4173,
                        J4173,
                        J4173,
                        J4173,
                        J4173,
                        J4173,
                        J4173,
                        J4173,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        __,
                        __,
                        __,
                        __,
                        J4173,
                        __,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4197,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4209,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        J4195,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4174,
                        __,
                        J4175,
                        __,
                        __,
                        __,
                        J4176,
                        J4177,
                        J4180,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4183,
                        __,
                        __,
                        __,
                        __,
                        J4185,
                        J4186,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto1411_ctx1411_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4197 => goto4197_at1_ctx1411_x(lex),
                    Jump::J4180 => goto4180_at1_ctx1411_x(lex),
                    Jump::J4183 => goto4183_at1_ctx1411_x(lex),
                    Jump::J4209 => goto4209_at1_ctx1411_x(lex),
                    Jump::J4176 => goto4176_at1_ctx1411_x(lex),
                    Jump::J4195 => goto4195_at1_ctx1411_x(lex),
                    Jump::J4177 => goto4177_at1_ctx1411_x(lex),
                    Jump::J4173 => {
                        lex.bump_unchecked(1usize);
                        goto4173_ctx1411_x(lex)
                    }
                    Jump::J4175 => goto4175_at1_ctx1411_x(lex),
                    Jump::J4174 => goto4174_at1_ctx1411_x(lex),
                    Jump::J4185 => goto4185_at1_ctx1411_x(lex),
                    Jump::J4186 => goto4186_at1_ctx1411_x(lex),
                    Jump::__ => goto1411_ctx1411_x(lex),
                }
            }
            #[inline]
            fn goto3197_at1<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(1usize) {
                    Some(&[160u8, 184u8]) => goto3175_at3(lex),
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto92_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::As));
            }
            #[inline]
            fn goto4551_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto92_ctx125_x(lex),
                };
                match byte {
                    byte if pattern4(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    _ => goto92_ctx125_x(lex),
                }
            }
            #[inline]
            fn goto4550_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 1usize]>() {
                    Some(b"s") => {
                        lex.bump_unchecked(1usize);
                        goto4551_ctx125_x(lex)
                    }
                    _ => goto125_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto12_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LBrace));
            }
            #[inline]
            fn goto3177_at1<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some(&[143u8]) => goto3175_at2(lex),
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3178_at1<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some(&[139u8]) => goto3175_at2(lex),
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3196_at1<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(1usize) {
                    Some([130u8, 160u8..=191u8]) => goto3175_at3(lex),
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto80_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Break));
            }
            #[inline]
            fn goto4548_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto80_ctx125_x(lex),
                };
                match byte {
                    byte if pattern4(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    _ => goto80_ctx125_x(lex),
                }
            }
            #[inline]
            fn goto4547_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 4usize]>() {
                    Some(b"reak") => {
                        lex.bump_unchecked(4usize);
                        goto4548_ctx125_x(lex)
                    }
                    _ => goto125_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto47_ctx47_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Add));
            }
            #[inline]
            fn goto45_ctx47_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Inc));
            }
            #[inline]
            fn goto24_ctx47_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::AssignAdd));
            }
            #[inline]
            fn goto4456_ctx47_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto47_ctx47_x(lex),
                };
                match byte {
                    b'+' => {
                        lex.bump_unchecked(1usize);
                        goto45_ctx47_x(lex)
                    }
                    b'=' => {
                        lex.bump_unchecked(1usize);
                        goto24_ctx47_x(lex)
                    }
                    _ => goto47_ctx47_x(lex),
                }
            }
            #[inline]
            fn goto50_ctx50_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Mul));
            }
            #[inline]
            fn goto49_ctx50_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Pow));
            }
            #[inline]
            fn goto26_ctx50_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::AssignPow));
            }
            #[inline]
            fn goto4460_ctx50_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 1usize]>() {
                    Some(b"=") => {
                        lex.bump_unchecked(1usize);
                        goto26_ctx50_x(lex)
                    }
                    _ => goto49_ctx50_x(lex),
                }
            }
            #[inline]
            fn goto27_ctx50_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::AssignMul));
            }
            #[inline]
            fn goto4461_ctx50_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto50_ctx50_x(lex),
                };
                match byte {
                    b'*' => {
                        lex.bump_unchecked(1usize);
                        goto4460_ctx50_x(lex)
                    }
                    b'=' => {
                        lex.bump_unchecked(1usize);
                        goto27_ctx50_x(lex)
                    }
                    _ => goto50_ctx50_x(lex),
                }
            }
            #[inline]
            fn goto71_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Then));
            }
            #[inline]
            fn goto4502_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto71_ctx124_x(lex),
                };
                match byte {
                    byte if pattern4(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    _ => goto71_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto4584_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto124_ctx124_x(lex),
                };
                match byte {
                    byte if pattern7(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    b'n' => {
                        lex.bump_unchecked(1usize);
                        goto4502_ctx124_x(lex)
                    }
                    _ => goto124_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto4582_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto124_ctx124_x(lex),
                };
                match byte {
                    byte if pattern6(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    b'e' => {
                        lex.bump_unchecked(1usize);
                        goto4584_ctx124_x(lex)
                    }
                    _ => goto124_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto122_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralConstTrue));
            }
            #[inline]
            fn goto4592_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto122_ctx124_x(lex),
                };
                match byte {
                    byte if pattern4(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    _ => goto122_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto4591_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 2usize]>() {
                    Some(b"ue") => {
                        lex.bump_unchecked(2usize);
                        goto4592_ctx124_x(lex)
                    }
                    _ => goto125_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto120_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralConstTau));
            }
            #[inline]
            fn goto4581_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto120_ctx124_x(lex),
                };
                match byte {
                    byte if pattern4(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    _ => goto120_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto4580_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 1usize]>() {
                    Some(b"u") => {
                        lex.bump_unchecked(1usize);
                        goto4581_ctx124_x(lex)
                    }
                    _ => goto125_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto4589_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J125,
                    J4582,
                    J4591,
                    J4580,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        __,
                        __,
                        __,
                        __,
                        J125,
                        __,
                        J4580,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J4582,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J4591,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto124_ctx124_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J125 => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    Jump::J4582 => {
                        lex.bump_unchecked(1usize);
                        goto4582_ctx124_x(lex)
                    }
                    Jump::J4591 => {
                        lex.bump_unchecked(1usize);
                        goto4591_ctx124_x(lex)
                    }
                    Jump::J4580 => {
                        lex.bump_unchecked(1usize);
                        goto4580_ctx124_x(lex)
                    }
                    Jump::__ => goto124_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto68_ctx68_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Lt));
            }
            #[inline]
            fn goto57_ctx68_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::SL));
            }
            #[inline]
            fn goto33_ctx68_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::AssignSL));
            }
            #[inline]
            fn goto4470_ctx68_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 1usize]>() {
                    Some(b"=") => {
                        lex.bump_unchecked(1usize);
                        goto33_ctx68_x(lex)
                    }
                    _ => goto57_ctx68_x(lex),
                }
            }
            #[inline]
            fn goto66_ctx68_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Le));
            }
            #[inline]
            fn goto4495_ctx68_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto68_ctx68_x(lex),
                };
                match byte {
                    b'<' => {
                        lex.bump_unchecked(1usize);
                        goto4470_ctx68_x(lex)
                    }
                    b'=' => {
                        lex.bump_unchecked(1usize);
                        goto66_ctx68_x(lex)
                    }
                    _ => goto68_ctx68_x(lex),
                }
            }
            #[inline]
            fn goto3185_at2<'s>(lex: &mut Lexer<'s>) {
                let arr = match lex.read_at::<&[u8; 2usize]>(2usize) {
                    Some(arr) => arr,
                    None => return _error(lex),
                };
                match arr[0] {
                    byte if pattern2(byte) => goto3175_at3(lex),
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3194_at2<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some(&[191u8]) => goto3175_at3(lex),
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3188_at2<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some(&[177u8]) => goto3175_at3(lex),
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3191_at2<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some(&[185u8]) => goto3175_at3(lex),
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3193_at1<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J3185,
                    J3194,
                    J3188,
                    J3191,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3185,
                        __,
                        __,
                        __,
                        J3188,
                        __,
                        __,
                        __,
                        J3191,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3194,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let arr = match lex.read_at::<&[u8; 3usize]>(1usize) {
                    Some(arr) => arr,
                    None => return _error(lex),
                };
                match LUT[arr[0] as usize] {
                    Jump::J3185 => goto3185_at2(lex),
                    Jump::J3194 => goto3194_at2(lex),
                    Jump::J3188 => goto3188_at2(lex),
                    Jump::J3191 => goto3191_at2(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto3176_at1<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([162u8..=165u8]) => goto3175_at2(lex),
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto15_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::RBrack));
            }
            #[inline]
            fn goto3914_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralString));
            }
            #[inline]
            fn goto3915_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 1usize]>() {
                    Some(b"'") => {
                        lex.bump_unchecked(1usize);
                        goto3914_x(lex)
                    }
                    _ => lex.error(),
                }
            }
            #[inline]
            fn goto3914_ctx3915_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralString));
            }
            #[inline]
            fn goto3915_ctx3915_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 1usize]>() {
                    Some(b"'") => {
                        lex.bump_unchecked(1usize);
                        goto3914_ctx3915_x(lex)
                    }
                    _ => goto3915_x(lex),
                }
            }
            #[inline]
            fn pattern16(byte: u8) -> bool {
                COMPACT_TABLE_0[byte as usize] & 64 > 0
            }
            #[inline]
            fn goto3918_at1_ctx3915_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto3915_x(lex),
                };
                match byte {
                    byte if pattern10(byte) => {
                        lex.bump_unchecked(2usize);
                        goto3916_ctx3915_x(lex)
                    }
                    _ => goto3915_x(lex),
                }
            }
            #[inline]
            fn goto3916_ctx3915_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto3915_ctx3915_x(lex),
                };
                match byte {
                    byte if pattern16(byte) => {
                        lex.bump_unchecked(1usize);
                        goto3916_ctx3915_x(lex)
                    }
                    b'\\' => goto3918_at1_ctx3915_x(lex),
                    _ => goto3915_ctx3915_x(lex),
                }
            }
            #[inline]
            fn goto4_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 2usize]>() {
                    Some(&[92u8, 10u8]) => {
                        lex.bump_unchecked(2usize);
                        goto4_ctx1_x(lex)
                    }
                    _ => goto1_ctx1_x(lex),
                }
            }
            #[inline]
            fn goto6_at1<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some(&[10u8]) => {
                        lex.bump_unchecked(2usize);
                        goto4_ctx1_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto118_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralConstPi));
            }
            #[inline]
            fn goto4574_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto118_ctx125_x(lex),
                };
                match byte {
                    byte if pattern4(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    _ => goto118_ctx125_x(lex),
                }
            }
            #[inline]
            fn goto4573_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 1usize]>() {
                    Some(b"i") => {
                        lex.bump_unchecked(1usize);
                        goto4574_ctx125_x(lex)
                    }
                    _ => goto125_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto14_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LBrack));
            }
            #[inline]
            fn goto22_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Decorator));
            }
            #[inline]
            fn goto121_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralConstNil));
            }
            #[inline]
            fn goto4587_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto121_ctx125_x(lex),
                };
                match byte {
                    byte if pattern4(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    _ => goto121_ctx125_x(lex),
                }
            }
            #[inline]
            fn goto4586_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 2usize]>() {
                    Some(b"il") => {
                        lex.bump_unchecked(2usize);
                        goto4587_ctx125_x(lex)
                    }
                    _ => goto125_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto52_ctx52_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Mod));
            }
            #[inline]
            fn goto29_ctx52_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::AssignMod));
            }
            #[inline]
            fn goto4463_ctx52_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 1usize]>() {
                    Some(b"=") => {
                        lex.bump_unchecked(1usize);
                        goto29_ctx52_x(lex)
                    }
                    _ => goto52_ctx52_x(lex),
                }
            }
            #[inline]
            fn goto3907_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralString));
            }
            #[inline]
            fn goto3908_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 1usize]>() {
                    Some(b"\"") => {
                        lex.bump_unchecked(1usize);
                        goto3907_x(lex)
                    }
                    _ => lex.error(),
                }
            }
            #[inline]
            fn goto3907_ctx3908_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralString));
            }
            #[inline]
            fn goto3908_ctx3908_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 1usize]>() {
                    Some(b"\"") => {
                        lex.bump_unchecked(1usize);
                        goto3907_ctx3908_x(lex)
                    }
                    _ => goto3908_x(lex),
                }
            }
            #[inline]
            fn pattern17(byte: u8) -> bool {
                COMPACT_TABLE_0[byte as usize] & 128 > 0
            }
            #[inline]
            fn goto3911_at1_ctx3908_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto3908_x(lex),
                };
                match byte {
                    byte if pattern10(byte) => {
                        lex.bump_unchecked(2usize);
                        goto3909_ctx3908_x(lex)
                    }
                    _ => goto3908_x(lex),
                }
            }
            #[inline]
            fn goto3909_ctx3908_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto3908_ctx3908_x(lex),
                };
                match byte {
                    byte if pattern17(byte) => {
                        lex.bump_unchecked(1usize);
                        goto3909_ctx3908_x(lex)
                    }
                    b'\\' => goto3911_at1_ctx3908_x(lex),
                    _ => goto3908_ctx3908_x(lex),
                }
            }
            #[inline]
            fn goto48_ctx48_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Sub));
            }
            #[inline]
            fn goto25_ctx48_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::AssignSub));
            }
            #[inline]
            fn goto46_ctx48_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Dec));
            }
            #[inline]
            fn goto4457_ctx48_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto48_ctx48_x(lex),
                };
                match byte {
                    b'=' => {
                        lex.bump_unchecked(1usize);
                        goto25_ctx48_x(lex)
                    }
                    b'-' => {
                        lex.bump_unchecked(1usize);
                        goto46_ctx48_x(lex)
                    }
                    _ => goto48_ctx48_x(lex),
                }
            }
            #[inline]
            fn pattern18(byte: u8) -> bool {
                COMPACT_TABLE_1[byte as usize] & 1 > 0
            }
            #[inline]
            fn pattern19(byte: u8) -> bool {
                COMPACT_TABLE_1[byte as usize] & 2 > 0
            }
            #[inline]
            fn pattern20(byte: u8) -> bool {
                COMPACT_TABLE_1[byte as usize] & 4 > 0
            }
            #[inline]
            fn pattern21(byte: u8) -> bool {
                COMPACT_TABLE_1[byte as usize] & 8 > 0
            }
            #[inline]
            fn goto96_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::StartsWith));
            }
            #[inline]
            fn goto3937_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto96_ctx124_x(lex),
                };
                match byte {
                    byte if pattern4(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    _ => goto96_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto3936_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 4usize]>() {
                    Some(b"with") => {
                        lex.bump_unchecked(4usize);
                        goto3937_ctx124_x(lex)
                    }
                    _ => goto125_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto3938_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 3usize]>() {
                    Some(b"ith") => {
                        lex.bump_unchecked(3usize);
                        goto3937_ctx124_x(lex)
                    }
                    _ => goto125_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto3935_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J125,
                    J3936,
                    J3938,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        __,
                        __,
                        __,
                        __,
                        J3936,
                        __,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J3938,
                        J125,
                        J125,
                        J125,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto124_ctx124_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J125 => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    Jump::J3936 => {
                        lex.bump_unchecked(1usize);
                        goto3936_ctx124_x(lex)
                    }
                    Jump::J3938 => {
                        lex.bump_unchecked(1usize);
                        goto3938_ctx124_x(lex)
                    }
                    Jump::__ => goto124_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto4537_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto124_ctx124_x(lex),
                };
                match byte {
                    byte if pattern21(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    b's' => {
                        lex.bump_unchecked(1usize);
                        goto3935_ctx124_x(lex)
                    }
                    _ => goto124_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto4535_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto124_ctx124_x(lex),
                };
                match byte {
                    byte if pattern20(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    b't' => {
                        lex.bump_unchecked(1usize);
                        goto4537_ctx124_x(lex)
                    }
                    _ => goto124_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto4533_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto124_ctx124_x(lex),
                };
                match byte {
                    byte if pattern19(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    b'r' => {
                        lex.bump_unchecked(1usize);
                        goto4535_ctx124_x(lex)
                    }
                    _ => goto124_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto4531_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto124_ctx124_x(lex),
                };
                match byte {
                    byte if pattern18(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    b'a' => {
                        lex.bump_unchecked(1usize);
                        goto4533_ctx124_x(lex)
                    }
                    _ => goto124_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto77_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Switch));
            }
            #[inline]
            fn goto4539_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto77_ctx124_x(lex),
                };
                match byte {
                    byte if pattern4(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    _ => goto77_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto4538_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 4usize]>() {
                    Some(b"itch") => {
                        lex.bump_unchecked(4usize);
                        goto4539_ctx124_x(lex)
                    }
                    _ => goto125_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto4528_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J125,
                    J4531,
                    J4538,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        __,
                        __,
                        __,
                        __,
                        J125,
                        __,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J4531,
                        J125,
                        J125,
                        J4538,
                        J125,
                        J125,
                        J125,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto124_ctx124_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J125 => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    Jump::J4531 => {
                        lex.bump_unchecked(1usize);
                        goto4531_ctx124_x(lex)
                    }
                    Jump::J4538 => {
                        lex.bump_unchecked(1usize);
                        goto4538_ctx124_x(lex)
                    }
                    Jump::__ => goto124_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto56_ctx56_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Xor));
            }
            #[inline]
            fn goto32_ctx56_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::AssignXor));
            }
            #[inline]
            fn goto4466_ctx56_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 1usize]>() {
                    Some(b"=") => {
                        lex.bump_unchecked(1usize);
                        goto32_ctx56_x(lex)
                    }
                    _ => goto56_ctx56_x(lex),
                }
            }
            #[inline]
            fn goto73_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::For));
            }
            #[inline]
            fn goto4515_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto73_ctx124_x(lex),
                };
                match byte {
                    byte if pattern4(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    _ => goto73_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto4599_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto124_ctx124_x(lex),
                };
                match byte {
                    byte if pattern19(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    b'r' => {
                        lex.bump_unchecked(1usize);
                        goto4515_ctx124_x(lex)
                    }
                    _ => goto124_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto123_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralConstFalse));
            }
            #[inline]
            fn goto4598_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto123_ctx124_x(lex),
                };
                match byte {
                    byte if pattern4(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    _ => goto123_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto4597_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 3usize]>() {
                    Some(b"lse") => {
                        lex.bump_unchecked(3usize);
                        goto4598_ctx124_x(lex)
                    }
                    _ => goto125_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto4594_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J125,
                    J4599,
                    J4597,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        __,
                        __,
                        __,
                        __,
                        J125,
                        __,
                        J4597,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J4599,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto124_ctx124_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J125 => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    Jump::J4599 => {
                        lex.bump_unchecked(1usize);
                        goto4599_ctx124_x(lex)
                    }
                    Jump::J4597 => {
                        lex.bump_unchecked(1usize);
                        goto4597_ctx124_x(lex)
                    }
                    Jump::__ => goto124_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto78_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Return));
            }
            #[inline]
            fn goto4542_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto78_ctx125_x(lex),
                };
                match byte {
                    byte if pattern4(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    _ => goto78_ctx125_x(lex),
                }
            }
            #[inline]
            fn goto4541_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 5usize]>() {
                    Some(b"eturn") => {
                        lex.bump_unchecked(5usize);
                        goto4542_ctx125_x(lex)
                    }
                    _ => goto125_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto70_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::If));
            }
            #[inline]
            fn goto4499_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto70_ctx124_x(lex),
                };
                match byte {
                    byte if pattern4(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    _ => goto70_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto74_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::In));
            }
            #[inline]
            fn goto4518_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto74_ctx124_x(lex),
                };
                match byte {
                    byte if pattern4(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    _ => goto74_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto95_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Is));
            }
            #[inline]
            fn goto4571_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto95_ctx124_x(lex),
                };
                match byte {
                    byte if pattern4(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    _ => goto95_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto4570_ctx124_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J125,
                    J4499,
                    J4518,
                    J4571,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        __,
                        __,
                        __,
                        __,
                        J125,
                        __,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J4499,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J4518,
                        J125,
                        J125,
                        J125,
                        J125,
                        J4571,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto124_ctx124_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J125 => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    Jump::J4499 => {
                        lex.bump_unchecked(1usize);
                        goto4499_ctx124_x(lex)
                    }
                    Jump::J4518 => {
                        lex.bump_unchecked(1usize);
                        goto4518_ctx124_x(lex)
                    }
                    Jump::J4571 => {
                        lex.bump_unchecked(1usize);
                        goto4571_ctx124_x(lex)
                    }
                    Jump::__ => goto124_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto119_ctx119_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralConstE));
            }
            #[inline]
            fn goto72_ctx119_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Else));
            }
            #[inline]
            fn goto4508_ctx119_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto72_ctx119_x(lex),
                };
                match byte {
                    byte if pattern4(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    _ => goto72_ctx119_x(lex),
                }
            }
            #[inline]
            fn goto4507_ctx119_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 2usize]>() {
                    Some(b"se") => {
                        lex.bump_unchecked(2usize);
                        goto4508_ctx119_x(lex)
                    }
                    _ => goto125_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto124_ctx119_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::LiteralIdent));
            }
            #[inline]
            fn pattern22(byte: u8) -> bool {
                COMPACT_TABLE_1[byte as usize] & 16 > 0
            }
            #[inline]
            fn goto107_ctx119_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::EndsWith));
            }
            #[inline]
            fn goto3932_ctx119_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto107_ctx119_x(lex),
                };
                match byte {
                    byte if pattern4(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    _ => goto107_ctx119_x(lex),
                }
            }
            #[inline]
            fn goto3933_ctx119_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 3usize]>() {
                    Some(b"ith") => {
                        lex.bump_unchecked(3usize);
                        goto3932_ctx119_x(lex)
                    }
                    _ => goto125_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto3931_ctx119_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 4usize]>() {
                    Some(b"with") => {
                        lex.bump_unchecked(4usize);
                        goto3932_ctx119_x(lex)
                    }
                    _ => goto125_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto3930_ctx119_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J125,
                    J3933,
                    J3931,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        __,
                        __,
                        __,
                        __,
                        J3931,
                        __,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J3933,
                        J125,
                        J125,
                        J125,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto124_ctx119_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J125 => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    Jump::J3933 => {
                        lex.bump_unchecked(1usize);
                        goto3933_ctx119_x(lex)
                    }
                    Jump::J3931 => {
                        lex.bump_unchecked(1usize);
                        goto3931_ctx119_x(lex)
                    }
                    Jump::__ => goto124_ctx119_x(lex),
                }
            }
            #[inline]
            fn goto4512_ctx119_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto124_ctx119_x(lex),
                };
                match byte {
                    byte if pattern21(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    b's' => {
                        lex.bump_unchecked(1usize);
                        goto3930_ctx119_x(lex)
                    }
                    _ => goto124_ctx119_x(lex),
                }
            }
            #[inline]
            fn goto4509_ctx119_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto124_ctx119_x(lex),
                };
                match byte {
                    byte if pattern22(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    b'd' => {
                        lex.bump_unchecked(1usize);
                        goto4512_ctx119_x(lex)
                    }
                    _ => goto124_ctx119_x(lex),
                }
            }
            #[inline]
            fn goto4575_ctx119_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J125,
                    J4507,
                    J4509,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        __,
                        __,
                        __,
                        __,
                        J125,
                        __,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J4507,
                        J125,
                        J4509,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto119_ctx119_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J125 => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    Jump::J4507 => {
                        lex.bump_unchecked(1usize);
                        goto4507_ctx119_x(lex)
                    }
                    Jump::J4509 => {
                        lex.bump_unchecked(1usize);
                        goto4509_ctx119_x(lex)
                    }
                    Jump::__ => goto119_ctx119_x(lex),
                }
            }
            #[inline]
            fn goto23_ctx23_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Assign));
            }
            #[inline]
            fn goto64_ctx23_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Eq));
            }
            #[inline]
            fn goto62_ctx23_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::SEq));
            }
            #[inline]
            fn goto4486_ctx23_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 1usize]>() {
                    Some(b"=") => {
                        lex.bump_unchecked(1usize);
                        goto62_ctx23_x(lex)
                    }
                    _ => goto64_ctx23_x(lex),
                }
            }
            #[inline]
            fn goto20_ctx23_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::FatArrow));
            }
            #[inline]
            fn goto4485_ctx23_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto23_ctx23_x(lex),
                };
                match byte {
                    b'=' => {
                        lex.bump_unchecked(1usize);
                        goto4486_ctx23_x(lex)
                    }
                    b'>' => {
                        lex.bump_unchecked(1usize);
                        goto20_ctx23_x(lex)
                    }
                    _ => goto23_ctx23_x(lex),
                }
            }
            #[inline]
            fn goto8_x<'s>(lex: &mut Lexer<'s>) {
                #[inline]
                fn callback<'s>(l: &mut Lexer<'s>) -> impl CallbackResult<'s, (), Rule> {
                    l.extras += 1;
                }
                callback(lex).construct(|()| Rule::EOL, lex);
            }
            #[inline]
            fn goto81_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(Rule::Delete));
            }
            #[inline]
            fn goto3928_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto81_ctx125_x(lex),
                };
                match byte {
                    byte if pattern4(byte) => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    _ => goto81_ctx125_x(lex),
                }
            }
            #[inline]
            fn goto3939_ctx125_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read::<&[u8; 4usize]>() {
                    Some(b"nset") => {
                        lex.bump_unchecked(4usize);
                        goto3928_ctx125_x(lex)
                    }
                    _ => goto125_ctx124_x(lex),
                }
            }
            #[inline]
            fn goto4600<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J4366,
                    J4520,
                    J4525,
                    J3179,
                    J16,
                    J4553,
                    J4496,
                    J4434,
                    J4567,
                    J11,
                    J3175,
                    J4478,
                    J4476,
                    J53,
                    J3195,
                    J19,
                    J2,
                    J3210,
                    J10,
                    J4462,
                    J4488,
                    J18,
                    J13,
                    J4172,
                    J3197,
                    J4550,
                    J12,
                    J3177,
                    J3178,
                    J3196,
                    J4547,
                    J4456,
                    J4461,
                    J4589,
                    J4495,
                    J3193,
                    J3176,
                    J15,
                    J3916,
                    J6,
                    J4573,
                    J125,
                    J14,
                    J22,
                    J4586,
                    J4463,
                    J3909,
                    J4457,
                    J4528,
                    J4466,
                    J4594,
                    J4541,
                    J4570,
                    J4575,
                    J4485,
                    J8,
                    J3939,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2,
                        J8,
                        __,
                        J2,
                        J2,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2,
                        J4488,
                        J3909,
                        __,
                        J3175,
                        J4463,
                        J4478,
                        J3916,
                        J10,
                        J11,
                        J4461,
                        J4456,
                        J16,
                        J4457,
                        J4434,
                        J4462,
                        J4172,
                        J4366,
                        J4366,
                        J4366,
                        J4366,
                        J4366,
                        J4366,
                        J4366,
                        J4366,
                        J4366,
                        J18,
                        J8,
                        J4495,
                        J4485,
                        J4496,
                        J19,
                        J22,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J125,
                        J14,
                        J6,
                        J15,
                        J4466,
                        J125,
                        __,
                        J4550,
                        J4547,
                        J4553,
                        J4520,
                        J4575,
                        J4594,
                        J125,
                        J125,
                        J4570,
                        J125,
                        J125,
                        J125,
                        J4567,
                        J4586,
                        J125,
                        J4573,
                        J125,
                        J4541,
                        J4528,
                        J4589,
                        J3939,
                        J125,
                        J4525,
                        J125,
                        J125,
                        J125,
                        J12,
                        J4476,
                        J13,
                        J53,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3176,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3177,
                        __,
                        J3178,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3179,
                        J3193,
                        J3195,
                        J3196,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3197,
                        __,
                        __,
                        __,
                        __,
                        J3210,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return _end(lex),
                };
                match LUT[byte as usize] {
                    Jump::J4366 => {
                        lex.bump_unchecked(1usize);
                        goto4366_ctx1411_x(lex)
                    }
                    Jump::J4520 => {
                        lex.bump_unchecked(1usize);
                        goto4520_ctx124_x(lex)
                    }
                    Jump::J4525 => {
                        lex.bump_unchecked(1usize);
                        goto4525_ctx125_x(lex)
                    }
                    Jump::J3179 => goto3179_at1(lex),
                    Jump::J16 => {
                        lex.bump_unchecked(1usize);
                        goto16_x(lex)
                    }
                    Jump::J4553 => {
                        lex.bump_unchecked(1usize);
                        goto4553_ctx125_x(lex)
                    }
                    Jump::J4496 => {
                        lex.bump_unchecked(1usize);
                        goto4496_ctx69_x(lex)
                    }
                    Jump::J4434 => {
                        lex.bump_unchecked(1usize);
                        goto4434_ctx17_x(lex)
                    }
                    Jump::J4567 => {
                        lex.bump_unchecked(1usize);
                        goto4567_ctx125_x(lex)
                    }
                    Jump::J11 => {
                        lex.bump_unchecked(1usize);
                        goto11_x(lex)
                    }
                    Jump::J3175 => goto3175_at1(lex),
                    Jump::J4478 => {
                        lex.bump_unchecked(1usize);
                        goto4478_ctx55_x(lex)
                    }
                    Jump::J4476 => {
                        lex.bump_unchecked(1usize);
                        goto4476_ctx54_x(lex)
                    }
                    Jump::J53 => {
                        lex.bump_unchecked(1usize);
                        goto53_x(lex)
                    }
                    Jump::J3195 => goto3195_at1(lex),
                    Jump::J19 => {
                        lex.bump_unchecked(1usize);
                        goto19_x(lex)
                    }
                    Jump::J2 => {
                        lex.bump_unchecked(1usize);
                        goto2_ctx1_x(lex)
                    }
                    Jump::J3210 => goto3210_at1(lex),
                    Jump::J10 => {
                        lex.bump_unchecked(1usize);
                        goto10_x(lex)
                    }
                    Jump::J4462 => {
                        lex.bump_unchecked(1usize);
                        goto4462_ctx51_x(lex)
                    }
                    Jump::J4488 => {
                        lex.bump_unchecked(1usize);
                        goto4488_ctx61_x(lex)
                    }
                    Jump::J18 => {
                        lex.bump_unchecked(1usize);
                        goto18_x(lex)
                    }
                    Jump::J13 => {
                        lex.bump_unchecked(1usize);
                        goto13_x(lex)
                    }
                    Jump::J4172 => {
                        lex.bump_unchecked(1usize);
                        goto4172_ctx1411_x(lex)
                    }
                    Jump::J3197 => goto3197_at1(lex),
                    Jump::J4550 => {
                        lex.bump_unchecked(1usize);
                        goto4550_ctx125_x(lex)
                    }
                    Jump::J12 => {
                        lex.bump_unchecked(1usize);
                        goto12_x(lex)
                    }
                    Jump::J3177 => goto3177_at1(lex),
                    Jump::J3178 => goto3178_at1(lex),
                    Jump::J3196 => goto3196_at1(lex),
                    Jump::J4547 => {
                        lex.bump_unchecked(1usize);
                        goto4547_ctx125_x(lex)
                    }
                    Jump::J4456 => {
                        lex.bump_unchecked(1usize);
                        goto4456_ctx47_x(lex)
                    }
                    Jump::J4461 => {
                        lex.bump_unchecked(1usize);
                        goto4461_ctx50_x(lex)
                    }
                    Jump::J4589 => {
                        lex.bump_unchecked(1usize);
                        goto4589_ctx124_x(lex)
                    }
                    Jump::J4495 => {
                        lex.bump_unchecked(1usize);
                        goto4495_ctx68_x(lex)
                    }
                    Jump::J3193 => goto3193_at1(lex),
                    Jump::J3176 => goto3176_at1(lex),
                    Jump::J15 => {
                        lex.bump_unchecked(1usize);
                        goto15_x(lex)
                    }
                    Jump::J3916 => {
                        lex.bump_unchecked(1usize);
                        goto3916_ctx3915_x(lex)
                    }
                    Jump::J6 => goto6_at1(lex),
                    Jump::J4573 => {
                        lex.bump_unchecked(1usize);
                        goto4573_ctx125_x(lex)
                    }
                    Jump::J125 => {
                        lex.bump_unchecked(1usize);
                        goto125_ctx124_x(lex)
                    }
                    Jump::J14 => {
                        lex.bump_unchecked(1usize);
                        goto14_x(lex)
                    }
                    Jump::J22 => {
                        lex.bump_unchecked(1usize);
                        goto22_x(lex)
                    }
                    Jump::J4586 => {
                        lex.bump_unchecked(1usize);
                        goto4586_ctx125_x(lex)
                    }
                    Jump::J4463 => {
                        lex.bump_unchecked(1usize);
                        goto4463_ctx52_x(lex)
                    }
                    Jump::J3909 => {
                        lex.bump_unchecked(1usize);
                        goto3909_ctx3908_x(lex)
                    }
                    Jump::J4457 => {
                        lex.bump_unchecked(1usize);
                        goto4457_ctx48_x(lex)
                    }
                    Jump::J4528 => {
                        lex.bump_unchecked(1usize);
                        goto4528_ctx124_x(lex)
                    }
                    Jump::J4466 => {
                        lex.bump_unchecked(1usize);
                        goto4466_ctx56_x(lex)
                    }
                    Jump::J4594 => {
                        lex.bump_unchecked(1usize);
                        goto4594_ctx124_x(lex)
                    }
                    Jump::J4541 => {
                        lex.bump_unchecked(1usize);
                        goto4541_ctx125_x(lex)
                    }
                    Jump::J4570 => {
                        lex.bump_unchecked(1usize);
                        goto4570_ctx124_x(lex)
                    }
                    Jump::J4575 => {
                        lex.bump_unchecked(1usize);
                        goto4575_ctx119_x(lex)
                    }
                    Jump::J4485 => {
                        lex.bump_unchecked(1usize);
                        goto4485_ctx23_x(lex)
                    }
                    Jump::J8 => {
                        lex.bump_unchecked(1usize);
                        goto8_x(lex)
                    }
                    Jump::J3939 => {
                        lex.bump_unchecked(1usize);
                        goto3939_ctx125_x(lex)
                    }
                    Jump::__ => _error(lex),
                }
            }
            goto4600(lex)
        }
    }
    pub enum Category {
        Operator(Vec<Rule>),
        Symbol(Vec<Rule>),
        Keyword(Vec<Rule>),
        Identifier,
        Literal,
        EOL,
        EOI,
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for Category {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match self {
                Category::Operator(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(
                        f,
                        "Operator",
                        &__self_0,
                    )
                }
                Category::Symbol(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(
                        f,
                        "Symbol",
                        &__self_0,
                    )
                }
                Category::Keyword(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(
                        f,
                        "Keyword",
                        &__self_0,
                    )
                }
                Category::Identifier => {
                    ::core::fmt::Formatter::write_str(f, "Identifier")
                }
                Category::Literal => ::core::fmt::Formatter::write_str(f, "Literal"),
                Category::EOL => ::core::fmt::Formatter::write_str(f, "EOL"),
                Category::EOI => ::core::fmt::Formatter::write_str(f, "EOI"),
            }
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for Category {
        #[inline]
        fn clone(&self) -> Category {
            match self {
                Category::Operator(__self_0) => {
                    Category::Operator(::core::clone::Clone::clone(__self_0))
                }
                Category::Symbol(__self_0) => {
                    Category::Symbol(::core::clone::Clone::clone(__self_0))
                }
                Category::Keyword(__self_0) => {
                    Category::Keyword(::core::clone::Clone::clone(__self_0))
                }
                Category::Identifier => Category::Identifier,
                Category::Literal => Category::Literal,
                Category::EOL => Category::EOL,
                Category::EOI => Category::EOI,
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for Category {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for Category {
        #[inline]
        fn eq(&self, other: &Category) -> bool {
            let __self_tag = ::core::intrinsics::discriminant_value(self);
            let __arg1_tag = ::core::intrinsics::discriminant_value(other);
            __self_tag == __arg1_tag
                && match (self, other) {
                    (Category::Operator(__self_0), Category::Operator(__arg1_0)) => {
                        *__self_0 == *__arg1_0
                    }
                    (Category::Symbol(__self_0), Category::Symbol(__arg1_0)) => {
                        *__self_0 == *__arg1_0
                    }
                    (Category::Keyword(__self_0), Category::Keyword(__arg1_0)) => {
                        *__self_0 == *__arg1_0
                    }
                    _ => true,
                }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for Category {}
    #[automatically_derived]
    impl ::core::cmp::Eq for Category {
        #[inline]
        #[doc(hidden)]
        #[coverage(off)]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<Vec<Rule>>;
            let _: ::core::cmp::AssertParamIsEq<Vec<Rule>>;
            let _: ::core::cmp::AssertParamIsEq<Vec<Rule>>;
        }
    }
    #[automatically_derived]
    impl ::core::cmp::PartialOrd for Category {
        #[inline]
        fn partial_cmp(
            &self,
            other: &Category,
        ) -> ::core::option::Option<::core::cmp::Ordering> {
            let __self_tag = ::core::intrinsics::discriminant_value(self);
            let __arg1_tag = ::core::intrinsics::discriminant_value(other);
            match (self, other) {
                (Category::Operator(__self_0), Category::Operator(__arg1_0)) => {
                    ::core::cmp::PartialOrd::partial_cmp(__self_0, __arg1_0)
                }
                (Category::Symbol(__self_0), Category::Symbol(__arg1_0)) => {
                    ::core::cmp::PartialOrd::partial_cmp(__self_0, __arg1_0)
                }
                (Category::Keyword(__self_0), Category::Keyword(__arg1_0)) => {
                    ::core::cmp::PartialOrd::partial_cmp(__self_0, __arg1_0)
                }
                _ => ::core::cmp::PartialOrd::partial_cmp(&__self_tag, &__arg1_tag),
            }
        }
    }
    #[automatically_derived]
    impl ::core::cmp::Ord for Category {
        #[inline]
        fn cmp(&self, other: &Category) -> ::core::cmp::Ordering {
            let __self_tag = ::core::intrinsics::discriminant_value(self);
            let __arg1_tag = ::core::intrinsics::discriminant_value(other);
            match ::core::cmp::Ord::cmp(&__self_tag, &__arg1_tag) {
                ::core::cmp::Ordering::Equal => {
                    match (self, other) {
                        (Category::Operator(__self_0), Category::Operator(__arg1_0)) => {
                            ::core::cmp::Ord::cmp(__self_0, __arg1_0)
                        }
                        (Category::Symbol(__self_0), Category::Symbol(__arg1_0)) => {
                            ::core::cmp::Ord::cmp(__self_0, __arg1_0)
                        }
                        (Category::Keyword(__self_0), Category::Keyword(__arg1_0)) => {
                            ::core::cmp::Ord::cmp(__self_0, __arg1_0)
                        }
                        _ => ::core::cmp::Ordering::Equal,
                    }
                }
                cmp => cmp,
            }
        }
    }
    #[automatically_derived]
    impl ::core::hash::Hash for Category {
        #[inline]
        fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
            let __self_tag = ::core::intrinsics::discriminant_value(self);
            ::core::hash::Hash::hash(&__self_tag, state);
            match self {
                Category::Operator(__self_0) => ::core::hash::Hash::hash(__self_0, state),
                Category::Symbol(__self_0) => ::core::hash::Hash::hash(__self_0, state),
                Category::Keyword(__self_0) => ::core::hash::Hash::hash(__self_0, state),
                _ => {}
            }
        }
    }
    impl std::fmt::Display for Category {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            match self {
                Category::Operator(r) => {
                    let inner = r
                        .iter()
                        .map(|r| {
                            let res = ::alloc::fmt::format(format_args!("`{0}`", r));
                            res
                        })
                        .collect::<Vec<_>>()
                        .join(", ");
                    f.write_fmt(format_args!("Operator({0})", inner))
                }
                Category::Symbol(r) => {
                    let inner = r
                        .iter()
                        .map(|r| {
                            let res = ::alloc::fmt::format(format_args!("{0}", r));
                            res
                        })
                        .collect::<Vec<_>>()
                        .join(", ");
                    f.write_fmt(format_args!("Symbol(`{0}`)", inner))
                }
                Category::Keyword(r) => {
                    let inner = r
                        .iter()
                        .map(|r| {
                            let res = ::alloc::fmt::format(format_args!("`{0}`", r));
                            res
                        })
                        .collect::<Vec<_>>()
                        .join(", ");
                    f.write_fmt(format_args!("Keyword({0})", inner))
                }
                Category::Identifier => f.write_fmt(format_args!("identifier")),
                Category::Literal => f.write_fmt(format_args!("literal value")),
                Category::EOL => f.write_fmt(format_args!("linebreak")),
                Category::EOI => f.write_fmt(format_args!("end of input")),
            }
        }
    }
    impl Category {
        pub fn from_rule(rule: Rule) -> Option<Self> {
            Some(
                match rule {
                    Rule::EOI => Category::EOI,
                    Rule::EOL => Category::EOL,
                    Rule::LParen
                    | Rule::RParen
                    | Rule::LBrace
                    | Rule::RBrace
                    | Rule::LBrack
                    | Rule::RBrack
                    | Rule::Comma
                    | Rule::Colon
                    | Rule::Range
                    | Rule::Dot
                    | Rule::Question
                    | Rule::Decorator => {
                        Category::Symbol(
                            <[_]>::into_vec(
                                #[rustc_box]
                                ::alloc::boxed::Box::new([rule]),
                            ),
                        )
                    }
                    Rule::Assign
                    | Rule::AssignAdd
                    | Rule::AssignSub
                    | Rule::AssignPow
                    | Rule::AssignMul
                    | Rule::AssignDiv
                    | Rule::AssignMod
                    | Rule::AssignOr
                    | Rule::AssignAnd
                    | Rule::AssignXor
                    | Rule::AssignSL
                    | Rule::AssignSR
                    | Rule::Inc
                    | Rule::Dec
                    | Rule::Add
                    | Rule::Sub
                    | Rule::Pow
                    | Rule::Mul
                    | Rule::Div
                    | Rule::Mod
                    | Rule::BitwiseNot
                    | Rule::BitwiseOr
                    | Rule::BitwiseAnd
                    | Rule::Xor
                    | Rule::SL
                    | Rule::SR
                    | Rule::LogicalOr
                    | Rule::LogicalAnd
                    | Rule::LogicalNot
                    | Rule::SEq
                    | Rule::SNe
                    | Rule::Eq
                    | Rule::Ne
                    | Rule::Le
                    | Rule::Ge
                    | Rule::Lt
                    | Rule::Gt
                    | Rule::FatArrow => {
                        Category::Operator(
                            <[_]>::into_vec(
                                #[rustc_box]
                                ::alloc::boxed::Box::new([rule]),
                            ),
                        )
                    }
                    Rule::If
                    | Rule::Then
                    | Rule::Else
                    | Rule::For
                    | Rule::In
                    | Rule::Do
                    | Rule::Where
                    | Rule::Switch
                    | Rule::Return
                    | Rule::Continue
                    | Rule::Break
                    | Rule::Delete
                    | Rule::As
                    | Rule::Contains
                    | Rule::Matches
                    | Rule::Is
                    | Rule::StartsWith
                    | Rule::EndsWith => {
                        Category::Keyword(
                            <[_]>::into_vec(
                                #[rustc_box]
                                ::alloc::boxed::Box::new([rule]),
                            ),
                        )
                    }
                    Rule::LiteralIdent => Category::Identifier,
                    Rule::LiteralConstPi
                    | Rule::LiteralConstE
                    | Rule::LiteralConstTau
                    | Rule::LiteralConstNil
                    | Rule::LiteralConstTrue
                    | Rule::LiteralConstFalse
                    | Rule::LiteralU8
                    | Rule::LiteralU16
                    | Rule::LiteralU32
                    | Rule::LiteralU64
                    | Rule::LiteralI8
                    | Rule::LiteralI16
                    | Rule::LiteralI32
                    | Rule::LiteralI64
                    | Rule::LiteralDecimal
                    | Rule::LiteralCurrency
                    | Rule::LiteralFloat
                    | Rule::LiteralString => Category::Literal,
                    _ => return None,
                },
            )
        }
        pub fn from_ruleset(rules: &[Rule]) -> Vec<Self> {
            let categories = rules
                .iter()
                .filter_map(|r| Category::from_rule(*r))
                .collect::<Vec<_>>();
            let mut symbols = std::collections::HashSet::new();
            let mut keywords = std::collections::HashSet::new();
            let mut operators = std::collections::HashSet::new();
            let mut set = std::collections::HashSet::new();
            for c in categories.into_iter() {
                match c {
                    Category::Symbol(r) => symbols.extend(r),
                    Category::Keyword(r) => keywords.extend(r),
                    Category::Operator(r) => operators.extend(r),
                    _ => {
                        set.insert(c);
                    }
                }
            }
            let mut categories = ::alloc::vec::Vec::new();
            if !symbols.is_empty() {
                categories.push(Category::Symbol(symbols.into_iter().collect()));
            }
            if !keywords.is_empty() {
                categories.push(Category::Keyword(keywords.into_iter().collect()));
            }
            if !operators.is_empty() {
                categories.push(Category::Operator(operators.into_iter().collect()));
            }
            categories.extend(set.into_iter());
            categories
        }
        pub fn many_to_string(this: &Vec<Self>) -> String {
            {
                let res = ::alloc::fmt::format(
                    format_args!(
                        "{0}",
                        this.iter().map(|c| c.to_string()).collect::<Vec<_>>().join(", "),
                    ),
                );
                res
            }
        }
        pub fn format_rules(this: &Vec<Rule>) -> String {
            let categories = Category::from_ruleset(this);
            Category::many_to_string(&categories)
        }
    }
    pub struct Tokenizer<'source>(logos::Lexer<'source, Rule>);
    impl<'source> Tokenizer<'source> {
        pub fn new(input: &'source str) -> Self {
            Self(Rule::lexer_with_extras(input, 1))
        }
        pub fn consume_next(&mut self) -> Token<'source> {
            let token = self.0.next().unwrap_or_else(|| Ok(Rule::EOI));
            let input = self.0.source();
            Token {
                line: self.0.extras,
                span: self.0.span(),
                rule: token.unwrap_or_else(|_| Rule::Error),
                input: Cow::Borrowed(input),
            }
        }
        /// Consumes this iterator, returning all tokens
        pub fn all_tokens(mut self) -> Vec<Token<'source>> {
            let mut tokens = ::alloc::vec::Vec::new();
            loop {
                let next = self.consume_next();
                {
                    ::std::io::_print(format_args!("{0:?}\n", next));
                };
                match next {
                    t if t.rule == Rule::EOI => {
                        tokens.push(t);
                        break;
                    }
                    t => tokens.push(t),
                }
            }
            tokens
        }
    }
}
